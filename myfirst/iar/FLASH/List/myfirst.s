///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM       10/Jun/2015  09:06:47
// Copyright 1999-2014 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\app\myfirst.c
//    Command line =  
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\app\myfirst.c
//        -D LPLD_K60 -D USE_K60F12 -D ARM_MATH_CM4 -lCN
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\FLASH\List\
//        -lB
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\FLASH\List\
//        -o
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\FLASH\Obj\
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --no_clustering --no_scheduling --debug --endian=little
//        --cpu=Cortex-M4F -e --char_is_signed --fpu=VFPv4_sp --dlib_config
//        D:\tools\IAR\iar7_3\arm\INC\c\DLib_Config_Normal.h -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\app\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\CPU\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\common\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\LPLD\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\LPLD\HW\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\LPLD\DEV\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\LPLD\FUNC\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\uCOS-II\Ports\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\uCOS-II\Source\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\FatFs\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\FatFs\option\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\USB\common\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\USB\driver\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\USB\descriptor\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\USB\class\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\dsp\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\MyDrive\
//        -On -I D:\tools\IAR\iar7_3\arm\CMSIS\Include\ -D ARM_MATH_CM4
//    List file    =  
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\FLASH\List\myfirst.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN Disp_single_colour
        EXTERN LCD_PutString
        EXTERN LCD_Put_Float
        EXTERN LCD_SetPos
        EXTERN LCD_init
        EXTERN LPLD_ADC_Chn_Enable
        EXTERN LPLD_ADC_EnableConversion
        EXTERN LPLD_ADC_Init
        EXTERN LPLD_DAC_Init
        EXTERN LPLD_DAC_SetBufferDataN
        EXTERN LPLD_DAC_SoftwareTrigger
        EXTERN LPLD_DMA_EnableIrq
        EXTERN LPLD_DMA_Init
        EXTERN LPLD_GPIO_EnableIrq
        EXTERN LPLD_GPIO_Init
        EXTERN LPLD_LPTMR_DelayMs
        EXTERN LPLD_PDB_AdcTriggerCfg
        EXTERN LPLD_PDB_Init
        EXTERN LPLD_PIT_EnableIrq
        EXTERN LPLD_PIT_Init
        EXTERN __aeabi_d2f
        EXTERN __aeabi_dadd
        EXTERN __aeabi_ddiv
        EXTERN __aeabi_dmul
        EXTERN __aeabi_f2d
        EXTERN __aeabi_i2d
        EXTERN __aeabi_memcpy4
        EXTERN __aeabi_ui2d
        EXTERN arm_cfft_f32
        EXTERN arm_cfft_sR_f32_len2048
        EXTERN arm_cmplx_mag_f32
        EXTERN arm_fir_f32
        EXTERN arm_fir_init_f32
        EXTERN arm_max_f32
        EXTERN write_word

        PUBLIC FFT_RESULT_NEW
        PUBLIC FFT_RESULT_OLD
        PUBLIC MyDb
        PUBLIC Result_A
        PUBLIC Result_B
        PUBLIC Result_C
        PUBLIC Result_flag
        PUBLIC S
        PUBLIC ShowMenu
        PUBLIC adc0_init_struct
        PUBLIC blockSize
        PUBLIC bufflag
        PUBLIC buttonisr
        PUBLIC buttonsetisr
        PUBLIC dac0_init_struct
        PUBLIC dma2_init_struct
        PUBLIC dma_init_struct
        PUBLIC dmaisr
        PUBLIC doBitReverse
        PUBLIC draw_fft
        PUBLIC fftSize
        PUBLIC firCoeffs32
        PUBLIC firInput
        PUBLIC flag
        PUBLIC gpio_init_struct
        PUBLIC ifftFlag
        PUBLIC init_ADC
        PUBLIC init_DAC
        PUBLIC init_DMA
        PUBLIC init_PDB
        PUBLIC init_PIT
        PUBLIC init_gpio_PE24
        PUBLIC inputF32
        PUBLIC main
        PUBLIC maxValue
        PUBLIC myflag2
        PUBLIC numBlocks
        PUBLIC outputF32
        PUBLIC pdb_init_struct
        PUBLIC pit0_init_struct
        PUBLIC pitdacisr
        PUBLIC power
        PUBLIC starfir
        PUBLIC testIndex
        PUBLIC testInput_x
        PUBLIC value

// D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\app\myfirst.c
//    1 /**
//    2 * --------------基于"拉普兰德K60底层库V3"的工程（myfirst）-----------------
//    3 * @file myfirst.c
//    4 * @version 0.0
//    5 * @date 2013-9-29
//    6 * @brief 关于该工程的描述
//    7 *
//    8 * 版权所有:北京拉普兰德电子技术有限公司
//    9 * http://www.lpld.cn
//   10 * mail:support@lpld.cn
//   11 * 硬件平台:  LPLD K60 Card / LPLD K60 Nano
//   12 *
//   13 * 本工程基于"拉普兰德K60底层库V3"开发，
//   14 * 所有开源代码均在"lib"文件夹下，用户不必更改该目录下代码，
//   15 * 所有用户工程需保存在"project"文件夹下，以工程名定义文件夹名，
//   16 * 底层库使用方法见相关文档。 
//   17 *
//   18 */
//   19 #include "common.h"

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
NVIC_EnableIRQ:
        MOVS     R1,#+1
        ANDS     R2,R0,#0x1F
        LSLS     R1,R1,R2
        LDR.W    R2,??DataTable11  ;; 0xe000e100
        SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
        LSRS     R3,R0,#+5
        STR      R1,[R2, R3, LSL #+2]
        BX       LR               ;; return
//   20 #include "arm_math.h"
//   21 #include "arm_const_structs.h"
//   22 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   23 ADC_InitTypeDef adc0_init_struct;
adc0_init_struct:
        DS8 20

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   24 DMA_InitTypeDef dma_init_struct;
dma_init_struct:
        DS8 44

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   25 DMA_InitTypeDef dma2_init_struct;
dma2_init_struct:
        DS8 44

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   26 PDB_InitTypeDef pdb_init_struct;
pdb_init_struct:
        DS8 40

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   27 PIT_InitTypeDef pit0_init_struct;
pit0_init_struct:
        DS8 20

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   28 DAC_InitTypeDef dac0_init_struct;
dac0_init_struct:
        DS8 28

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   29 GPIO_InitTypeDef gpio_init_struct;
gpio_init_struct:
        DS8 20
//   30 
//   31 #define LENGTH 2048
//   32 #define MY_SAMPLE_TIME 25       //25us
//   33 #define OFFEST  2547 
//   34 #define FFT_VALUE 666   //显示用的
//   35 
//   36 /*FFT参数*/

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   37 float32_t testInput_x[LENGTH*2];  
testInput_x:
        DS8 16384

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   38 uint32_t fftSize = LENGTH;
fftSize:
        DATA
        DC32 2048

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   39 uint32_t ifftFlag = 0;
ifftFlag:
        DS8 4

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   40 uint32_t doBitReverse = 1;              //fft
doBitReverse:
        DATA
        DC32 1

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   41 static float32_t testOutput[LENGTH];
testOutput:
        DS8 8192

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   42 float32_t maxValue;
maxValue:
        DS8 4

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   43 uint32_t testIndex = 0;
testIndex:
        DS8 4
//   44 /*FIR参数*/
//   45 #define TEST_LENGTH_SAMPLES  LENGTH            //信号长度
//   46 #define BLOCK_SIZE            256             //处理数据块大小
//   47 #define NUM_TAPS              257
//   48 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   49 arm_fir_instance_f32 S;
S:
        DS8 12

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   50 float32_t  *inputF32, *outputF32;
inputF32:
        DS8 4

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
outputF32:
        DS8 4
//   51 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   52 static float32_t firOutput[TEST_LENGTH_SAMPLES];
firOutput:
        DS8 8192

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   53 float32_t firInput[TEST_LENGTH_SAMPLES];
firInput:
        DS8 8192
//   54 /* -------------------------------------------------------------------
//   55 * Declare State buffer of size (numTaps + blockSize - 1)
//   56 * ------------------------------------------------------------------- */

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//   57 uint8 starfir = 0;
starfir:
        DS8 1

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   58 static float32_t firStateF32[BLOCK_SIZE + NUM_TAPS - 1];
firStateF32:
        DS8 2048

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_0:
        DATA
        DC8 "Frequency: "

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_1:
        DATA
        DC8 "  KHz"
        DC8 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_2:
        DATA
        DC8 "Power: "

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_3:
        DATA
        DC8 "   W"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_4:
        DATA
        DC8 "Amplify: "
        DC8 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_5:
        DATA
        DC8 "Restrain: "
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(0)
        DATA
        DC8 ""

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_7:
        DATA
        DC8 "On  "
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "Off"
//   59 
//   60 /* ----------------------------------------------------------------------
//   61 ** FIR Coefficients buffer generated using fir1() MATLAB function.
//   62 ** fir1(28, 5/20)
//   63 ** 深度28阶 采样率20*2 = 40；截止频率5
//   64 ** ------------------------------------------------------------------- */
//   65 
//   66 //const float32_t firCoeffs32[NUM_TAPS] = {
//   67 //  -0.00182252303876500f,	-0.00158792937657900f,	0.0f,	0.00369775082778883f,	0.00807543026333160f,
//   68 //  0.00853022168344206f,	0.0f,	-0.0173976983943204f,	-0.0341458607045117f,	-0.0333591564739013f,	0.0f,
//   69 //  0.0676308394716027f,	0.152206183469855f,	0.222924695624960f,	0.250496093294194f,	0.222924695624960f,
//   70 //  0.152206183469855f,	0.0676308394716027f,	0.0f,	-0.0333591564739013f,	-0.0341458607045117f,	-0.0173976983943204f,
//   71 //  0.0f,	0.00853022168344206f,	0.00807543026333160f,	0.00369775082778883f,	1.22600883254452e-18	-0.00158792937657890f,
//   72 //  -0.00182252303876478f
//   73 //};
//   74 ///*深度28阶 采样率20*2 = 40；截止频率1k*/
//   75 //const float32_t firCoeffs32[NUM_TAPS] = {
//   76 //0.00220147550354879,	0.00298751607525626,	0.00473861040595637,	0.00771179992273451,
//   77 //0.0120572664060801,	0.0177901016003866,	0.0247758165611018,	0.0327318735909219,
//   78 //0.0412457205147427,	0.0498079016934013,	0.0578570401047242,	0.0648320458621942,
//   79 //0.0702259860802637,	0.0736357657109149,	0.0748021599355456,	0.0736357657109149,
//   80 //0.0702259860802637,	0.0648320458621942,	0.0578570401047242,	0.0498079016934013,
//   81 //0.0412457205147427,	0.0327318735909219,	0.0247758165611018,	0.0177901016003866,
//   82 //0.0120572664060801,	0.00771179992273451,	0.00473861040595637,	0.00298751607525626,
//   83 //0.00220147550354879
//   84 //};
//   85 //const float32_t firCoeffs32[NUM_TAPS] = {
//   86 //0.00522779451474040,	0.00598812205124778,	0.00822226545230521,	0.0118224027698896,
//   87 //0.0166112315520419,	0.0223508387611049,	0.0287546727786943,	0.0355020112015747,
//   88 //0.0422541893107746,	0.0486717628583401,	0.0544317299159395,	0.0592439325388307,
//   89 //0.0628658001712345,	0.0651146809751320,	0.0658771302963001,	0.0651146809751320,
//   90 //0.0628658001712345,	0.0592439325388307,	0.0544317299159395,	0.0486717628583401,
//   91 //0.0422541893107746,	0.0355020112015747,	0.0287546727786943,	0.0223508387611049,
//   92 //0.0166112315520419,	0.0118224027698896,	0.00822226545230521,	0.00598812205124778,
//   93 //0.00522779451474040
//   94 //};
//   95 //const float32_t firCoeffs32[NUM_TAPS] = {
//   96 //  -0.0018225230f, -0.0015879294f, +0.0000000000f, +0.0036977508f, +0.0080754303f, +0.0085302217f, -0.0000000000f, -0.0173976984f,
//   97 //  -0.0341458607f, -0.0333591565f, +0.0000000000f, +0.0676308395f, +0.1522061835f, +0.2229246956f, +0.2504960933f, +0.2229246956f,
//   98 //  +0.1522061835f, +0.0676308395f, +0.0000000000f, -0.0333591565f, -0.0341458607f, -0.0173976984f, -0.0000000000f, +0.0085302217f,
//   99 //  +0.0080754303f, +0.0036977508f, +0.0000000000f, -0.0015879294f, -0.0018225230f
//  100 //};
//  101 //const float32_t firCoeffs32[NUM_TAPS]  = {
//  102 //-0.00182252303876478,	-0.00158792937657890,	0,	0.00369775082778883,
//  103 //0.00807543026333160,	0.00853022168344206,	0,	-0.0173976983943204,
//  104 //-0.0341458607045117,	-0.0333591564739013,	0,	0.0676308394716027,
//  105 //0.152206183469855,	0.222924695624960,	0.250496093294194,	0.222924695624960,
//  106 //0.152206183469855,	0.0676308394716027,	0,	-0.0333591564739013,
//  107 //-0.0341458607045117,	-0.0173976983943204,	0,	0.00853022168344206,
//  108 //0.00807543026333160,	0.00369775082778883,	0,	-0.00158792937657890,
//  109 //-0.00182252303876478
//  110 //};
//  111 //const float32_t firCoeffs32[NUM_TAPS]  = {
//  112 //0.000098596334444907250140442689367859, -0.00010284039200871093115534360418195, -0.00032178871001964934675521057272363, 
//  113 //-0.0005559248141126732836725388153809, -0.00079421237640128804560757380670566, -0.0010135039109662302009295942184508, 
//  114 //-0.0011777273518818914040812151355908, -0.0012404165774539744390020379327666, -0.001150775449605638675251717550907, 
//  115 //-0.00086279511887951210527547551976113, -0.000346278773738184898842856762613, 0.00040192114350394263222465696117069,
//  116 //0.0013484785918355533980428351270575, 0.0024180432516182170758767266960376, 0.0034933284500921666336503701444371,
//  117 //0.0044219870029839408384630949910843, 0.0050305499284727245301596099125163, 0.005144674854390664242576036713217,
//  118 //0.0046139054913954457778912932042203, 0.0033382311300652156398072190057746, 0.0012930993122895228283203428176762, 
//  119 //-0.0014507084272266290627534379709118, -0.0047157083585034160685967030701704, -0.0082175305238515860412062963291646, 
//  120 //-0.011577479060157439688660829801847, -0.014347970703167359229901478556712, -0.016049410504061771554074056211903,
//  121 //-0.016215532123844137585289004732658, -0.01444293947082527299063947623381, -0.010439715548011286108676110018223, 
//  122 //-0.0040676483194113594379914822241062, 0.0046270656454689878048225359918888, 0.015398843837435364709231855329108, 
//  123 //0.027806192006785711290373086512773, 0.041234483494531445901820632116141, 0.054936837849884734286121101831668, 
//  124 //0.068089880704201397043640042738843, 0.079859438871696622475049309741735, 0.089469990393412232587699861596775, 
//  125 //0.096271104549776137515593177340634, 0.099794253669843333010014418960054, 0.099794253669843333010014418960054,
//  126 //0.096271104549776137515593177340634, 0.089469990393412232587699861596775, 0.079859438871696622475049309741735, 
//  127 //0.068089880704201397043640042738843, 0.054936837849884734286121101831668, 0.041234483494531445901820632116141, 
//  128 //0.027806192006785711290373086512773, 0.015398843837435364709231855329108, 0.0046270656454689878048225359918888,
//  129 //-0.0040676483194113594379914822241062, -0.010439715548011286108676110018223, -0.01444293947082527299063947623381,
//  130 //-0.016215532123844137585289004732658, -0.016049410504061771554074056211903, -0.014347970703167359229901478556712,
//  131 //-0.011577479060157439688660829801847, -0.0082175305238515860412062963291646, -0.0047157083585034160685967030701704,
//  132 //-0.0014507084272266290627534379709118, 0.0012930993122895228283203428176762, 0.0033382311300652156398072190057746, 
//  133 //0.0046139054913954457778912932042203, 0.005144674854390664242576036713217, 0.0050305499284727245301596099125163,
//  134 //0.0044219870029839408384630949910843, 0.0034933284500921666336503701444371, 0.0024180432516182170758767266960376, 
//  135 //0.0013484785918355533980428351270575, 0.00040192114350394263222465696117069, -0.000346278773738184898842856762613, 
//  136 //-0.00086279511887951210527547551976113, -0.001150775449605638675251717550907, -0.0012404165774539744390020379327666,
//  137 //-0.0011777273518818914040812151355908, -0.0010135039109662302009295942184508, -0.00079421237640128804560757380670566, 
//  138 //-0.0005559248141126732836725388153809, -0.00032178871001964934675521057272363, -0.00010284039200871093115534360418195,
//  139 //0.000098596334444907250140442689367859
//  140 //};
//  141 //const float32_t firCoeffs32[NUM_TAPS]=
//  142 //{-0.00056259572171827969266910685064431, 0.00035092932135704989855470858906017, 0.0019593914651300464550842672650788, 0.0046545163372522808248321624091659, 0.0080669005924457904549429443363806, 0.010737353065432667792444831889043, 0.01024467498961919437183709646888, 0.0038448577000617079578448365140275, -0.010540506066670323609413273402424, -0.033323920874500208288981895066172, -0.062632781729253225733167198541196, -0.094367127873070930088594820972503, -0.12300732524437903159242324591105, -0.14297528771589021467924851549469, 0.85078712335093620300341399342869, -0.14297528771589021467924851549469, -0.12300732524437903159242324591105, -0.094367127873070930088594820972503, -0.062632781729253225733167198541196, -0.033323920874500208288981895066172, -0.010540506066670323609413273402424, 0.0038448577000617079578448365140275, 0.01024467498961919437183709646888, 0.010737353065432667792444831889043, 0.0080669005924457904549429443363806, 0.0046545163372522808248321624091659, 0.0019593914651300464550842672650788, 0.00035092932135704989855470858906017, -0.00056259572171827969266910685064431}
//  143 //;
//  144 //const float32_t firCoeffs32[NUM_TAPS]=
//  145 //{
//  146 // -0.0002335705967647545031138506255175, -0.00018453692694678374450027724673618, -0.0001302660797717656931352797622381, -0.00006927917385272641659626352561574, 0.00000000000000000017293100684117755420365103701489, 0.000079050782257657952259433109531983, 0.00016904673343465459684278884289199, 0.00027064335054492733153783112776125, 0.00038377455898802533039784745660938, 0.00050747040030582222722155272265354, 0.00063970804547589703650811721047376, 0.00077730740129696752893639910553247, 0.00091588116002505495609475882901052, 0.001049847209633510657089683348886, 0.0011725089366145212410597054031314, 0.0012762061986839380069158611519242, 0.0013525367226611816496434359535783, 0.0013926445090915711561008194507849, 0.0013875686258361652741094571794633, 0.0013286426791093855839798187901124, 0.0012079323936772959433710861176792, 0.0010186962404262957671702283235504, 0.00075585203531265254123239216710317, 0.00041643099972966333413224027104604, -0.00000000000000000070848505214237909039702798004723, -0.00049096736879379241063475758366508, -0.001050789490028680717159659252502, -0.0016703624039323835236137139048651, -0.0023370474511611848827952186979928, -0.0030346730124679683823774034578946, -0.0037436590166061095921734569458295, -0.0044412689407067927963024267512537, -0.0051019897185625847843559732552876, -0.0056980354482736141411014507696109, -0.0061999662097247231623553531676407, -0.0065774088293527842308261455173124, -0.0067998622304714833111671801191278, -0.0068375662426067764648740521238324, -0.0066624095620893110727966934803135, -0.0062488500907034866260758576572698, -0.0055748192393645619804876112368675, -0.0046225810526579896864163288228156, -0.0033795172403340745410915690882803, -0.0018388104133160924728851437492949, 0.0000000000000000015486187980314379553433264776553, 0.002130611585248406297798950959077, 0.0045397210175858494773937223953908, 0.0072069682227427697696064967658458, 0.01010507122838574800560706989927, 0.013200154654945841017910090897658, 0.016452268901589815752739554000073, 0.019816091143912452354758357842002, 0.023241793472225207028980520362893, 0.026676058057927148209342860241122, 0.030063214326338370818714196275323, 0.033346468907973124407018161718952, 0.036469195785279795440914085702389, 0.039376251670063873444593838257788, 0.04201528032827227254752955332151, 0.044337969368732292607671041650974, 0.046301223948845511568794819368122, 0.047868223903131994212412081424191, 0.049009333912315766745848577556899, 0.049702840407919349208221149183373, 0.049935493823898606524647192372868, 0.049702840407919349208221149183373, 0.049009333912315766745848577556899, 0.047868223903131994212412081424191, 0.046301223948845511568794819368122, 0.044337969368732292607671041650974, 0.04201528032827227254752955332151, 0.039376251670063873444593838257788, 0.036469195785279795440914085702389, 0.033346468907973124407018161718952, 0.030063214326338370818714196275323, 0.026676058057927148209342860241122, 0.023241793472225207028980520362893, 0.019816091143912452354758357842002, 0.016452268901589815752739554000073, 0.013200154654945841017910090897658, 0.01010507122838574800560706989927, 0.0072069682227427697696064967658458, 0.0045397210175858494773937223953908, 0.002130611585248406297798950959077, 0.0000000000000000015486187980314379553433264776553, -0.0018388104133160924728851437492949, -0.0033795172403340745410915690882803, -0.0046225810526579896864163288228156, -0.0055748192393645619804876112368675, -0.0062488500907034866260758576572698, -0.0066624095620893110727966934803135, -0.0068375662426067764648740521238324, -0.0067998622304714833111671801191278, -0.0065774088293527842308261455173124, -0.0061999662097247231623553531676407, -0.0056980354482736141411014507696109, -0.0051019897185625847843559732552876, -0.0044412689407067927963024267512537, -0.0037436590166061095921734569458295, -0.0030346730124679683823774034578946, -0.0023370474511611848827952186979928, -0.0016703624039323835236137139048651, -0.001050789490028680717159659252502, -0.00049096736879379241063475758366508, -0.00000000000000000070848505214237909039702798004723, 0.00041643099972966333413224027104604, 0.00075585203531265254123239216710317, 0.0010186962404262957671702283235504, 0.0012079323936772959433710861176792, 0.0013286426791093855839798187901124, 0.0013875686258361652741094571794633, 0.0013926445090915711561008194507849, 0.0013525367226611816496434359535783, 0.0012762061986839380069158611519242, 0.0011725089366145212410597054031314, 0.001049847209633510657089683348886, 0.00091588116002505495609475882901052, 0.00077730740129696752893639910553247, 0.00063970804547589703650811721047376, 0.00050747040030582222722155272265354, 0.00038377455898802533039784745660938, 0.00027064335054492733153783112776125, 0.00016904673343465459684278884289199, 0.000079050782257657952259433109531983, 0.00000000000000000017293100684117755420365103701489, -0.00006927917385272641659626352561574, -0.0001302660797717656931352797622381, -0.00018453692694678374450027724673618, -0.0002335705967647545031138506255175
//  147 //};

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  148 const float32_t firCoeffs32[NUM_TAPS]= 
firCoeffs32:
        DATA
        DC32 39468194H, 393BC2EAH, 392CBA54H, 39197C3BH, 390225C3H, 38CDBF5FH
        DC32 388FC3A4H, 3815DB48H, 0A04C8959H, 0B8201C2BH, 0B8A40AAEH
        DC32 0B8FA849AH, 0B928E493H, 0B953F24DH, 0B97D52F6H, 0B991E97EH
        DC32 0B9A3149CH, 0B9B17F1EH, 0B9BC7ABBH, 0B9C35BF6H, 0B9C58030H
        DC32 0B9C2543AH, 0B9B95B42H, 0B9AA35D0H, 0B994A892H, 0B9714566H
        DC32 0B92C86E1H, 0B8B77A95H, 20D44AEDH, 38CA4D5DH, 3951B9C2H, 39A1A6DCH
        DC32 39DB886DH, 3A0A75EEH, 3A260B77H, 3A3F9A9FH, 3A56322DH, 3A68E0BFH
        DC32 3A76BC41H, 3A7EE9D8H, 3A8052FDH, 3A7B4C82H, 3A6E606FH, 3A599318H
        DC32 3A3CCA80H, 3A18268EH, 39D809DCH, 39640D4EH, 0A1517E1BH, 0B9779E98H
        DC32 0B9FEB4F9H, 0BA42C91BH, 0BA833AA8H, 0BAA43DC7H, 0BAC36F11H
        DC32 0BADFC901H, 0BAF84675H, 0BB05F51CH, 0BB0CE36CH, 0BB10834DH
        DC32 0BB1079A4H, 0BB0C7ECDH, 0BB046209H, 0BAF018F8H, 0BACF074CH
        DC32 0BAA5D672H, 0BA6A18D3H, 0B9F5B9D2H, 21A8622AH, 3A04006DH
        DC32 3A871CCCH, 3ACDB02CH, 3B09F65FH, 3B2BF353H, 3B4BCF7CH, 3B68880EH
        DC32 3B808EC8H, 3B8A4D6EH, 3B910E22H, 3B946B58H, 3B940F44H, 3B8FB721H
        DC32 3B873625H, 3B74F039H, 3B53070FH, 3B28F664H, 3AEE7CBAH, 3A7A6939H
        DC32 0A1E4F4CDH, 0BA86C50AH, 0BB0A2A99H, 0BB52C604H, 0BB8DBCB6H
        DC32 0BBB13402H, 0BBD2CE2EH, 0BBF18919H, 0BC063041H, 0BC1129C9H
        DC32 0BC193552H, 0BC1DDE7EH, 0BC1EBB3AH, 0BC1B6E78H, 0BC13AAB6H
        DC32 0BC07344AH, 0BBEBC6BEH, 0BBBF4B2DH, 0BB88FE87H, 0BB1230CEH
        DC32 2208147AH, 3B23687CH, 3BAB3FFEH, 3C05D9AEH, 3C38FB19H, 3C6E6624H
        DC32 3C92B698H, 3CAEAB01H, 3CCAAE79H, 3CE65C32H, 3D00A71AH, 3D0D8F9FH
        DC32 3D19B653H, 3D24EC1CH, 3D2F04FEH, 3D37D8F5H, 3D3F44BAH, 3D452A72H
        DC32 3D497243H, 3D4C0ACDH, 3D4CE97FH, 3D4C0ACDH, 3D497243H, 3D452A72H
        DC32 3D3F44BAH, 3D37D8F5H, 3D2F04FEH, 3D24EC1CH, 3D19B653H, 3D0D8F9FH
        DC32 3D00A71AH, 3CE65C32H, 3CCAAE79H, 3CAEAB01H, 3C92B698H, 3C6E6624H
        DC32 3C38FB19H, 3C05D9AEH, 3BAB3FFEH, 3B23687CH, 2208147AH, 0BB1230CEH
        DC32 0BB88FE87H, 0BBBF4B2DH, 0BBEBC6BEH, 0BC07344AH, 0BC13AAB6H
        DC32 0BC1B6E78H, 0BC1EBB3AH, 0BC1DDE7EH, 0BC193552H, 0BC1129C9H
        DC32 0BC063041H, 0BBF18919H, 0BBD2CE2EH, 0BBB13402H, 0BB8DBCB6H
        DC32 0BB52C604H, 0BB0A2A99H, 0BA86C50AH, 0A1E4F4CDH, 3A7A6939H
        DC32 3AEE7CBAH, 3B28F664H, 3B53070FH, 3B74F039H, 3B873625H, 3B8FB721H
        DC32 3B940F44H, 3B946B58H, 3B910E22H, 3B8A4D6EH, 3B808EC8H, 3B68880EH
        DC32 3B4BCF7CH, 3B2BF353H, 3B09F65FH, 3ACDB02CH, 3A871CCCH, 3A04006DH
        DC32 21A8622AH, 0B9F5B9D2H, 0BA6A18D3H, 0BAA5D672H, 0BACF074CH
        DC32 0BAF018F8H, 0BB046209H, 0BB0C7ECDH, 0BB1079A4H, 0BB10834DH
        DC32 0BB0CE36CH, 0BB05F51CH, 0BAF84675H, 0BADFC901H, 0BAC36F11H
        DC32 0BAA43DC7H, 0BA833AA8H, 0BA42C91BH, 0B9FEB4F9H, 0B9779E98H
        DC32 0A1517E1BH, 39640D4EH, 39D809DCH, 3A18268EH, 3A3CCA80H, 3A599318H
        DC32 3A6E606FH, 3A7B4C82H, 3A8052FDH, 3A7EE9D8H, 3A76BC41H, 3A68E0BFH
        DC32 3A56322DH, 3A3F9A9FH, 3A260B77H, 3A0A75EEH, 39DB886DH, 39A1A6DCH
        DC32 3951B9C2H, 38CA4D5DH, 20D44AEDH, 0B8B77A95H, 0B92C86E1H
        DC32 0B9714566H, 0B994A892H, 0B9AA35D0H, 0B9B95B42H, 0B9C2543AH
        DC32 0B9C58030H, 0B9C35BF6H, 0B9BC7ABBH, 0B9B17F1EH, 0B9A3149CH
        DC32 0B991E97EH, 0B97D52F6H, 0B953F24DH, 0B928E493H, 0B8FA849AH
        DC32 0B8A40AAEH, 0B8201C2BH, 0A04C8959H, 3815DB48H, 388FC3A4H
        DC32 38CDBF5FH, 390225C3H, 39197C3BH, 392CBA54H, 393BC2EAH, 39468194H
//  149 {0.00018931023733887328785140125031461, 0.00017906320956449718780068014467588, 0.00016472611398933082707714270487287, 0.00014637496998698635349706043129459, 0.00012411833877197118915919338277831, 0.00009810807218950060991802947230056, 0.000068552123498382381986196443257597, 0.000035728588532677305240631976390731, -0.00000000000000000017324916696511484087552600094259, -0.000038173205621765953919795333337817, -0.000078221183749832483658205595222768, -0.00011945627651464417896126635199039, -0.00016106878909305483811228998369813, -0.00020212791977308188721279558208721, -0.00024158865192967367524316812943397, -0.00027830520246743069203571030456601, -0.00031105136456802351613629142867978, -0.00033854779127134420604536280130503, -0.00035949595078080796590330736606234, -0.00037261815610527433944437758484014, -0.00037670274346248707559789425936003, -0.00037065315910034610106041363941642, -0.00035353942629353263694264031258285, -0.00032465021631997251780679669685981, -0.00028354355141542659027309447594689, -0.00023009403488550753775696011693697, -0.00016453444274808185659488002361428, -0.000087489529290607154026447600525529, 0.00000000000000000035963777897995740511225111464631, 0.000096465209123675725046663520512169, 0.0002000099384037126346806007015644, 0.00030832634330427095880125532012528, 0.00041872579380565261211039063127259, 0.00052818548571549161618071677182229, 0.00063341059142568191531186272413834, 0.00073091122268881703483850431624091, 0.00081709290947889275276427856198325, 0.00088835873579306038564512570943066, 0.00094122073501536822164037499049982, 0.00097241765403888083107303286212186, 0.00097903576607579530927116806537924, 0.00095862906516159553365480361364348, 0.00090933492714634952657631883354838, 0.00082998118639221853468090905892041, 0.00072018056538424783490082159431722, 0.00058040851344036837721612753782097, 0.00041206076421621863625777137940531, 0.00021748730910838459965891966696461, -0.00000000000000000070978852973216944366881500279641, -0.00023614836926109009193792964698133, -0.00048581491128597473466016465337702, -0.00074304800167863385360056405204432, -0.0010011988242059220634988525588938, -0.001253061844487439804862738412794, -0.0014910419952587929386805809528482, -0.0017073454117585836961601408745537, -0.0018941896530629330572953472611175, -0.0020440285137572540043182645064235, -0.0021497857988733524298163857224608, -0.0022050918304676631227778660360173, -0.0022045160008804915406643853970081, -0.0021437884064354805271901405205881, -0.0020200035027234828841069536053965, -0.0018317988303859073211804497915978, -0.0015795021747653965882296489553482, -0.0012652410444060988720105243032776, -0.00089300907659485974192381529945806, -0.00046868489126708994365125282577367, 0.0000000000000000011410107033491598856884648433206, 0.00050354638885745600738325089551495, 0.0010308264731604627282429698098554, 0.0015692762303077874719986484208789, 0.0021051389308092845718822783140922, 0.0026237561588407756936469628072928, 0.0031099012342115646238827064706811, 0.0035481485307514567736908439599119, 0.0039232709012478961599357241141206, 0.0042206562886429165731838608621729, 0.0044267336642499679338902396352751, 0.0045293977192586978505750572310262, 0.0045184212736689632547437689424896, 0.004385844178926175812582854973698, 0.0041263275920089886525388145344095, 0.0037374628972148896122185135482141, 0.0032200252472203202275258249187573, 0.002578162678915450495981120937472, 0.0018195130157256571377250020660199, 0.00095524227249454767788711118114975, -0.0000000000000000015514679617396319271238689727893, -0.0010282110944270109274129021414979, -0.0021082518799881017068642563572212, -0.0032161483998399834419168463739425, -0.0043254746913254787932245903903095, -0.0054078110570637124773774040420449, -0.0064332699618400253013805745183618, -0.0073710798093752022755453801039494, -0.0081902151172676771612168877823024, -0.0088600601069449558266910571546759, -0.0093510915026249735032548571211919, -0.0096355654271309959524316468559846, -0.0096881927236054446450630450726749, -0.0094867868430822243491773448909044, -0.0090128686317790772386526754189617, -0.0082522129325435077812356254867154, -0.0071953228759486058396799279535117, -0.005837819062040572500038582148818, -0.004180732498025788515527700894836, -0.0022306921254926252370931472057691, 0.0000000000000000018442277566840108513731233345571, 0.002493410374395803579677943773163, 0.0052261344594180516795467461577118, 0.0081695750630628120175780182421477, 0.011290335189272669019766581754993, 0.014550719183306680751255335337646, 0.017909333426899445851354641945363, 0.021321775433130414623139614604952, 0.024741398015764016343753795013072, 0.028120133317360743868684735957686, 0.031409359923844012985050255792885, 0.034560795111718854710769477378562, 0.037527393500066341669452185669797, 0.040264233035191630827309694495852, 0.042729369333261039975990769335112, 0.044884639946403681598496859805891, 0.046696401090561612257090473576682, 0.04813618075803847290439207995405, 0.049181233903094367931885244615842, 0.049814987494363631437277462055135, 0.050027365624069605742896271749487, 0.049814987494363631437277462055135, 0.049181233903094367931885244615842, 0.04813618075803847290439207995405, 0.046696401090561612257090473576682, 0.044884639946403681598496859805891, 0.042729369333261039975990769335112, 0.040264233035191630827309694495852, 0.037527393500066341669452185669797, 0.034560795111718854710769477378562, 0.031409359923844012985050255792885, 0.028120133317360743868684735957686, 0.024741398015764016343753795013072, 0.021321775433130414623139614604952, 0.017909333426899445851354641945363, 0.014550719183306680751255335337646, 0.011290335189272669019766581754993, 0.0081695750630628120175780182421477, 0.0052261344594180516795467461577118, 0.002493410374395803579677943773163, 0.0000000000000000018442277566840108513731233345571, -0.0022306921254926252370931472057691, -0.004180732498025788515527700894836, -0.005837819062040572500038582148818, -0.0071953228759486058396799279535117, -0.0082522129325435077812356254867154, -0.0090128686317790772386526754189617, -0.0094867868430822243491773448909044, -0.0096881927236054446450630450726749, -0.0096355654271309959524316468559846, -0.0093510915026249735032548571211919, -0.0088600601069449558266910571546759, -0.0081902151172676771612168877823024, -0.0073710798093752022755453801039494, -0.0064332699618400253013805745183618, -0.0054078110570637124773774040420449, -0.0043254746913254787932245903903095, -0.0032161483998399834419168463739425, -0.0021082518799881017068642563572212, -0.0010282110944270109274129021414979, -0.0000000000000000015514679617396319271238689727893, 0.00095524227249454767788711118114975, 0.0018195130157256571377250020660199, 0.002578162678915450495981120937472, 0.0032200252472203202275258249187573, 0.0037374628972148896122185135482141, 0.0041263275920089886525388145344095, 0.004385844178926175812582854973698, 0.0045184212736689632547437689424896, 0.0045293977192586978505750572310262, 0.0044267336642499679338902396352751, 0.0042206562886429165731838608621729, 0.0039232709012478961599357241141206, 0.0035481485307514567736908439599119, 0.0031099012342115646238827064706811, 0.0026237561588407756936469628072928, 0.0021051389308092845718822783140922, 0.0015692762303077874719986484208789, 0.0010308264731604627282429698098554, 0.00050354638885745600738325089551495, 0.0000000000000000011410107033491598856884648433206, -0.00046868489126708994365125282577367, -0.00089300907659485974192381529945806, -0.0012652410444060988720105243032776, -0.0015795021747653965882296489553482, -0.0018317988303859073211804497915978, -0.0020200035027234828841069536053965, -0.0021437884064354805271901405205881, -0.0022045160008804915406643853970081, -0.0022050918304676631227778660360173, -0.0021497857988733524298163857224608, -0.0020440285137572540043182645064235, -0.0018941896530629330572953472611175, -0.0017073454117585836961601408745537, -0.0014910419952587929386805809528482, -0.001253061844487439804862738412794, -0.0010011988242059220634988525588938, -0.00074304800167863385360056405204432, -0.00048581491128597473466016465337702, -0.00023614836926109009193792964698133, -0.00000000000000000070978852973216944366881500279641, 0.00021748730910838459965891966696461, 0.00041206076421621863625777137940531, 0.00058040851344036837721612753782097, 0.00072018056538424783490082159431722, 0.00082998118639221853468090905892041, 0.00090933492714634952657631883354838, 0.00095862906516159553365480361364348, 0.00097903576607579530927116806537924, 0.00097241765403888083107303286212186, 0.00094122073501536822164037499049982, 0.00088835873579306038564512570943066, 0.00081709290947889275276427856198325, 0.00073091122268881703483850431624091, 0.00063341059142568191531186272413834, 0.00052818548571549161618071677182229, 0.00041872579380565261211039063127259, 0.00030832634330427095880125532012528, 0.0002000099384037126346806007015644, 0.000096465209123675725046663520512169, 0.00000000000000000035963777897995740511225111464631, -0.000087489529290607154026447600525529, -0.00016453444274808185659488002361428, -0.00023009403488550753775696011693697, -0.00028354355141542659027309447594689, -0.00032465021631997251780679669685981, -0.00035353942629353263694264031258285, -0.00037065315910034610106041363941642, -0.00037670274346248707559789425936003, -0.00037261815610527433944437758484014, -0.00035949595078080796590330736606234, -0.00033854779127134420604536280130503, -0.00031105136456802351613629142867978, -0.00027830520246743069203571030456601, -0.00024158865192967367524316812943397, -0.00020212791977308188721279558208721, -0.00016106878909305483811228998369813, -0.00011945627651464417896126635199039, -0.000078221183749832483658205595222768, -0.000038173205621765953919795333337817, -0.00000000000000000017324916696511484087552600094259, 0.000035728588532677305240631976390731, 0.000068552123498382381986196443257597, 0.00009810807218950060991802947230056, 0.00012411833877197118915919338277831, 0.00014637496998698635349706043129459, 0.00016472611398933082707714270487287, 0.00017906320956449718780068014467588, 0.00018931023733887328785140125031461};
//  150 /* ------------------------------------------------------------------
//  151 * Global variables for FIR LPF Example
//  152 * ------------------------------------------------------------------- */
//  153 

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  154 uint32_t blockSize = BLOCK_SIZE;
blockSize:
        DATA
        DC32 256

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  155 uint32_t numBlocks = TEST_LENGTH_SAMPLES/BLOCK_SIZE;
numBlocks:
        DATA
        DC32 8
//  156 
//  157 /**/

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  158 uint16 Result_A[LENGTH+1]={0};
Result_A:
        DS8 4100

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  159 uint16 Result_B[LENGTH+1]={0};
Result_B:
        DS8 4100

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  160 uint16 Result_C[LENGTH+1]={0};
Result_C:
        DS8 4100
//  161 

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  162 float MyDb = 0.5;
MyDb:
        DATA
        DC32 3F000000H

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  163 float power = 0;
power:
        DS8 4
//  164 
//  165 
//  166 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  167 uint16 FFT_RESULT_OLD[160]={0};
FFT_RESULT_OLD:
        DS8 320

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  168 uint16 FFT_RESULT_NEW[160]={0};
FFT_RESULT_NEW:
        DS8 320

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//  169 uint16 ShowMenu = 0;
ShowMenu:
        DS8 2
//  170 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  171 void draw_fft()
//  172 {
draw_fft:
        PUSH     {R3-R5,LR}
//  173   uint16 i,j;
//  174   for(i = 0; i<160;i++ )
        MOVS     R0,#+0
        MOVS     R4,R0
??draw_fft_0:
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        CMP      R4,#+160
        BGE.N    ??draw_fft_1
//  175   {
//  176     if(FFT_RESULT_NEW[i] - FFT_RESULT_OLD[i]>0)
        LDR.W    R0,??DataTable11_1
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRH     R0,[R0, R4, LSL #+1]
        LDR.W    R1,??DataTable11_2
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRH     R1,[R1, R4, LSL #+1]
        SUBS     R0,R0,R1
        CMP      R0,#+1
        BLT.N    ??draw_fft_2
//  177     {
//  178       LCD_SetPos(i*2,i*2,FFT_RESULT_OLD[i],FFT_RESULT_NEW[i]);
        LDR.W    R0,??DataTable11_1
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRH     R3,[R0, R4, LSL #+1]
        LDR.W    R0,??DataTable11_2
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRH     R2,[R0, R4, LSL #+1]
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LSLS     R1,R4,#+1
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LSLS     R0,R4,#+1
        BL       LCD_SetPos
//  179       for (j=0;j <FFT_RESULT_NEW[i] - FFT_RESULT_OLD[i];j++)
        MOVS     R0,#+0
        MOVS     R5,R0
??draw_fft_3:
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDR.W    R0,??DataTable11_1
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRH     R0,[R0, R4, LSL #+1]
        LDR.W    R1,??DataTable11_2
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRH     R1,[R1, R4, LSL #+1]
        SUBS     R0,R0,R1
        CMP      R5,R0
        BGE.N    ??draw_fft_4
//  180         write_word(Blue + j*30);
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        MOVS     R0,#+30
        MUL      R0,R0,R5
        ADDS     R0,R0,#+31
        BL       write_word
        ADDS     R5,R5,#+1
        B.N      ??draw_fft_3
//  181     }
//  182     else if(FFT_RESULT_NEW[i] - FFT_RESULT_OLD[i]<0)
??draw_fft_2:
        LDR.W    R0,??DataTable11_1
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRH     R0,[R0, R4, LSL #+1]
        LDR.W    R1,??DataTable11_2
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRH     R1,[R1, R4, LSL #+1]
        SUBS     R0,R0,R1
        CMP      R0,#+0
        BPL.N    ??draw_fft_4
//  183     {
//  184       LCD_SetPos(i*2,i*2,FFT_RESULT_NEW[i],FFT_RESULT_OLD[i]);
        LDR.W    R0,??DataTable11_2
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRH     R3,[R0, R4, LSL #+1]
        LDR.W    R0,??DataTable11_1
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRH     R2,[R0, R4, LSL #+1]
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LSLS     R1,R4,#+1
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LSLS     R0,R4,#+1
        BL       LCD_SetPos
//  185       for (j=0;j<FFT_RESULT_OLD[i] - FFT_RESULT_NEW[i];j++)
        MOVS     R0,#+0
        MOVS     R5,R0
??draw_fft_5:
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDR.W    R0,??DataTable11_2
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRH     R0,[R0, R4, LSL #+1]
        LDR.W    R1,??DataTable11_1
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRH     R1,[R1, R4, LSL #+1]
        SUBS     R0,R0,R1
        CMP      R5,R0
        BGE.N    ??draw_fft_4
//  186         write_word(Black);
        MOVS     R0,#+0
        BL       write_word
        ADDS     R5,R5,#+1
        B.N      ??draw_fft_5
//  187     }
//  188     FFT_RESULT_OLD[i] =  FFT_RESULT_NEW[i];
??draw_fft_4:
        LDR.W    R0,??DataTable11_1
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRH     R0,[R0, R4, LSL #+1]
        LDR.W    R1,??DataTable11_2
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        STRH     R0,[R1, R4, LSL #+1]
//  189   }
        ADDS     R4,R4,#+1
        B.N      ??draw_fft_0
//  190   
//  191 }
??draw_fft_1:
        POP      {R0,R4,R5,PC}    ;; return
//  192 
//  193 

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//  194 volatile uint16 Result_flag = 0;
Result_flag:
        DS8 2

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  195 void dmaisr()
//  196 {
//  197   // PTE->PTOR = 0x01L<<24;
//  198   if(Result_flag == 0)
dmaisr:
        LDR.W    R0,??DataTable12
        LDRH     R0,[R0, #+0]
        CMP      R0,#+0
        BNE.N    ??dmaisr_0
//  199   {
//  200     LPLD_DMA_LoadDstAddr(DMA_CH15,(uint32)&Result_B);
        LDR.W    R0,??DataTable11_3
        LDR.W    R1,??DataTable11_4  ;; 0x400091f0
        STR      R0,[R1, #+0]
//  201     Result_flag = 1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12
        STRH     R0,[R1, #+0]
        B.N      ??dmaisr_1
//  202   }else if(Result_flag ==1 )
??dmaisr_0:
        LDR.W    R0,??DataTable12
        LDRH     R0,[R0, #+0]
        CMP      R0,#+1
        BNE.N    ??dmaisr_2
//  203   {
//  204     LPLD_DMA_LoadDstAddr(DMA_CH15,(uint32)&Result_C);
        LDR.W    R0,??DataTable11_5
        LDR.W    R1,??DataTable11_4  ;; 0x400091f0
        STR      R0,[R1, #+0]
//  205     Result_flag = 2;
        MOVS     R0,#+2
        LDR.W    R1,??DataTable12
        STRH     R0,[R1, #+0]
        B.N      ??dmaisr_1
//  206   }
//  207   else if(Result_flag ==2)
??dmaisr_2:
        LDR.W    R0,??DataTable12
        LDRH     R0,[R0, #+0]
        CMP      R0,#+2
        BNE.N    ??dmaisr_1
//  208   {
//  209     LPLD_DMA_LoadDstAddr(DMA_CH15,(uint32)&Result_A);
        LDR.W    R0,??DataTable11_6
        LDR.W    R1,??DataTable11_4  ;; 0x400091f0
        STR      R0,[R1, #+0]
//  210     Result_flag = 0;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable12
        STRH     R0,[R1, #+0]
//  211   }
//  212   //   Result_flag++;
//  213   //  if(Result_flag >2 )
//  214   //  {
//  215   //    Result_flag = 0;
//  216   //  }
//  217 }
??dmaisr_1:
        BX       LR               ;; return
//  218 
//  219 
//  220 

        SECTION `.bss`:DATA:REORDER:NOROOT(1)
//  221 uint16 value = 0;
value:
        DS8 2

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  222 uint16  flag = LENGTH - 2;
flag:
        DATA
        DC16 2046

        SECTION `.data`:DATA:REORDER:NOROOT(1)
//  223 volatile uint16 bufflag = 1;
bufflag:
        DATA
        DC16 1

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  224 void pitdacisr()
//  225 {
pitdacisr:
        PUSH     {R7,LR}
//  226   if(bufflag == 0)
        LDR.W    R0,??DataTable11_7
        LDRH     R0,[R0, #+0]
        CMP      R0,#+0
        BNE.N    ??pitdacisr_0
//  227   {
//  228     value = (Result_B[flag] - OFFEST)*MyDb + OFFEST;
        LDR.W    R0,??DataTable11_3
        LDR.W    R1,??DataTable11_8
        LDRH     R1,[R1, #+0]
        LDRH     R0,[R0, R1, LSL #+1]
        SUBW     R0,R0,#+2547
        VMOV     S0,R0
        VCVT.F32.S32 S0,S0
        LDR.W    R0,??DataTable11_9
        VLDR     S1,[R0, #0]
        VLDR.W   S2,??DataTable4  ;; 0x451f3000
        VMLA.F32 S2,S0,S1
        VCVT.S32.F32 S0,S2
        VMOV     R0,S0
        LDR.W    R1,??DataTable11_10
        STRH     R0,[R1, #+0]
//  229     if(value>4095) value= 4095;
        LDR.W    R0,??DataTable11_10
        LDRH     R0,[R0, #+0]
        CMP      R0,#+4096
        BLT.N    ??pitdacisr_1
        MOVW     R0,#+4095
        LDR.W    R1,??DataTable11_10
        STRH     R0,[R1, #+0]
//  230     LPLD_DAC_SetBufferDataN(DAC0,value, 1);
??pitdacisr_1:
        MOVS     R2,#+1
        LDR.W    R0,??DataTable11_10
        LDRH     R1,[R0, #+0]
        LDR.W    R0,??DataTable11_11  ;; 0x400cc000
        BL       LPLD_DAC_SetBufferDataN
//  231     LPLD_DAC_SoftwareTrigger(DAC0);
        LDR.W    R0,??DataTable11_11  ;; 0x400cc000
        BL       LPLD_DAC_SoftwareTrigger
        B.N      ??pitdacisr_2
//  232   }
//  233   else if(bufflag == 1)
??pitdacisr_0:
        LDR.W    R0,??DataTable11_7
        LDRH     R0,[R0, #+0]
        CMP      R0,#+1
        BNE.N    ??pitdacisr_3
//  234   {
//  235     value = (Result_C[flag] - OFFEST)*MyDb + OFFEST;
        LDR.W    R0,??DataTable11_5
        LDR.W    R1,??DataTable11_8
        LDRH     R1,[R1, #+0]
        LDRH     R0,[R0, R1, LSL #+1]
        SUBW     R0,R0,#+2547
        VMOV     S0,R0
        VCVT.F32.S32 S0,S0
        LDR.W    R0,??DataTable11_9
        VLDR     S1,[R0, #0]
        VLDR.W   S2,??DataTable4  ;; 0x451f3000
        VMLA.F32 S2,S0,S1
        VCVT.S32.F32 S0,S2
        VMOV     R0,S0
        LDR.W    R1,??DataTable11_10
        STRH     R0,[R1, #+0]
//  236     if(value>4095) value= 4095;
        LDR.W    R0,??DataTable11_10
        LDRH     R0,[R0, #+0]
        CMP      R0,#+4096
        BLT.N    ??pitdacisr_4
        MOVW     R0,#+4095
        LDR.W    R1,??DataTable11_10
        STRH     R0,[R1, #+0]
//  237     LPLD_DAC_SetBufferDataN(DAC0, value, 1);
??pitdacisr_4:
        MOVS     R2,#+1
        LDR.W    R0,??DataTable11_10
        LDRH     R1,[R0, #+0]
        LDR.W    R0,??DataTable11_11  ;; 0x400cc000
        BL       LPLD_DAC_SetBufferDataN
//  238     LPLD_DAC_SoftwareTrigger(DAC0);
        LDR.W    R0,??DataTable11_11  ;; 0x400cc000
        BL       LPLD_DAC_SoftwareTrigger
        B.N      ??pitdacisr_2
//  239   }
//  240   else if(bufflag == 2)
??pitdacisr_3:
        LDR.W    R0,??DataTable11_7
        LDRH     R0,[R0, #+0]
        CMP      R0,#+2
        BNE.N    ??pitdacisr_2
//  241   {
//  242     value = (Result_A[flag] - OFFEST)*MyDb + OFFEST;
        LDR.W    R0,??DataTable11_6
        LDR.W    R1,??DataTable11_8
        LDRH     R1,[R1, #+0]
        LDRH     R0,[R0, R1, LSL #+1]
        SUBW     R0,R0,#+2547
        VMOV     S0,R0
        VCVT.F32.S32 S0,S0
        LDR.W    R0,??DataTable11_9
        VLDR     S1,[R0, #0]
        VLDR.W   S2,??DataTable4  ;; 0x451f3000
        VMLA.F32 S2,S0,S1
        VCVT.S32.F32 S0,S2
        VMOV     R0,S0
        LDR.W    R1,??DataTable11_10
        STRH     R0,[R1, #+0]
//  243     if(value>4095) value= 4095;
        LDR.W    R0,??DataTable11_10
        LDRH     R0,[R0, #+0]
        CMP      R0,#+4096
        BLT.N    ??pitdacisr_5
        MOVW     R0,#+4095
        LDR.W    R1,??DataTable11_10
        STRH     R0,[R1, #+0]
//  244     LPLD_DAC_SetBufferDataN(DAC0, value, 1);
??pitdacisr_5:
        MOVS     R2,#+1
        LDR.W    R0,??DataTable11_10
        LDRH     R1,[R0, #+0]
        LDR.W    R0,??DataTable11_11  ;; 0x400cc000
        BL       LPLD_DAC_SetBufferDataN
//  245     LPLD_DAC_SoftwareTrigger(DAC0);
        LDR.W    R0,??DataTable11_11  ;; 0x400cc000
        BL       LPLD_DAC_SoftwareTrigger
//  246   }
//  247   
//  248   if(++flag==LENGTH)
??pitdacisr_2:
        LDR.W    R0,??DataTable11_8
        LDRH     R0,[R0, #+0]
        ADDS     R0,R0,#+1
        LDR.W    R1,??DataTable11_8
        STRH     R0,[R1, #+0]
        LDR.W    R0,??DataTable11_8
        LDRH     R0,[R0, #+0]
        CMP      R0,#+2048
        BNE.N    ??pitdacisr_6
//  249   {
//  250     flag = 0;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable11_8
        STRH     R0,[R1, #+0]
//  251     bufflag++;
        LDR.W    R0,??DataTable11_7
        LDRH     R0,[R0, #+0]
        ADDS     R0,R0,#+1
        LDR.W    R1,??DataTable11_7
        STRH     R0,[R1, #+0]
//  252     if(bufflag > 2)
        LDR.W    R0,??DataTable11_7
        LDRH     R0,[R0, #+0]
        CMP      R0,#+3
        BLT.N    ??pitdacisr_6
//  253       bufflag = 0;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable11_7
        STRH     R0,[R1, #+0]
//  254   }
//  255 }
??pitdacisr_6:
        POP      {R0,PC}          ;; return
//  256 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  257 void buttonisr()
//  258 {
buttonisr:
        PUSH     {R7,LR}
//  259   DisableInterrupts;
        CPSID    I
//  260   if(LPLD_GPIO_IsPinxExt(PORTA, GPIO_Pin6))
        LDR.W    R0,??DataTable12_1  ;; 0x400490a0
        LDR      R0,[R0, #+0]
        LSLS     R0,R0,#+25
        BPL.N    ??buttonisr_0
//  261   {
//  262     
//  263     if(PTA6_I==0)
        LDR.W    R0,??DataTable12_2  ;; 0x43fe0218
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE.N    ??buttonisr_0
//  264     {
//  265       for(uint32_t i = 0;i<0xffff;i++)
        MOVS     R0,#+0
??buttonisr_1:
        MOVW     R1,#+65535
        CMP      R0,R1
        BCS.N    ??buttonisr_2
        ADDS     R0,R0,#+1
        B.N      ??buttonisr_1
//  266         ;
//  267       //   starfir = 1;
//  268       MyDb+=0.01;
??buttonisr_2:
        LDR.W    R0,??DataTable11_9
        LDR      R0,[R0, #+0]
        BL       __aeabi_f2d
        LDR.W    R2,??DataTable12_3  ;; 0x47ae147b
        LDR.W    R3,??DataTable12_4  ;; 0x3f847ae1
        BL       __aeabi_dadd
        BL       __aeabi_d2f
        LDR.W    R1,??DataTable11_9
        STR      R0,[R1, #+0]
//  269       if(MyDb>1.3)
        LDR.W    R0,??DataTable11_9
        VLDR     S0,[R0, #0]
        VLDR.W   S1,??DataTable7  ;; 0x3fa66667
        VCMP.F32 S0,S1
        FMSTAT   
        BLT.N    ??buttonisr_0
//  270         MyDb = 1.3;
        LDR.W    R0,??DataTable11_9
        LDR.W    R1,??DataTable12_5  ;; 0x3fa66666
        STR      R1,[R0, #+0]
//  271     }
//  272   }
//  273   
//  274   
//  275   if(LPLD_GPIO_IsPinxExt(PORTA, GPIO_Pin8))
??buttonisr_0:
        LDR.W    R0,??DataTable12_1  ;; 0x400490a0
        LDR      R0,[R0, #+0]
        LSLS     R0,R0,#+23
        BPL.N    ??buttonisr_3
//  276   {
//  277     
//  278     if(PTA7_I==0)
        LDR.W    R0,??DataTable12_6  ;; 0x43fe021c
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE.N    ??buttonisr_3
//  279     {
//  280       for(uint32_t i = 0;i<0xffff;i++)
        MOVS     R0,#+0
??buttonisr_4:
        MOVW     R1,#+65535
        CMP      R0,R1
        BCS.N    ??buttonisr_5
        ADDS     R0,R0,#+1
        B.N      ??buttonisr_4
//  281         ;
//  282       //     starfir = 0;
//  283       MyDb-=0.01;
??buttonisr_5:
        LDR.W    R0,??DataTable11_9
        LDR      R0,[R0, #+0]
        BL       __aeabi_f2d
        LDR.W    R2,??DataTable12_3  ;; 0x47ae147b
        LDR.W    R3,??DataTable12_8  ;; 0xbf847ae1
        BL       __aeabi_dadd
        BL       __aeabi_d2f
        LDR.W    R1,??DataTable11_9
        STR      R0,[R1, #+0]
//  284       if(MyDb<0)
        LDR.W    R0,??DataTable11_9
        VLDR     S0,[R0, #0]
        VCMP.F32 S0,#0.0
        FMSTAT   
        BPL.N    ??buttonisr_3
//  285         MyDb = 0;
        LDR.W    R0,??DataTable11_9
        MOVS     R1,#+0
        STR      R1,[R0, #+0]
//  286     }
//  287   }
//  288   
//  289   if(LPLD_GPIO_IsPinxExt(PORTA, GPIO_Pin10))
??buttonisr_3:
        LDR.W    R0,??DataTable12_1  ;; 0x400490a0
        LDR      R0,[R0, #+0]
        LSLS     R0,R0,#+21
        BPL.N    ??buttonisr_6
//  290   {
//  291     
//  292     if(PTA10_I==0)
        LDR.W    R0,??DataTable12_10  ;; 0x43fe0228
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE.N    ??buttonisr_6
//  293     {
//  294       for(uint32_t i = 0;i<0xffff;i++)
        MOVS     R0,#+0
??buttonisr_7:
        MOVW     R1,#+65535
        CMP      R0,R1
        BCS.N    ??buttonisr_8
        ADDS     R0,R0,#+1
        B.N      ??buttonisr_7
//  295         ;
//  296       starfir++;
??buttonisr_8:
        LDR.W    R0,??DataTable12_11
        LDRB     R0,[R0, #+0]
        ADDS     R0,R0,#+1
        LDR.W    R1,??DataTable12_11
        STRB     R0,[R1, #+0]
//  297       if(starfir > 2)
        LDR.W    R0,??DataTable12_11
        LDRB     R0,[R0, #+0]
        CMP      R0,#+3
        BLT.N    ??buttonisr_9
//  298         starfir = 0;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable12_11
        STRB     R0,[R1, #+0]
//  299       if(starfir == 1)
??buttonisr_9:
        LDR.W    R0,??DataTable12_11
        LDRB     R0,[R0, #+0]
        CMP      R0,#+1
        BNE.N    ??buttonisr_10
//  300       {
//  301         MyDb = 0.4;
        LDR.N    R0,??DataTable11_9
        LDR.W    R1,??DataTable12_12  ;; 0x3ecccccd
        STR      R1,[R0, #+0]
//  302         ShowMenu = 1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_13
        STRH     R0,[R1, #+0]
        B.N      ??buttonisr_6
//  303       }
//  304       else if(starfir == 0)
??buttonisr_10:
        LDR.W    R0,??DataTable12_11
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BNE.N    ??buttonisr_11
//  305       {
//  306         MyDb = 0.5;
        LDR.N    R0,??DataTable11_9
        MOVS     R1,#+1056964608
        STR      R1,[R0, #+0]
//  307         ShowMenu = 1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_13
        STRH     R0,[R1, #+0]
        B.N      ??buttonisr_6
//  308       }
//  309       else if(starfir == 2)
??buttonisr_11:
        LDR.W    R0,??DataTable12_11
        LDRB     R0,[R0, #+0]
        CMP      R0,#+2
        BNE.N    ??buttonisr_6
//  310       {
//  311         MyDb = 0.5;
        LDR.N    R0,??DataTable11_9
        MOVS     R1,#+1056964608
        STR      R1,[R0, #+0]
//  312         ShowMenu = 1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_13
        STRH     R0,[R1, #+0]
//  313       }
//  314       
//  315     }
//  316   }
//  317   EnableInterrupts;
??buttonisr_6:
        CPSIE    I
//  318 }
        POP      {R0,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable4:
        DC32     0x451f3000
//  319 

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//  320 uint8_t myflag2 = 0;
myflag2:
        DS8 1

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  321 void buttonsetisr()
//  322 {
//  323   DisableInterrupts;
buttonsetisr:
        CPSID    I
//  324   if(LPLD_GPIO_IsPinxExt(PORTD, GPIO_Pin7))
        LDR.W    R0,??DataTable12_14  ;; 0x4004c0a0
        LDR      R0,[R0, #+0]
        LSLS     R0,R0,#+24
        BPL.N    ??buttonsetisr_0
//  325   {
//  326     
//  327     if(PTD7_I==0)
        LDR.W    R0,??DataTable12_15  ;; 0x43fe1a1c
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE.N    ??buttonsetisr_0
//  328     {
//  329       for(uint32_t i = 0;i<0xffff;i++)
        MOVS     R0,#+0
??buttonsetisr_1:
        MOVW     R1,#+65535
        CMP      R0,R1
        BCS.N    ??buttonsetisr_2
        ADDS     R0,R0,#+1
        B.N      ??buttonsetisr_1
//  330         ;
//  331       if(myflag2 == 0)
??buttonsetisr_2:
        LDR.W    R0,??DataTable12_16
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BNE.N    ??buttonsetisr_3
//  332         MyDb=1.3;
        LDR.N    R0,??DataTable11_9
        LDR.W    R1,??DataTable12_5  ;; 0x3fa66666
        STR      R1,[R0, #+0]
        B.N      ??buttonsetisr_4
//  333       else 
//  334         MyDb = 0.5;
??buttonsetisr_3:
        LDR.N    R0,??DataTable11_9
        MOVS     R1,#+1056964608
        STR      R1,[R0, #+0]
//  335       myflag2 = !myflag2;
??buttonsetisr_4:
        LDR.W    R0,??DataTable12_16
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BNE.N    ??buttonsetisr_5
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_16
        STRB     R0,[R1, #+0]
        B.N      ??buttonsetisr_0
??buttonsetisr_5:
        MOVS     R0,#+0
        LDR.W    R1,??DataTable12_16
        STRB     R0,[R1, #+0]
//  336     }
//  337   }
//  338   EnableInterrupts;
??buttonsetisr_0:
        CPSIE    I
//  339 }
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  340 void init_ADC()
//  341 {
init_ADC:
        PUSH     {R7,LR}
//  342   adc0_init_struct.ADC_Adcx = ADC0;     //选择ADC0
        LDR.W    R0,??DataTable12_17  ;; 0x4003b000
        LDR.W    R1,??DataTable12_18
        STR      R0,[R1, #+0]
//  343   adc0_init_struct.ADC_BitMode = SE_12BIT;      //配置转换精度
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_18
        STRB     R0,[R1, #+5]
//  344   adc0_init_struct.ADC_CalEnable = TRUE;        //使能初始化自动校准
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_18
        STRB     R0,[R1, #+11]
//  345   adc0_init_struct.ADC_HwTrgCfg = HW_TRGA;      //配置为硬件触发转换
        MOVS     R0,#+64
        LDR.W    R1,??DataTable12_18
        STRB     R0,[R1, #+12]
//  346   adc0_init_struct.ADC_DmaEnable = TRUE;        //使能DMA
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_18
        STRB     R0,[R1, #+13]
//  347   adc0_init_struct.ADC_SampleTimeCfg = SAMTIME_LONG;
        MOVS     R0,#+16
        LDR.W    R1,??DataTable12_18
        STRB     R0,[R1, #+6]
//  348   //初始化ADC0
//  349   LPLD_ADC_Init(adc0_init_struct);   
        LDR.W    R1,??DataTable12_18
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_ADC_Init
//  350   //使能ADC0的AD8输入引脚复用功能
//  351   LPLD_ADC_Chn_Enable(ADC0, AD8);
        MOVS     R1,#+8
        LDR.W    R0,??DataTable12_17  ;; 0x4003b000
        BL       LPLD_ADC_Chn_Enable
//  352   //使能ADC0的AD8输入通道、禁用转换完成中断
//  353   LPLD_ADC_EnableConversion(ADC0, AD8, 0, FALSE);               //使能PTB0通道
        MOVS     R3,#+0
        MOVS     R2,#+0
        MOVS     R1,#+8
        LDR.W    R0,??DataTable12_17  ;; 0x4003b000
        BL       LPLD_ADC_EnableConversion
//  354   
//  355   adc0_init_struct.ADC_Adcx = ADC1;
        LDR.W    R0,??DataTable12_19  ;; 0x400bb000
        LDR.W    R1,??DataTable12_18
        STR      R0,[R1, #+0]
//  356   LPLD_ADC_Init(adc0_init_struct);   
        LDR.W    R1,??DataTable12_18
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_ADC_Init
//  357   //使能ADC0的AD8输入引脚复用功能
//  358   LPLD_ADC_Chn_Enable(ADC0, AD8);
        MOVS     R1,#+8
        LDR.W    R0,??DataTable12_17  ;; 0x4003b000
        BL       LPLD_ADC_Chn_Enable
//  359   //使能ADC0的AD8输入通道、禁用转换完成中断
//  360   LPLD_ADC_EnableConversion(ADC1, AD8, 0, FALSE);               //使能PTB0通道
        MOVS     R3,#+0
        MOVS     R2,#+0
        MOVS     R1,#+8
        LDR.W    R0,??DataTable12_19  ;; 0x400bb000
        BL       LPLD_ADC_EnableConversion
//  361   
//  362 }
        POP      {R0,PC}          ;; return
//  363 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  364 void init_DMA()
//  365 {
init_DMA:
        PUSH     {LR}
        SUB      SP,SP,#+28
//  366   /*ADC_DMA*/
//  367   dma_init_struct.DMA_CHx = DMA_CH15;   //使用Ch15通道
        MOVS     R0,#+15
        LDR.W    R1,??DataTable12_20
        STRB     R0,[R1, #+0]
//  368   dma_init_struct.DMA_Req = ADC0_DMAREQ;        //DMA请求源为ADC0
        MOVS     R0,#+40
        LDR.W    R1,??DataTable12_20
        STRB     R0,[R1, #+1]
//  369   dma_init_struct.DMA_PeriodicTriggerEnable = TRUE;      //周期触发
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_20
        STRB     R0,[R1, #+2]
//  370   dma_init_struct.DMA_MajorLoopCnt = LENGTH;        //主循环计数滤波数组长度次
        MOV      R0,#+2048
        LDR.W    R1,??DataTable12_20
        STRH     R0,[R1, #+4]
//  371   dma_init_struct.DMA_MinorByteCnt = 2; //次循环传输字节计数（由于ADC采样为12位，因此传输2字节）
        MOVS     R0,#+2
        LDR.W    R1,??DataTable12_20
        STR      R0,[R1, #+8]
//  372   dma_init_struct.DMA_SourceAddr = (uint32)&(ADC0->R[0]);       //源地址：ADC0结果寄存器A地址
        LDR.W    R0,??DataTable12_21  ;; 0x4003b010
        LDR.W    R1,??DataTable12_20
        STR      R0,[R1, #+12]
//  373   dma_init_struct.DMA_SourceDataSize = DMA_SRC_16BIT;   //源地址传输数据宽度16位
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_20
        STRB     R0,[R1, #+16]
//  374   dma_init_struct.DMA_DestAddr = (uint32)&Result_A;       //目的地址
        LDR.N    R0,??DataTable11_6
        LDR.W    R1,??DataTable12_20
        STR      R0,[R1, #+24]
//  375   dma_init_struct.DMA_DestDataSize = DMA_DST_16BIT;     //目的地址传输数据宽度16位
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_20
        STRB     R0,[R1, #+28]
//  376   dma_init_struct.DMA_AutoDisableReq = FALSE;   //禁用自动禁用请求，即不受主循环计数计数限制
        MOVS     R0,#+0
        LDR.W    R1,??DataTable12_20
        STRB     R0,[R1, #+36]
//  377   dma_init_struct.DMA_MajorCompleteIntEnable = TRUE;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_20
        STRB     R0,[R1, #+37]
//  378   dma_init_struct.DMA_Isr = dmaisr;
        LDR.W    R0,??DataTable12_22
        LDR.W    R1,??DataTable12_20
        STR      R0,[R1, #+40]
//  379   dma_init_struct.DMA_DestAddrOffset = 2;       //目的地址偏移：每次读入增加2
        MOVS     R0,#+2
        LDR.W    R1,??DataTable12_20
        STRH     R0,[R1, #+30]
//  380   //dma_init_struct.DMA_LastDestAddrAdj = -(2*LENGTH);
//  381   //初始化DMA
//  382   LPLD_DMA_Init(dma_init_struct);
        LDR.W    R1,??DataTable12_20
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+44
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_DMA_Init
//  383   //使能DMA请求
//  384   LPLD_DMA_EnableReq(DMA_CH15); 
        LDR.W    R0,??DataTable12_23  ;; 0x4000800c
        LDR      R0,[R0, #+0]
        ORRS     R0,R0,#0x8000
        LDR.W    R1,??DataTable12_23  ;; 0x4000800c
        STR      R0,[R1, #+0]
//  385   LPLD_DMA_EnableIrq(dma_init_struct);
        LDR.W    R1,??DataTable12_20
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+44
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_DMA_EnableIrq
//  386   
//  387   //  /*DAC_DMA*/
//  388   //  dma2_init_struct.DMA_CHx = DMA_CH16;   //使用Ch15通道
//  389   //  dma2_init_struct.DMA_Req = ADC1_DMAREQ;        //DMA请求源为DAC0
//  390   //  dma2_init_struct.DMA_PeriodicTriggerEnable = TRUE;      //周期触发
//  391   //  dma2_init_struct.DMA_MajorLoopCnt = LENGTH;        //主循环计数滤波数组长度次
//  392   //  dma2_init_struct.DMA_MinorByteCnt = 2; //次循环传输字节计数（由于ADC采样为12位，因此传输2字节）
//  393   //  dma2_init_struct.DMA_SourceAddr = (uint32)&Result_B;       //源地址：
//  394   //  dma2_init_struct.DMA_SourceDataSize = DMA_SRC_16BIT;   //源地址传输数据宽度16位
//  395   //  dma2_init_struct.DMA_SourceAddrOffset = 2;
//  396   //  dma2_init_struct.DMA_LastSourceAddrAdj = -(2*LENGTH);
//  397   //  dma2_init_struct.DMA_DestAddr = (uint32)&(DAC0->DAT[0].DATL);       //目的地址
//  398   //  dma2_init_struct.DMA_DestDataSize = DMA_DST_16BIT;     //目的地址传输数据宽度16位
//  399   //  //dma2_init_struct.DMA_DestAddrOffset = 2; 
//  400   //  dma2_init_struct.DMA_MajorCompleteIntEnable = TRUE;
//  401   //  dma2_init_struct.DMA_Isr = dma2isr;
//  402   //  dma2_init_struct.DMA_AutoDisableReq = FALSE;   //禁用自动禁用请求，即不受主循环计数计数限制
//  403   // // dma2_init_struct.DMA_LastDestAddrAdj = -(2*LENGTH);
//  404   //  LPLD_DMA_Init(dma2_init_struct);
//  405   //  //使能DMA请求
//  406   //  LPLD_DMA_EnableReq(DMA_CH16); 
//  407   //  LPLD_DMA_EnableIrq(dma2_init_struct);
//  408   
//  409 }
        ADD      SP,SP,#+28
        POP      {PC}             ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable7:
        DC32     0x3fa66667
//  410 
//  411 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  412 void init_DAC()
//  413 {
init_DAC:
        PUSH     {R5-R7,LR}
//  414   dac0_init_struct.DAC_Dacx = DAC0;
        LDR.N    R0,??DataTable11_11  ;; 0x400cc000
        LDR.W    R1,??DataTable12_24
        STR      R0,[R1, #+0]
//  415   
//  416   LPLD_DAC_Init(dac0_init_struct);
        LDR.W    R1,??DataTable12_24
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+28
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_DAC_Init
//  417   
//  418 }
        POP      {R0-R2,PC}       ;; return
//  419 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  420 void init_PDB()
//  421 {
init_PDB:
        PUSH     {LR}
        SUB      SP,SP,#+28
//  422   pdb_init_struct.PDB_CounterPeriodMs = 1000;
        MOV      R0,#+1000
        LDR.W    R1,??DataTable12_25
        STR      R0,[R1, #+4]
//  423   pdb_init_struct.PDB_ContinuousModeEnable = FALSE;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable12_25
        STRB     R0,[R1, #+14]
//  424   pdb_init_struct.PDB_LoadModeSel = LOADMODE_0; //加载模式设置
        MOVS     R0,#+0
        LDR.W    R1,??DataTable12_25
        STRB     R0,[R1, #+12]
//  425   pdb_init_struct.PDB_TriggerInputSourceSel =  TRIGGER_PIT0;
        MOVS     R0,#+4
        LDR.W    R1,??DataTable12_25
        STRB     R0,[R1, #+13]
//  426   
//  427   LPLD_PDB_Init(pdb_init_struct);
        LDR.W    R1,??DataTable12_25
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+40
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_PDB_Init
//  428   LPLD_PDB_AdcTriggerCfg(ADC0, PRETRIG_EN_A, 0);
        MOVS     R2,#+0
        MOVS     R1,#+1
        LDR.W    R0,??DataTable12_17  ;; 0x4003b000
        BL       LPLD_PDB_AdcTriggerCfg
//  429   // LPLD_PDB_AdcTriggerCfg(ADC1, PRETRIG_EN_A, 0);
//  430   LPLD_PDB_EnableIrq();
        MOVS     R0,#+72
        BL       NVIC_EnableIRQ
//  431   //LPLD_PDB_SoftwareTrigger();
//  432   
//  433 }
        ADD      SP,SP,#+28
        POP      {PC}             ;; return
//  434 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  435 void init_PIT()
//  436 {
init_PIT:
        PUSH     {R7,LR}
//  437   pit0_init_struct.PIT_Pitx = PIT0;     //选择PIT0
        MOVS     R0,#+0
        LDR.W    R1,??DataTable12_26
        STRB     R0,[R1, #+0]
//  438   pit0_init_struct.PIT_PeriodUs = MY_SAMPLE_TIME;  //PIT0计数周期500ms
        MOVS     R0,#+25
        LDR.W    R1,??DataTable12_26
        STR      R0,[R1, #+4]
//  439   pit0_init_struct.PIT_Isr = pitdacisr;
        LDR.W    R0,??DataTable12_27
        LDR.W    R1,??DataTable12_26
        STR      R0,[R1, #+16]
//  440   //初始化PIT0
//  441   LPLD_PIT_Init(pit0_init_struct); 
        LDR.W    R1,??DataTable12_26
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_PIT_Init
//  442   LPLD_PIT_EnableIrq(pit0_init_struct);
        LDR.W    R1,??DataTable12_26
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_PIT_EnableIrq
//  443 }
        POP      {R0,PC}          ;; return
//  444 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  445 void init_gpio_PE24()
//  446 {
init_gpio_PE24:
        PUSH     {R7,LR}
//  447   
//  448   gpio_init_struct.GPIO_PTx = PTD;
        LDR.W    R0,??DataTable12_28  ;; 0x400ff0c0
        LDR.W    R1,??DataTable12_29
        STR      R0,[R1, #+0]
//  449   gpio_init_struct.GPIO_Pins = GPIO_Pin7;
        MOVS     R0,#+128
        LDR.W    R1,??DataTable12_29
        STR      R0,[R1, #+4]
//  450   gpio_init_struct.GPIO_Dir = DIR_INPUT;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable12_29
        STRB     R0,[R1, #+12]
//  451   gpio_init_struct.GPIO_Isr = buttonsetisr;
        LDR.W    R0,??DataTable12_30
        LDR.W    R1,??DataTable12_29
        STR      R0,[R1, #+16]
//  452   gpio_init_struct.GPIO_PinControl = INPUT_PULL_UP|IRQC_FA;     //内部上拉|下降沿中断
        LDR.W    R0,??DataTable12_31  ;; 0xa0003
        LDR.W    R1,??DataTable12_29
        STR      R0,[R1, #+8]
//  453   LPLD_GPIO_Init(gpio_init_struct);
        LDR.W    R1,??DataTable12_29
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//  454   LPLD_GPIO_EnableIrq(gpio_init_struct);
        LDR.W    R1,??DataTable12_29
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_EnableIrq
//  455   
//  456   gpio_init_struct.GPIO_PTx = PTA;
        LDR.W    R0,??DataTable12_32  ;; 0x400ff000
        LDR.W    R1,??DataTable12_29
        STR      R0,[R1, #+0]
//  457   gpio_init_struct.GPIO_Pins = GPIO_Pin6|GPIO_Pin8|GPIO_Pin10;
        MOV      R0,#+1344
        LDR.W    R1,??DataTable12_29
        STR      R0,[R1, #+4]
//  458   gpio_init_struct.GPIO_Dir = DIR_INPUT;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable12_29
        STRB     R0,[R1, #+12]
//  459   gpio_init_struct.GPIO_Isr = buttonisr;
        LDR.W    R0,??DataTable12_33
        LDR.W    R1,??DataTable12_29
        STR      R0,[R1, #+16]
//  460   gpio_init_struct.GPIO_PinControl = INPUT_PULL_UP|IRQC_FA;     //内部上拉|下降沿中断
        LDR.W    R0,??DataTable12_31  ;; 0xa0003
        LDR.W    R1,??DataTable12_29
        STR      R0,[R1, #+8]
//  461   LPLD_GPIO_Init(gpio_init_struct);
        LDR.W    R1,??DataTable12_29
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//  462   LPLD_GPIO_EnableIrq(gpio_init_struct);
        LDR.W    R1,??DataTable12_29
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_EnableIrq
//  463   
//  464   
//  465   
//  466 }
        POP      {R0,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11:
        DC32     0xe000e100

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_1:
        DC32     FFT_RESULT_NEW

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_2:
        DC32     FFT_RESULT_OLD

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_3:
        DC32     Result_B

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_4:
        DC32     0x400091f0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_5:
        DC32     Result_C

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_6:
        DC32     Result_A

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_7:
        DC32     bufflag

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_8:
        DC32     flag

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_9:
        DC32     MyDb

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_10:
        DC32     value

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_11:
        DC32     0x400cc000
//  467 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  468 void main (void)
//  469 {
main:
        PUSH     {R4-R11,LR}
        SUB      SP,SP,#+12
//  470   /*开硬件浮点*/
//  471   SCB->CPACR |=((3UL << 10*2)|(3UL << 11*2));     /* set CP10 and CP11 Full Access */
        LDR.W    R0,??DataTable12_34  ;; 0xe000ed88
        LDR      R0,[R0, #+0]
        ORRS     R0,R0,#0xF00000
        LDR.W    R1,??DataTable12_34  ;; 0xe000ed88
        STR      R0,[R1, #+0]
//  472   
//  473   
//  474   
//  475   uint16 flag; 
//  476   uint16 i,j;
//  477   
//  478   DisableInterrupts;
        CPSID    I
//  479   LCD_init(1);
        MOVS     R0,#+1
        BL       LCD_init
//  480   Disp_single_colour(Black);
        MOVS     R0,#+0
        BL       Disp_single_colour
//  481   LCD_PutString(10, 50,"Frequency: ", White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        LDR.W    R2,??DataTable12_35
        MOVS     R1,#+50
        MOVS     R0,#+10
        BL       LCD_PutString
//  482   LCD_PutString(145, 50,"  KHz", White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        LDR.W    R2,??DataTable12_36
        MOVS     R1,#+50
        MOVS     R0,#+145
        BL       LCD_PutString
//  483   LCD_PutString(10, 80,"Power: ", White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        LDR.W    R2,??DataTable12_37
        MOVS     R1,#+80
        MOVS     R0,#+10
        BL       LCD_PutString
//  484   LCD_PutString(145, 80,"   W", White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        LDR.W    R2,??DataTable12_38
        MOVS     R1,#+80
        MOVS     R0,#+145
        BL       LCD_PutString
//  485   LCD_PutString(10, 110,"Amplify: ", White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        LDR.W    R2,??DataTable12_39
        MOVS     R1,#+110
        MOVS     R0,#+10
        BL       LCD_PutString
//  486   LCD_PutString(165, 110,"Restrain: ", White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        LDR.W    R2,??DataTable12_40
        MOVS     R1,#+110
        MOVS     R0,#+165
        BL       LCD_PutString
//  487   init_ADC();
        BL       init_ADC
//  488   init_DAC();
        BL       init_DAC
//  489   init_DMA();
        BL       init_DMA
//  490   init_PDB();
        BL       init_PDB
//  491   init_PIT();
        BL       init_PIT
//  492   init_gpio_PE24();
        BL       init_gpio_PE24
//  493   EnableInterrupts;
        CPSIE    I
//  494   LPLD_LPTMR_DelayMs(100);
        MOVS     R0,#+100
        BL       LPLD_LPTMR_DelayMs
//  495   
//  496   
//  497   
//  498   flag = Result_flag;
        LDR.W    R0,??DataTable12
        LDRH     R0,[R0, #+0]
        MOV      R11,R0
//  499   uint16 ShowAFlag = 0;
        MOVS     R4,#+0
//  500   uint16 ShowBFlag = 0;
        MOVS     R7,#+0
//  501   uint16 ShowCFlag = 0;
        MOVS     R10,#+0
//  502   
//  503   arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
        LDR.W    R0,??DataTable12_41
        LDR      R0,[R0, #+0]
        STR      R0,[SP, #+0]
        LDR.W    R3,??DataTable12_42
        LDR.W    R2,??DataTable12_43
        MOVW     R1,#+257
        LDR.W    R0,??DataTable12_44
        BL       arm_fir_init_f32
//  504   while(1)
//  505   {
//  506     if( flag==Result_flag && Result_flag == 0)
??main_0:
        LDR.W    R0,??DataTable12
        LDRH     R0,[R0, #+0]
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        CMP      R11,R0
        BNE.W    ??main_1
        LDR.W    R0,??DataTable12
        LDRH     R0,[R0, #+0]
        CMP      R0,#+0
        BNE.W    ??main_1
//  507     {
//  508       if(++ShowAFlag<10)
        ADDS     R4,R4,#+1
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        CMP      R4,#+10
        BGE.N    ??main_2
//  509       {
//  510         for(j = 0;j<LENGTH;j++)
        MOVS     R0,#+0
        MOVS     R6,R0
??main_3:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        CMP      R6,#+2048
        BGE.N    ??main_4
//  511           testInput_x[j*2] = Result_A[j];
        LDR.W    R0,??DataTable12_45
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        LDRH     R0,[R0, R6, LSL #+1]
        VMOV     S0,R0
        VCVT.F32.U32 S0,S0
        LDR.W    R0,??DataTable12_46
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        ADDS     R0,R0,R6, LSL #+3
        VSTR     S0,[R0, #0]
        ADDS     R6,R6,#+1
        B.N      ??main_3
//  512         for(j = 0;j<LENGTH;j++)
??main_4:
        MOVS     R0,#+0
        MOVS     R6,R0
??main_5:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        CMP      R6,#+2048
        BGE.N    ??main_6
//  513           testInput_x[j*2+1] = 0;
        LDR.W    R0,??DataTable12_46
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        LSLS     R1,R6,#+1
        ADDS     R0,R0,R1, LSL #+2
        MOVS     R1,#+0
        STR      R1,[R0, #+4]
        ADDS     R6,R6,#+1
        B.N      ??main_5
//  514         
//  515         arm_cfft_f32(&arm_cfft_sR_f32_len2048, testInput_x, ifftFlag, doBitReverse);
??main_6:
        LDR.W    R0,??DataTable12_47
        LDR      R3,[R0, #+0]
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        LDR.W    R0,??DataTable12_48
        LDR      R2,[R0, #+0]
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        LDR.W    R1,??DataTable12_46
        LDR.W    R0,??DataTable12_49
        BL       arm_cfft_f32
//  516         
//  517         /* Process the data through the Complex Magnitude Module for
//  518         calculating the magnitude at each bin */
//  519         arm_cmplx_mag_f32(testInput_x, testOutput, fftSize);
        LDR.W    R0,??DataTable12_50
        LDR      R2,[R0, #+0]
        LDR.W    R1,??DataTable12_51
        LDR.W    R0,??DataTable12_46
        BL       arm_cmplx_mag_f32
//  520         
//  521         testOutput[0] = 0;
        LDR.W    R0,??DataTable12_51
        MOVS     R1,#+0
        STR      R1,[R0, #+0]
//  522         /* Calculates maxValue and returns corresponding BIN value */
//  523         arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
        LDR.W    R3,??DataTable12_52
        LDR.W    R2,??DataTable12_53
        LDR.W    R0,??DataTable12_50
        LDR      R1,[R0, #+0]
        LDR.W    R0,??DataTable12_51
        BL       arm_max_f32
        B.N      ??main_7
//  524       }
//  525       else
//  526       {
//  527         ShowAFlag = 0;
??main_2:
        MOVS     R0,#+0
        MOVS     R4,R0
//  528         if(starfir !=2 )
        LDR.W    R0,??DataTable12_11
        LDRB     R0,[R0, #+0]
        CMP      R0,#+2
        BEQ.N    ??main_7
//  529             LCD_Put_Float(100, 50,"",testIndex*40.0/2048, White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        MOV      R8,R3
        LDR.W    R0,??DataTable12_52
        LDR      R0,[R0, #+0]
        BL       __aeabi_ui2d
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_54  ;; 0x40440000
        BL       __aeabi_dmul
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_55  ;; 0x40a00000
        BL       __aeabi_ddiv
        BL       __aeabi_d2f
        VMOV     S0,R0
        MOV      R3,R8
        ADR.N    R2,??main_8      ;; ""
        MOVS     R1,#+50
        MOVS     R0,#+100
        BL       LCD_Put_Float
//  530       }
//  531       if(starfir == 1)
??main_7:
        LDR.W    R0,??DataTable12_11
        LDRB     R0,[R0, #+0]
        CMP      R0,#+1
        BNE.N    ??main_9
//  532       {
//  533         PTE24_O = 1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_56  ;; 0x43fe2060
        STR      R0,[R1, #+0]
//  534         for(j = 0;j<LENGTH;j++)
        MOVS     R0,#+0
        MOVS     R6,R0
??main_10:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        CMP      R6,#+2048
        BGE.N    ??main_11
//  535           firInput[j] = Result_A[j];
        LDR.W    R0,??DataTable12_45
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        LDRH     R0,[R0, R6, LSL #+1]
        VMOV     S0,R0
        VCVT.F32.U32 S0,S0
        LDR.W    R0,??DataTable12_57
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        ADDS     R0,R0,R6, LSL #+2
        VSTR     S0,[R0, #0]
        ADDS     R6,R6,#+1
        B.N      ??main_10
//  536         inputF32 = &firInput[0];
??main_11:
        LDR.W    R0,??DataTable12_57
        LDR.W    R1,??DataTable12_58
        STR      R0,[R1, #+0]
//  537         outputF32 = &firOutput[0];
        LDR.W    R0,??DataTable12_59
        LDR.W    R1,??DataTable12_60
        STR      R0,[R1, #+0]
//  538         for(i=0; i < numBlocks; i++)
        MOVS     R0,#+0
        MOVS     R5,R0
??main_12:
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDR.W    R0,??DataTable12_61
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BCS.N    ??main_13
//  539           arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
        LDR.W    R0,??DataTable12_41
        LDR      R3,[R0, #+0]
        LDR.W    R0,??DataTable12_60
        LDR      R0,[R0, #+0]
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDR.W    R1,??DataTable12_41
        LDR      R1,[R1, #+0]
        MUL      R1,R1,R5
        ADDS     R2,R0,R1, LSL #+2
        LDR.W    R0,??DataTable12_58
        LDR      R0,[R0, #+0]
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDR.W    R1,??DataTable12_41
        LDR      R1,[R1, #+0]
        MUL      R1,R1,R5
        ADDS     R1,R0,R1, LSL #+2
        LDR.W    R0,??DataTable12_44
        BL       arm_fir_f32
        ADDS     R5,R5,#+1
        B.N      ??main_12
//  540         for(j = 0;j<LENGTH;j++)
??main_13:
        MOVS     R0,#+0
        MOVS     R6,R0
??main_14:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        CMP      R6,#+2048
        BGE.N    ??main_15
//  541           Result_A[j] = firOutput[j];
        LDR.W    R0,??DataTable12_59
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        ADDS     R0,R0,R6, LSL #+2
        VLDR     S0,[R0, #0]
        VCVT.S32.F32 S0,S0
        VMOV     R0,S0
        LDR.W    R1,??DataTable12_45
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        STRH     R0,[R1, R6, LSL #+1]
        ADDS     R6,R6,#+1
        B.N      ??main_14
//  542         PTE24_O = 0;
??main_15:
        MOVS     R0,#+0
        LDR.W    R1,??DataTable12_56  ;; 0x43fe2060
        STR      R0,[R1, #+0]
//  543       }
//  544       flag = 1;
??main_9:
        MOVS     R0,#+1
        MOV      R11,R0
        B.N      ??main_0
//  545     }
//  546     else  if(flag==Result_flag && Result_flag == 1)
??main_1:
        LDR.W    R0,??DataTable12
        LDRH     R0,[R0, #+0]
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        CMP      R11,R0
        BNE.W    ??main_16
        LDR.W    R0,??DataTable12
        LDRH     R0,[R0, #+0]
        CMP      R0,#+1
        BNE.W    ??main_16
//  547     {
//  548       if(starfir !=2 )
        LDR.W    R0,??DataTable12_11
        LDRB     R0,[R0, #+0]
        CMP      R0,#+2
        BEQ.N    ??main_17
//  549       {
//  550         if(++ShowBFlag<10)
        ADDS     R7,R7,#+1
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        CMP      R7,#+10
        BGE.N    ??main_18
//  551         {
//  552           power = 0;
        LDR.W    R0,??DataTable12_62
        MOVS     R1,#+0
        STR      R1,[R0, #+0]
//  553           for(i=0;i<LENGTH;i++)
        MOVS     R0,#+0
        MOVS     R5,R0
??main_19:
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R5,#+2048
        BGE.N    ??main_20
//  554             power+=((Result_B[i] - OFFEST)/1241.0)*((Result_B[i] - OFFEST)/1241.0)*90*MyDb/8.0;
        LDR.W    R0,??DataTable12_62
        LDR      R0,[R0, #+0]
        BL       __aeabi_f2d
        STRD     R0,R1,[SP, #+0]
        LDR.W    R0,??DataTable12_63
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDRH     R0,[R0, R5, LSL #+1]
        SUBW     R0,R0,#+2547
        BL       __aeabi_i2d
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_64  ;; 0x40936400
        BL       __aeabi_ddiv
        MOV      R8,R0
        MOV      R9,R1
        LDR.W    R0,??DataTable12_63
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDRH     R0,[R0, R5, LSL #+1]
        SUBW     R0,R0,#+2547
        BL       __aeabi_i2d
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_64  ;; 0x40936400
        BL       __aeabi_ddiv
        MOV      R2,R8
        MOV      R3,R9
        BL       __aeabi_dmul
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_65  ;; 0x40568000
        BL       __aeabi_dmul
        MOV      R8,R0
        MOV      R9,R1
        LDR.W    R0,??DataTable12_66
        LDR      R0,[R0, #+0]
        BL       __aeabi_f2d
        MOV      R2,R8
        MOV      R3,R9
        BL       __aeabi_dmul
        MOVS     R2,#+0
        LDR.W    R3,??DataTable12_67  ;; 0x40200000
        BL       __aeabi_ddiv
        LDRD     R2,R3,[SP, #+0]
        BL       __aeabi_dadd
        BL       __aeabi_d2f
        LDR.W    R1,??DataTable12_62
        STR      R0,[R1, #+0]
        ADDS     R5,R5,#+1
        B.N      ??main_19
//  555           power = power/LENGTH;
??main_20:
        LDR.W    R0,??DataTable12_62
        VLDR     S0,[R0, #0]
        VLDR.W   S1,??main_21     ;; 0x45000000
        VDIV.F32 S0,S0,S1
        LDR.W    R0,??DataTable12_62
        VSTR     S0,[R0, #0]
        B.N      ??main_22
//  556         }
//  557         else
//  558         {
//  559           ShowBFlag = 0;
??main_18:
        MOVS     R0,#+0
        MOVS     R7,R0
//  560           LCD_Put_Float(100, 80,"",power, White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        LDR.W    R0,??DataTable12_62
        VLDR     S0,[R0, #0]
        ADR.N    R2,??main_8      ;; ""
        MOVS     R1,#+80
        MOVS     R0,#+100
        BL       LCD_Put_Float
        B.N      ??main_22
//  561         }
//  562       }
//  563       else
//  564       {
//  565         for(i = 0;i<160;i++)
??main_17:
        MOVS     R0,#+0
        MOVS     R5,R0
??main_23:
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R5,#+160
        BGE.N    ??main_22
//  566         {
//  567           FFT_RESULT_NEW[i] = testOutput[i*6]/FFT_VALUE;
        LDR.W    R0,??DataTable12_51
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        MOVS     R1,#+24
        MLA      R0,R1,R5,R0
        VLDR     S0,[R0, #0]
        VLDR.W   S1,??main_21+0x4  ;; 0x44268000
        VDIV.F32 S0,S0,S1
        VCVT.S32.F32 S0,S0
        VMOV     R0,S0
        LDR.W    R1,??DataTable12_68
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        STRH     R0,[R1, R5, LSL #+1]
//  568           if(FFT_RESULT_NEW[i]>239) FFT_RESULT_NEW[i] = 239;
        LDR.W    R0,??DataTable12_68
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDRH     R0,[R0, R5, LSL #+1]
        CMP      R0,#+240
        BLT.N    ??main_24
        MOVS     R0,#+239
        LDR.W    R1,??DataTable12_68
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        STRH     R0,[R1, R5, LSL #+1]
//  569         }
??main_24:
        ADDS     R5,R5,#+1
        B.N      ??main_23
//  570       }
//  571       
//  572       //     {
//  573       //     for(j = 0;j<LENGTH;j++)
//  574       //       testInput_x[j*2] = Result_B[j];
//  575       //     for(j = 0;j<LENGTH;j++)
//  576       //       testInput_x[j*2+1] = 0;
//  577       //     
//  578       //     arm_cfft_f32(&arm_cfft_sR_f32_len2048, testInput_x, ifftFlag, doBitReverse);
//  579       //
//  580       //  /* Process the data through the Complex Magnitude Module for
//  581       //  calculating the magnitude at each bin */
//  582       //    arm_cmplx_mag_f32(testInput_x, testOutput, fftSize);
//  583       //
//  584       //    testOutput[0] = 0;
//  585       //  /* Calculates maxValue and returns corresponding BIN value */
//  586       //    arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
//  587       //     }
//  588       if(starfir == 1)
??main_22:
        LDR.N    R0,??DataTable12_11
        LDRB     R0,[R0, #+0]
        CMP      R0,#+1
        BNE.N    ??main_25
//  589       {
//  590         PTE24_O = 1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_56  ;; 0x43fe2060
        STR      R0,[R1, #+0]
//  591         for(j = 0;j<LENGTH;j++)
        MOVS     R0,#+0
        MOVS     R6,R0
??main_26:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        CMP      R6,#+2048
        BGE.N    ??main_27
//  592           firInput[j] = Result_B[j];
        LDR.W    R0,??DataTable12_63
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        LDRH     R0,[R0, R6, LSL #+1]
        VMOV     S0,R0
        VCVT.F32.U32 S0,S0
        LDR.W    R0,??DataTable12_57
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        ADDS     R0,R0,R6, LSL #+2
        VSTR     S0,[R0, #0]
        ADDS     R6,R6,#+1
        B.N      ??main_26
//  593         inputF32 = &firInput[0];
??main_27:
        LDR.N    R0,??DataTable12_57
        LDR.N    R1,??DataTable12_58
        STR      R0,[R1, #+0]
//  594         outputF32 = &firOutput[0];
        LDR.N    R0,??DataTable12_59
        LDR.N    R1,??DataTable12_60
        STR      R0,[R1, #+0]
//  595         for(i=0; i < numBlocks; i++)
        MOVS     R0,#+0
        MOVS     R5,R0
??main_28:
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDR.N    R0,??DataTable12_61
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BCS.N    ??main_29
//  596           arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
        LDR.N    R0,??DataTable12_41
        LDR      R3,[R0, #+0]
        LDR.N    R0,??DataTable12_60
        LDR      R0,[R0, #+0]
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDR.N    R1,??DataTable12_41
        LDR      R1,[R1, #+0]
        MUL      R1,R1,R5
        ADDS     R2,R0,R1, LSL #+2
        LDR.N    R0,??DataTable12_58
        LDR      R0,[R0, #+0]
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDR.N    R1,??DataTable12_41
        LDR      R1,[R1, #+0]
        MUL      R1,R1,R5
        ADDS     R1,R0,R1, LSL #+2
        LDR.N    R0,??DataTable12_44
        BL       arm_fir_f32
        ADDS     R5,R5,#+1
        B.N      ??main_28
//  597         for(j = 0;j<LENGTH;j++)
??main_29:
        MOVS     R0,#+0
        MOVS     R6,R0
??main_30:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        CMP      R6,#+2048
        BGE.N    ??main_31
//  598           Result_B[j] = firOutput[j];
        LDR.N    R0,??DataTable12_59
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        ADDS     R0,R0,R6, LSL #+2
        VLDR     S0,[R0, #0]
        VCVT.S32.F32 S0,S0
        VMOV     R0,S0
        LDR.N    R1,??DataTable12_63
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        STRH     R0,[R1, R6, LSL #+1]
        ADDS     R6,R6,#+1
        B.N      ??main_30
//  599         PTE24_O = 0;
??main_31:
        MOVS     R0,#+0
        LDR.N    R1,??DataTable12_56  ;; 0x43fe2060
        STR      R0,[R1, #+0]
//  600       }
//  601       flag = 2;
??main_25:
        MOVS     R0,#+2
        MOV      R11,R0
        B.N      ??main_0
//  602     }
//  603     else if(flag==Result_flag && Result_flag == 2)
??main_16:
        LDR.N    R0,??DataTable12
        LDRH     R0,[R0, #+0]
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        CMP      R11,R0
        BNE.W    ??main_0
        LDR.N    R0,??DataTable12
        LDRH     R0,[R0, #+0]
        CMP      R0,#+2
        BNE.W    ??main_0
//  604     {
//  605       //   
//  606       //    {
//  607       //     for(j = 0;j<LENGTH;j++)
//  608       //       testInput_x[j*2] = Result_C[j];
//  609       //     for(j = 0;j<LENGTH;j++)
//  610       //       testInput_x[j*2+1] = 0;
//  611       //     
//  612       //     arm_cfft_f32(&arm_cfft_sR_f32_len2048, testInput_x, ifftFlag, doBitReverse);
//  613       //
//  614       //  /* Process the data through the Complex Magnitude Module for
//  615       //  calculating the magnitude at each bin */
//  616       //    arm_cmplx_mag_f32(testInput_x, testOutput, fftSize);
//  617       //
//  618       //    testOutput[0] = 0;
//  619       //  /* Calculates maxValue and returns corresponding BIN value */
//  620       //    arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
//  621       //     }
//  622       if(starfir == 1)
        LDR.N    R0,??DataTable12_11
        LDRB     R0,[R0, #+0]
        CMP      R0,#+1
        BNE.N    ??main_32
//  623       {
//  624         //    PTE24_O = 1;
//  625         for(j = 0;j<LENGTH;j++)
        MOVS     R0,#+0
        MOVS     R6,R0
??main_33:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        CMP      R6,#+2048
        BGE.N    ??main_34
//  626           firInput[j] = Result_C[j];
        LDR.N    R0,??DataTable12_69
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        LDRH     R0,[R0, R6, LSL #+1]
        VMOV     S0,R0
        VCVT.F32.U32 S0,S0
        LDR.N    R0,??DataTable12_57
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        ADDS     R0,R0,R6, LSL #+2
        VSTR     S0,[R0, #0]
        ADDS     R6,R6,#+1
        B.N      ??main_33
        Nop      
        DATA
??main_8:
        DC8      "",0x0,0x0,0x0
        THUMB
//  627         inputF32 = &firInput[0];
??main_34:
        LDR.N    R0,??DataTable12_57
        LDR.N    R1,??DataTable12_58
        STR      R0,[R1, #+0]
//  628         outputF32 = &firOutput[0];
        LDR.N    R0,??DataTable12_59
        LDR.N    R1,??DataTable12_60
        STR      R0,[R1, #+0]
//  629         for(i=0; i < numBlocks; i++)
        MOVS     R0,#+0
        MOVS     R5,R0
??main_35:
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDR.N    R0,??DataTable12_61
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BCS.N    ??main_36
//  630           arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
        LDR.N    R0,??DataTable12_41
        LDR      R3,[R0, #+0]
        LDR.N    R0,??DataTable12_60
        LDR      R0,[R0, #+0]
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDR.N    R1,??DataTable12_41
        LDR      R1,[R1, #+0]
        MUL      R1,R1,R5
        ADDS     R2,R0,R1, LSL #+2
        LDR.N    R0,??DataTable12_58
        LDR      R0,[R0, #+0]
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LDR.N    R1,??DataTable12_41
        LDR      R1,[R1, #+0]
        MUL      R1,R1,R5
        ADDS     R1,R0,R1, LSL #+2
        LDR.N    R0,??DataTable12_44
        BL       arm_fir_f32
        ADDS     R5,R5,#+1
        B.N      ??main_35
//  631         for(j = 0;j<LENGTH;j++)
??main_36:
        MOVS     R0,#+0
        MOVS     R6,R0
??main_37:
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        CMP      R6,#+2048
        BGE.N    ??main_32
//  632           Result_C[j] = firOutput[j];
        LDR.N    R0,??DataTable12_59
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        ADDS     R0,R0,R6, LSL #+2
        VLDR     S0,[R0, #0]
        VCVT.S32.F32 S0,S0
        VMOV     R0,S0
        LDR.N    R1,??DataTable12_69
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        STRH     R0,[R1, R6, LSL #+1]
        ADDS     R6,R6,#+1
        B.N      ??main_37
//  633         //   PTE24_O = 0;
//  634       }
//  635       if(starfir != 2)
??main_32:
        LDR.N    R0,??DataTable12_11
        LDRB     R0,[R0, #+0]
        CMP      R0,#+2
        BEQ.N    ??main_38
//  636       {
//  637         if(++ShowCFlag<5)
        ADDS     R10,R10,#+1
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        CMP      R10,#+5
        BLT.N    ??main_39
//  638         {
//  639         }
//  640         else
//  641         {
//  642           if(ShowMenu)
        LDR.N    R0,??DataTable12_13
        LDRH     R0,[R0, #+0]
        CMP      R0,#+0
        BEQ.N    ??main_40
//  643           {
//  644             Disp_single_colour(Black);
        MOVS     R0,#+0
        BL       Disp_single_colour
//  645             LCD_PutString(10, 50,"Frequency: ", White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        LDR.N    R2,??DataTable12_35
        MOVS     R1,#+50
        MOVS     R0,#+10
        BL       LCD_PutString
//  646             LCD_PutString(145, 50,"  KHz", White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        LDR.N    R2,??DataTable12_36
        MOVS     R1,#+50
        MOVS     R0,#+145
        BL       LCD_PutString
//  647             LCD_PutString(10, 80,"Power: ", White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        LDR.N    R2,??DataTable12_37
        MOVS     R1,#+80
        MOVS     R0,#+10
        BL       LCD_PutString
//  648             LCD_PutString(145, 80,"   W", White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        LDR.N    R2,??DataTable12_38
        MOVS     R1,#+80
        MOVS     R0,#+145
        BL       LCD_PutString
//  649             LCD_PutString(10, 110,"Amplify: ", White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        LDR.N    R2,??DataTable12_39
        MOVS     R1,#+110
        MOVS     R0,#+10
        BL       LCD_PutString
//  650             LCD_PutString(165, 110,"Restrain: ", White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        LDR.N    R2,??DataTable12_40
        MOVS     R1,#+110
        MOVS     R0,#+165
        BL       LCD_PutString
//  651             ShowMenu = 0;
        MOVS     R0,#+0
        LDR.N    R1,??DataTable12_13
        STRH     R0,[R1, #+0]
//  652           }
//  653           LCD_Put_Float(100, 110,"",MyDb/0.5, White, Black);
??main_40:
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        MOV      R8,R3
        LDR.N    R0,??DataTable12_66
        LDR      R0,[R0, #+0]
        BL       __aeabi_f2d
        MOVS     R2,#+0
        LDR.N    R3,??DataTable12_70  ;; 0x3fe00000
        BL       __aeabi_ddiv
        BL       __aeabi_d2f
        VMOV     S0,R0
        MOV      R3,R8
        ADR.N    R2,??DataTable12_7  ;; ""
        MOVS     R1,#+110
        MOVS     R0,#+100
        BL       LCD_Put_Float
//  654           if(starfir)
        LDR.N    R0,??DataTable12_11
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BEQ.N    ??main_41
//  655             LCD_PutString(260, 110,"On  ", White, Black);
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        LDR.N    R2,??DataTable12_71
        MOVS     R1,#+110
        MOV      R0,#+260
        BL       LCD_PutString
        B.N      ??main_39
//  656           else
//  657             LCD_PutString(260, 110,"Off", White, Black);
??main_41:
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        MOVW     R3,#+65535
        ADR.N    R2,??DataTable12_9  ;; "Off"
        MOVS     R1,#+110
        MOV      R0,#+260
        BL       LCD_PutString
        B.N      ??main_39
//  658         }
//  659       }
//  660       else
//  661       {
//  662         if(ShowMenu)
??main_38:
        LDR.N    R0,??DataTable12_13
        LDRH     R0,[R0, #+0]
        CMP      R0,#+0
        BEQ.N    ??main_42
//  663         {        
//  664           Disp_single_colour(Black);
        MOVS     R0,#+0
        BL       Disp_single_colour
//  665           ShowMenu = 0;
        MOVS     R0,#+0
        LDR.N    R1,??DataTable12_13
        STRH     R0,[R1, #+0]
//  666         }
//  667         draw_fft();
??main_42:
        BL       draw_fft
//  668       }
//  669       flag = 0;
??main_39:
        MOVS     R0,#+0
        MOV      R11,R0
        B.N      ??main_0
        Nop      
        DATA
??main_21:
        DC32     0x45000000
        DC32     0x44268000
//  670     }
//  671     
//  672   } 
//  673 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12:
        DC32     Result_flag

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_1:
        DC32     0x400490a0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_2:
        DC32     0x43fe0218

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_3:
        DC32     0x47ae147b

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_4:
        DC32     0x3f847ae1

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_5:
        DC32     0x3fa66666

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_6:
        DC32     0x43fe021c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_7:
        DC8      "",0x0,0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_8:
        DC32     0xbf847ae1

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_9:
        DC8      "Off"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_10:
        DC32     0x43fe0228

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_11:
        DC32     starfir

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_12:
        DC32     0x3ecccccd

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_13:
        DC32     ShowMenu

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_14:
        DC32     0x4004c0a0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_15:
        DC32     0x43fe1a1c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_16:
        DC32     myflag2

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_17:
        DC32     0x4003b000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_18:
        DC32     adc0_init_struct

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_19:
        DC32     0x400bb000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_20:
        DC32     dma_init_struct

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_21:
        DC32     0x4003b010

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_22:
        DC32     dmaisr

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_23:
        DC32     0x4000800c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_24:
        DC32     dac0_init_struct

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_25:
        DC32     pdb_init_struct

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_26:
        DC32     pit0_init_struct

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_27:
        DC32     pitdacisr

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_28:
        DC32     0x400ff0c0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_29:
        DC32     gpio_init_struct

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_30:
        DC32     buttonsetisr

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_31:
        DC32     0xa0003

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_32:
        DC32     0x400ff000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_33:
        DC32     buttonisr

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_34:
        DC32     0xe000ed88

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_35:
        DC32     ?_0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_36:
        DC32     ?_1

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_37:
        DC32     ?_2

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_38:
        DC32     ?_3

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_39:
        DC32     ?_4

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_40:
        DC32     ?_5

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_41:
        DC32     blockSize

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_42:
        DC32     firStateF32

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_43:
        DC32     firCoeffs32

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_44:
        DC32     S

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_45:
        DC32     Result_A

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_46:
        DC32     testInput_x

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_47:
        DC32     doBitReverse

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_48:
        DC32     ifftFlag

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_49:
        DC32     arm_cfft_sR_f32_len2048

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_50:
        DC32     fftSize

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_51:
        DC32     testOutput

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_52:
        DC32     testIndex

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_53:
        DC32     maxValue

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_54:
        DC32     0x40440000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_55:
        DC32     0x40a00000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_56:
        DC32     0x43fe2060

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_57:
        DC32     firInput

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_58:
        DC32     inputF32

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_59:
        DC32     firOutput

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_60:
        DC32     outputF32

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_61:
        DC32     numBlocks

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_62:
        DC32     power

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_63:
        DC32     Result_B

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_64:
        DC32     0x40936400

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_65:
        DC32     0x40568000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_66:
        DC32     MyDb

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_67:
        DC32     0x40200000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_68:
        DC32     FFT_RESULT_NEW

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_69:
        DC32     Result_C

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_70:
        DC32     0x3fe00000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_71:
        DC32     ?_7

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
//  674 
//  675 
//  676 
// 
// 56 208 bytes in section .bss
//     24 bytes in section .data
//  1 101 bytes in section .rodata
//  4 008 bytes in section .text
// 
//  4 008 bytes of CODE  memory
//  1 101 bytes of CONST memory
// 56 232 bytes of DATA  memory
//
//Errors: none
//Warnings: 7
