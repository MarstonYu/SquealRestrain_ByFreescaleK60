///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM       30/May/2015  13:28:03
// Copyright 1999-2014 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\lib\MyDrive\LCD.c
//    Command line =  
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\lib\MyDrive\LCD.c
//        -D LPLD_K60 -D USE_K60F12 -D ARM_MATH_CM4 -lCN
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\FLASH\List\
//        -lB
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\FLASH\List\
//        -o
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\FLASH\Obj\
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --no_clustering --no_scheduling --debug --endian=little
//        --cpu=Cortex-M4F -e --char_is_signed --fpu=VFPv4_sp --dlib_config
//        D:\tools\IAR\iar7_3\arm\INC\c\DLib_Config_Normal.h -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\app\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\CPU\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\common\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\LPLD\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\LPLD\HW\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\LPLD\DEV\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\LPLD\FUNC\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\uCOS-II\Ports\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\uCOS-II\Source\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\FatFs\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\FatFs\option\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\USB\common\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\USB\driver\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\USB\descriptor\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\USB\class\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\dsp\
//        -I
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\MyDrive\
//        -On -I D:\tools\IAR\iar7_3\arm\CMSIS\Include\ -D ARM_MATH_CM4
//    List file    =  
//        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\FLASH\List\LCD.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN LPLD_GPIO_Init
        EXTERN LPLD_LPTMR_DelayMs
        EXTERN __aeabi_memcpy4

        PUBLIC Disp_single_colour
        PUBLIC Draw_single_line
        PUBLIC Font8x16
        PUBLIC LCD_PORT_init
        PUBLIC LCD_PutChar
        PUBLIC LCD_PutChar8x16
        PUBLIC LCD_PutString
        PUBLIC LCD_Put_Float
        PUBLIC LCD_Put_Int
        PUBLIC LCD_Put_Unsigned_Int
        PUBLIC LCD_Reset
        PUBLIC LCD_SetPos
        PUBLIC LCD_init
        PUBLIC Print_child
        PUBLIC PutGB1616
        PUBLIC PutGB3232
        PUBLIC RamAdressSet
        PUBLIC codeGB_16
        PUBLIC codeGB_32
        PUBLIC write_command
        PUBLIC write_data
        PUBLIC write_word

// D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\lib\MyDrive\LCD.c
//    1 #include "common.h"
//    2 #include "LCD.h"
//    3 #include "8X16.h"

        SECTION `.data`:DATA:REORDER:NOROOT(2)
// __absolute unsigned char Font8x16[2048]
Font8x16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 16, 16, 16, 16, 16, 16, 0, 16, 16, 0, 0, 0, 0, 0, 0, 0, 36
        DC8 36, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 36, 126, 36, 36
        DC8 36, 126, 36, 36, 0, 0, 0, 0, 0, 0, 0, 16, 124, 144, 144, 124, 18
        DC8 18, 124, 16, 0, 0, 0, 0, 0, 0, 0, 0, 98, 100, 8, 16, 32, 76, 140, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 24, 36, 32, 80, 138, 132, 74, 48, 0, 0, 0
        DC8 0, 0, 0, 0, 16, 16, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 16
        DC8 32, 32, 32, 32, 32, 32, 32, 16, 8, 0, 0, 0, 0, 0, 32, 16, 8, 8, 8
        DC8 8, 8, 8, 8, 16, 32, 0, 0, 0, 0, 0, 0, 0, 0, 16, 84, 56, 56, 84, 16
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 124, 16, 16, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 8, 16, 32, 64, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 56, 68, 68, 76, 84, 100, 68, 68, 56, 0, 0, 0, 0, 0, 0, 0, 16, 48
        DC8 16, 16, 16, 16, 16, 16, 56, 0, 0, 0, 0, 0, 0, 0, 56, 68, 4, 4, 8
        DC8 16, 32, 64, 124, 0, 0, 0, 0, 0, 0, 0, 124, 4, 8, 16, 56, 4, 4, 4
        DC8 120, 0, 0, 0, 0, 0, 0, 0, 8, 24, 40, 72, 72, 124, 8, 8, 8, 0, 0, 0
        DC8 0, 0, 0, 0, 124, 64, 64, 64, 120, 4, 4, 4, 120, 0, 0, 0, 0, 0, 0, 0
        DC8 60, 64, 64, 64, 120, 68, 68, 68, 56, 0, 0, 0, 0, 0, 0, 0, 124, 4, 4
        DC8 8, 16, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 56, 68, 68, 68, 56, 68
        DC8 68, 68, 56, 0, 0, 0, 0, 0, 0, 0, 56, 68, 68, 68, 60, 4, 4, 4, 56, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 16, 0, 16, 16, 32, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 16
        DC8 32, 16, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 124, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 32, 16, 8, 4, 8, 16, 32, 0, 0, 0, 0, 0, 0
        DC8 56, 68, 68, 4, 8, 16, 16, 0, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56
        DC8 68, 92, 84, 92, 64, 60, 0, 0, 0, 0, 0, 0, 24, 36, 66, 66, 66, 126
        DC8 66, 66, 66, 66, 0, 0, 0, 0, 0, 0, 124, 66, 66, 66, 124, 66, 66, 66
        DC8 66, 124, 0, 0, 0, 0, 0, 0, 60, 66, 64, 64, 64, 64, 64, 64, 66, 60
        DC8 0, 0, 0, 0, 0, 0, 124, 66, 66, 66, 66, 66, 66, 66, 66, 124, 0, 0, 0
        DC8 0, 0, 0, 126, 64, 64, 64, 120, 64, 64, 64, 64, 126, 0, 0, 0, 0, 0
        DC8 0, 126, 64, 64, 64, 120, 64, 64, 64, 64, 64, 0, 0, 0, 0, 0, 0, 60
        DC8 66, 64, 64, 94, 66, 66, 66, 66, 60, 0, 0, 0, 0, 0, 0, 66, 66, 66
        DC8 66, 126, 66, 66, 66, 66, 66, 0, 0, 0, 0, 0, 0, 56, 16, 16, 16, 16
        DC8 16, 16, 16, 16, 56, 0, 0, 0, 0, 0, 0, 28, 8, 8, 8, 8, 8, 8, 8, 72
        DC8 48, 0, 0, 0, 0, 0, 0, 66, 68, 72, 80, 96, 96, 80, 72, 68, 66, 0, 0
        DC8 0, 0, 0, 0, 64, 64, 64, 64, 64, 64, 64, 64, 64, 126, 0, 0, 0, 0, 0
        DC8 0, 130, 130, 198, 198, 170, 170, 146, 146, 130, 130, 0, 0, 0, 0, 0
        DC8 0, 66, 98, 98, 82, 82, 74, 74, 70, 70, 66, 0, 0, 0, 0, 0, 0, 60, 66
        DC8 66, 66, 66, 66, 66, 66, 66, 60, 0, 0, 0, 0, 0, 0, 124, 66, 66, 66
        DC8 66, 124, 64, 64, 64, 64, 0, 0, 0, 0, 0, 0, 60, 66, 66, 66, 66, 66
        DC8 66, 66, 74, 60, 14, 0, 0, 0, 0, 0, 124, 66, 66, 66, 66, 124, 80, 72
        DC8 68, 66, 0, 0, 0, 0, 0, 0, 60, 66, 64, 64, 60, 2, 2, 2, 66, 60, 0, 0
        DC8 0, 0, 0, 0, 124, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0
        DC8 0, 66, 66, 66, 66, 66, 66, 66, 66, 66, 60, 0, 0, 0, 0, 0, 0, 68, 68
        DC8 68, 68, 40, 40, 40, 16, 16, 16, 0, 0, 0, 0, 0, 0, 130, 130, 130
        DC8 130, 84, 84, 84, 40, 40, 40, 0, 0, 0, 0, 0, 0, 66, 66, 36, 24, 24
        DC8 24, 36, 36, 66, 66, 0, 0, 0, 0, 0, 0, 68, 68, 68, 68, 40, 40, 16
        DC8 16, 16, 16, 0, 0, 0, 0, 0, 0, 126, 2, 2, 4, 8, 16, 32, 64, 64, 126
        DC8 0, 0, 0, 0, 0, 0, 56, 32, 32, 32, 32, 32, 32, 32, 32, 56, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 64, 32, 16, 8, 4, 2, 0, 0, 0, 0, 0, 0, 28, 4
        DC8 4, 4, 4, 4, 4, 4, 4, 28, 0, 0, 0, 0, 0, 0, 0, 0, 16, 40, 68, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0
        DC8 0, 0, 0, 0, 16, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 120, 4, 60, 68, 68, 68, 58, 0, 0, 0, 0, 0, 0, 64, 64, 64, 92, 98
        DC8 66, 66, 66, 98, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 66, 64, 64, 64
        DC8 66, 60, 0, 0, 0, 0, 0, 0, 2, 2, 2, 58, 70, 66, 66, 66, 70, 58, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 60, 66, 66, 126, 64, 66, 60, 0, 0, 0, 0, 0, 0
        DC8 14, 16, 16, 16, 60, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 62, 66, 66, 66, 66, 62, 2, 2, 60, 0, 0, 0, 0, 64, 64, 64, 92, 98
        DC8 66, 66, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8
        DC8 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 68, 56, 0, 0, 0, 0
        DC8 64, 64, 64, 66, 68, 72, 80, 104, 68, 66, 0, 0, 0, 0, 0, 0, 16, 16
        DC8 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 146
        DC8 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 66, 66, 66
        DC8 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 66, 66, 66, 66, 66, 60
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 98, 66, 66, 66, 98, 92, 64, 64, 0, 0
        DC8 0, 0, 0, 0, 0, 58, 70, 66, 66, 66, 70, 58, 2, 2, 0, 0, 0, 0, 0, 0
        DC8 0, 92, 98, 64, 64, 64, 64, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 66
        DC8 64, 60, 2, 66, 60, 0, 0, 0, 0, 0, 0, 0, 32, 32, 120, 32, 32, 32, 32
        DC8 34, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 66, 66, 66, 66, 66, 62, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 66, 66, 66, 66, 66, 36, 24, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 130, 130, 130, 146, 146, 170, 68, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 66, 66, 36, 24, 36, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 66
        DC8 66, 66, 66, 62, 2, 2, 60, 0, 0, 0, 0, 0, 0, 0, 126, 2, 4, 24, 32
        DC8 64, 126, 0, 0, 0, 0, 0, 0, 8, 16, 16, 16, 32, 64, 32, 16, 16, 16, 8
        DC8 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
        DC8 0, 0, 0, 32, 16, 16, 16, 8, 4, 8, 16, 16, 16, 32, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 34, 84, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0
//    4 #include "GB1616.h"	//16*16汉字字模

        SECTION `.data`:DATA:REORDER:NOROOT(2)
// __absolute struct typFNT_GB16 codeGB_16[25]
codeGB_16:
        DATA
        DC8 "\310\253"
        DC8 1, 0, 1, 0, 2, 128, 4, 64, 8, 32, 16, 16, 47, 232, 193, 6, 1, 0, 1
        DC8 0, 31, 240, 1, 0, 1, 0, 1, 0, 127, 252, 0, 0
        DC8 "\266\257"
        DC8 0, 64, 0, 64, 124, 64, 0, 64, 1, 252, 0, 68, 254, 68, 32, 68, 32
        DC8 68, 32, 132, 72, 132, 68, 132, 253, 4, 69, 4, 2, 40, 4, 16
        DC8 "\265\347"
        DC8 1, 0, 1, 0, 1, 0, 63, 248, 33, 8, 33, 8, 63, 248, 33, 8, 33, 8, 33
        DC8 8, 63, 248, 33, 8, 1, 2, 1, 2, 0, 254, 0, 0
        DC8 "\327\323"
        DC8 0, 0, 63, 240, 0, 32, 0, 64, 0, 128, 1, 0, 1, 0, 1, 4, 255, 254, 1
        DC8 0, 1, 0, 1, 0, 1, 0, 1, 0, 5, 0, 2, 0
        DC8 "\277\306"
        DC8 6, 8, 120, 136, 8, 72, 8, 72, 254, 8, 24, 136, 28, 72, 42, 72, 40
        DC8 14, 72, 120, 139, 136, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
        DC8 "\274\274"
        DC8 16, 32, 16, 32, 16, 32, 253, 254, 16, 32, 20, 32, 25, 252, 49, 8
        DC8 208, 136, 16, 144, 16, 96, 16, 96, 16, 144, 17, 14, 86, 4, 32, 0
        DC8 "\323\320"
        DC8 1, 0, 1, 0, 127, 254, 2, 0, 4, 0, 15, 240, 24, 16, 40, 16, 79, 240
        DC8 136, 16, 8, 16, 15, 240, 8, 16, 8, 144, 8, 112, 8, 32
        DC8 "\317\336"
        DC8 0, 0, 251, 248, 146, 8, 147, 248, 162, 8, 162, 8, 147, 248, 138
        DC8 128, 138, 72, 170, 80, 146, 32, 130, 32, 130, 16, 130, 142, 131, 4
        DC8 130, 0
        DC8 "\271\253"
        DC8 0, 0, 4, 64, 6, 64, 4, 64, 8, 32, 8, 16, 16, 24, 34, 14, 67, 4, 2
        DC8 0, 4, 32, 8, 16, 17, 248, 63, 24, 16, 16, 0, 0
        DC8 "\313\276"
        DC8 0, 0, 63, 252, 0, 4, 0, 4, 127, 228, 0, 4, 0, 4, 63, 196, 32, 68
        DC8 32, 68, 63, 196, 32, 68, 32, 4, 0, 20, 0, 8, 0, 0
        DC8 "\327\250"
        DC8 1, 0, 1, 0, 63, 248, 2, 0, 2, 0, 255, 254, 4, 0, 8, 32, 15, 240, 0
        DC8 32, 0, 64, 2, 128, 1, 0, 0, 128, 0, 64, 0, 0
        DC8 "\322\265"
        DC8 4, 64, 4, 64, 4, 64, 4, 68, 68, 70, 36, 76, 36, 72, 20, 80, 28, 80
        DC8 20, 96, 4, 64, 4, 64, 4, 68, 255, 254, 0, 0, 0, 0
        DC8 "\277\252"
        DC8 0, 0, 127, 254, 4, 32, 4, 32, 4, 32, 4, 32, 255, 254, 4, 32, 4, 32
        DC8 4, 32, 8, 32, 8, 32, 16, 32, 32, 32, 64, 32, 0, 0
        DC8 "\267\242"
        DC8 2, 0, 34, 64, 34, 48, 34, 16, 127, 254, 36, 0, 4, 0, 7, 224, 12, 32
        DC8 10, 32, 10, 32, 17, 64, 32, 128, 65, 96, 134, 28, 24, 8
        DC8 "\260\345"
        DC8 16, 28, 17, 224, 17, 0, 17, 0, 253, 0, 17, 252, 57, 132, 53, 72, 85
        DC8 72, 82, 48, 146, 16, 18, 48, 20, 72, 16, 142, 17, 4, 0, 0
        DC8 "\271\244"
        DC8 0, 0, 63, 252, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0
        DC8 1, 0, 1, 0, 255, 254, 0, 0, 0, 0
        DC8 "\277\330"
        DC8 16, 0, 16, 32, 16, 16, 253, 254, 17, 4, 16, 80, 20, 140, 25, 4, 48
        DC8 0, 209, 252, 16, 32, 16, 32, 16, 32, 16, 32, 83, 254, 32, 0
        DC8 "\311\350"
        DC8 64, 0, 33, 240, 49, 16, 33, 16, 1, 16, 1, 16, 226, 14, 37, 248, 33
        DC8 8, 33, 8, 32, 144, 32, 144, 40, 96, 48, 144, 35, 14, 12, 4
        DC8 "\261\270"
        DC8 8, 0, 15, 240, 8, 32, 20, 32, 34, 64, 65, 128, 2, 64, 12, 48, 48
        DC8 30, 223, 244, 17, 16, 31, 240, 17, 16, 17, 16, 31, 240, 16, 16
        DC8 "\274\274"
        DC8 16, 32, 16, 32, 16, 32, 253, 254, 16, 32, 20, 32, 25, 252, 49, 8
        DC8 208, 136, 16, 144, 16, 96, 16, 96, 16, 144, 17, 14, 86, 4, 32, 0
        DC8 "\312\365"
        DC8 1, 0, 1, 32, 1, 16, 1, 0, 255, 254, 1, 0, 3, 128, 5, 64, 5, 32, 9
        DC8 16, 17, 24, 33, 14, 193, 4, 1, 0, 1, 0, 0, 0
        DC8 "\326\247"
        DC8 1, 0, 1, 0, 1, 0, 127, 254, 1, 0, 1, 0, 31, 248, 8, 16, 4, 32, 4
        DC8 32, 2, 64, 1, 128, 2, 64, 12, 48, 112, 14, 0, 4
        DC8 "\263\326"
        DC8 16, 64, 16, 64, 19, 252, 252, 64, 16, 64, 23, 254, 20, 16, 24, 16
        DC8 55, 254, 208, 16, 17, 16, 16, 208, 16, 144, 16, 16, 80, 80, 32, 32
        DC8 "\302\333"
        DC8 64, 64, 32, 64, 48, 160, 32, 144, 1, 8, 2, 6, 229, 4, 33, 16, 33
        DC8 56, 33, 192, 33, 0, 37, 0, 41, 4, 49, 4, 32, 252, 0, 0
        DC8 "\314\263"
        DC8 0, 0, 17, 252, 16, 0, 16, 0, 16, 0, 252, 0, 19, 254, 16, 64, 16, 96
        DC8 16, 128, 28, 136, 49, 4, 194, 126, 7, 198, 2, 4, 0, 0, 0
//    5 #include "GB3232.h"	//32*32汉字字模

        SECTION `.data`:DATA:REORDER:NOROOT(2)
// __absolute struct typFNT_GB32 codeGB_32[15]
codeGB_32:
        DATA
        DC8 "\316\322"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 192, 0, 0, 125, 248, 0, 3, 253, 206
        DC8 0, 63, 193, 199, 0, 0, 193, 199, 0, 0, 193, 195, 0, 0, 193, 195, 0
        DC8 0, 193, 192, 192, 63, 255, 255, 224, 32, 192, 192, 0, 0, 192, 194
        DC8 0, 0, 192, 199, 128, 0, 194, 199, 128, 0, 222, 207, 0, 0, 248, 206
        DC8 0, 15, 224, 252, 0, 127, 192, 248, 0, 60, 192, 120, 0, 48, 192, 112
        DC8 32, 0, 193, 248, 32, 0, 195, 184, 32, 0, 199, 30, 32, 0, 220, 15
        DC8 96, 15, 240, 7, 224, 3, 192, 3, 240, 1, 128, 0, 112, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 "\260\256"
        DC8 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 63, 128, 0, 63, 255, 128, 15, 255, 6
        DC8 0, 1, 134, 15, 0, 0, 195, 14, 0, 0, 227, 156, 0, 8, 99, 152, 0, 8
        DC8 65, 16, 192, 15, 255, 255, 224, 24, 24, 1, 192, 56, 28, 1, 128, 56
        DC8 28, 3, 0, 15, 255, 255, 0, 15, 255, 255, 0, 0, 56, 0, 0, 0, 63, 252
        DC8 0, 0, 63, 254, 0, 0, 124, 28, 0, 0, 108, 56, 0, 0, 198, 112, 0, 1
        DC8 195, 224, 0, 3, 129, 192, 0, 7, 7, 252, 0, 12, 30, 63, 240, 56, 248
        DC8 15, 224, 3, 192, 0, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0
        DC8 "\265\245"
        DC8 0, 0, 0, 0, 0, 128, 48, 0, 0, 224, 56, 0, 0, 112, 56, 0, 0, 56, 96
        DC8 0, 0, 56, 96, 0, 6, 16, 198, 0, 7, 255, 255, 0, 7, 6, 6, 0, 7, 6, 6
        DC8 0, 7, 6, 6, 0, 7, 255, 254, 0, 7, 255, 254, 0, 7, 6, 6, 0, 7, 6, 6
        DC8 0, 7, 6, 6, 0, 7, 255, 254, 0, 7, 6, 6, 0, 6, 6, 0, 0, 0, 6, 0, 224
        DC8 127, 255, 255, 240, 32, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0
        DC8 0, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0
        DC8 "\306\254"
        DC8 0, 0, 0, 0, 0, 0, 192, 0, 1, 0, 240, 0, 1, 192, 224, 0, 1, 192, 224
        DC8 0, 1, 128, 224, 0, 1, 128, 224, 0, 1, 128, 224, 0, 1, 128, 224, 128
        DC8 1, 128, 225, 192, 1, 255, 255, 224, 1, 128, 0, 0, 1, 128, 0, 0, 1
        DC8 128, 0, 0, 1, 128, 48, 0, 1, 255, 248, 0, 1, 255, 248, 0, 1, 128
        DC8 48, 0, 3, 128, 48, 0, 3, 128, 48, 0, 3, 0, 48, 0, 7, 0, 48, 0, 6, 0
        DC8 48, 0, 14, 0, 48, 0, 12, 0, 48, 0, 24, 0, 48, 0, 48, 0, 56, 0, 32
        DC8 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 "\273\372"
        DC8 0, 0, 0, 0, 3, 0, 0, 0, 3, 128, 0, 0, 3, 6, 6, 0, 3, 7, 255, 0, 3
        DC8 7, 15, 0, 3, 7, 14, 0, 3, 55, 14, 0, 127, 247, 14, 0, 63, 255, 14
        DC8 0, 3, 7, 14, 0, 7, 7, 14, 0, 7, 135, 14, 0, 7, 231, 14, 0, 15, 119
        DC8 14, 0, 15, 63, 14, 0, 15, 23, 14, 0, 27, 7, 14, 0, 27, 6, 14, 0, 51
        DC8 6, 14, 0, 51, 6, 14, 32, 99, 14, 14, 96, 67, 12, 14, 96, 3, 28, 14
        DC8 96, 3, 24, 14, 112, 3, 48, 7, 240, 3, 96, 7, 224, 3, 64, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 "\310\253"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 128, 0, 0, 7, 128, 0, 0
        DC8 6, 128, 0, 0, 12, 64, 0, 0, 28, 32, 0, 0, 24, 48, 0, 0, 48, 24, 0
        DC8 0, 96, 12, 0, 0, 192, 7, 0, 1, 128, 3, 192, 3, 0, 2, 248, 7, 255
        DC8 255, 124, 8, 1, 128, 144, 48, 1, 128, 0, 64, 1, 128, 0, 0, 1, 128
        DC8 0, 0, 1, 129, 0, 0, 1, 131, 128, 1, 255, 255, 192, 0, 1, 128, 0, 0
        DC8 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 16
        DC8 0, 1, 128, 56, 31, 255, 255, 252, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 "\266\257"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 14, 0, 0, 0, 12, 0, 0, 12
        DC8 12, 0, 63, 254, 12, 0, 16, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 24, 0
        DC8 0, 255, 252, 0, 2, 12, 24, 0, 7, 12, 24, 63, 255, 140, 24, 1, 192
        DC8 12, 24, 1, 192, 12, 24, 1, 128, 8, 24, 3, 0, 8, 24, 2, 16, 24, 24
        DC8 6, 8, 24, 24, 4, 12, 16, 24, 8, 6, 16, 24, 16, 6, 48, 16, 47, 251
        DC8 32, 16, 62, 3, 96, 16, 16, 2, 192, 48, 0, 0, 128, 48, 0, 1, 12, 48
        DC8 0, 2, 3, 224, 0, 12, 1, 224, 0, 16, 0, 128, 0, 0, 0, 0
        DC8 "\265\347"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 128, 0, 0, 3, 0, 0, 0, 3
        DC8 0, 0, 0, 3, 0, 0, 4, 3, 0, 192, 7, 255, 255, 224, 7, 255, 255, 224
        DC8 6, 3, 0, 192, 6, 3, 0, 192, 6, 3, 0, 192, 6, 3, 0, 192, 7, 255, 255
        DC8 192, 7, 255, 255, 192, 6, 3, 0, 192, 6, 3, 0, 192, 6, 3, 0, 192, 6
        DC8 3, 0, 192, 6, 3, 0, 192, 7, 255, 255, 192, 6, 3, 0, 200, 6, 3, 0
        DC8 152, 4, 3, 0, 24, 0, 3, 0, 24, 0, 3, 0, 24, 0, 3, 128, 28, 0, 3
        DC8 192, 60, 0, 3, 255, 252, 0, 1, 255, 248, 0, 0, 0, 0
        DC8 "\327\323"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 7, 255, 255, 240
        DC8 4, 0, 1, 240, 0, 0, 7, 192, 0, 0, 15, 0, 0, 0, 28, 0, 0, 1, 56, 0
        DC8 0, 1, 224, 0, 0, 1, 224, 0, 0, 1, 192, 0, 0, 1, 192, 56, 0, 1, 192
        DC8 124, 63, 255, 255, 252, 0, 1, 192, 0, 0, 1, 192, 0, 0, 1, 192, 0, 0
        DC8 1, 192, 0, 0, 1, 192, 0, 0, 1, 192, 0, 0, 1, 192, 0, 0, 1, 192, 0
        DC8 0, 1, 192, 0, 0, 1, 192, 0, 0, 1, 192, 0, 0, 63, 192, 0, 0, 63, 192
        DC8 0, 0, 15, 128, 0, 0, 7, 0, 0, 0, 2, 0, 0
        DC8 "\277\306"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 224, 0, 60, 0, 224, 1, 252, 0, 192
        DC8 63, 224, 0, 192, 48, 192, 96, 192, 0, 192, 112, 192, 0, 192, 56
        DC8 192, 0, 192, 56, 192, 0, 196, 24, 192, 63, 254, 0, 192, 63, 255, 0
        DC8 192, 1, 192, 128, 192, 1, 192, 224, 192, 1, 224, 112, 192, 3, 248
        DC8 112, 192, 3, 222, 48, 200, 7, 206, 48, 222, 14, 206, 0, 254, 12
        DC8 196, 31, 224, 28, 195, 252, 192, 56, 199, 128, 192, 48, 192, 0, 192
        DC8 96, 192, 0, 192, 0, 192, 0, 192, 0, 192, 0, 192, 0, 192, 0, 192, 0
        DC8 192, 0, 192, 0, 192, 0, 192, 0, 192, 0, 192, 0, 0, 0, 128
        DC8 "\274\274"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 192, 12, 0, 1, 192, 14, 0, 1, 128, 12, 0
        DC8 1, 128, 12, 0, 1, 128, 12, 0, 1, 128, 12, 0, 1, 152, 12, 24, 63
        DC8 255, 255, 252, 33, 128, 12, 0, 1, 128, 12, 0, 1, 128, 12, 0, 1, 128
        DC8 12, 0, 1, 140, 12, 96, 1, 251, 255, 240, 3, 224, 128, 112, 31, 128
        DC8 192, 224, 127, 128, 192, 224, 57, 128, 97, 192, 1, 128, 97, 192, 1
        DC8 128, 51, 128, 1, 128, 51, 128, 1, 128, 31, 0, 1, 128, 30, 0, 1, 128
        DC8 30, 0, 1, 128, 127, 128, 57, 128, 243, 224, 63, 131, 193, 254, 7
        DC8 143, 0, 126, 3, 124, 0, 56, 0, 0, 0, 0
        DC8 "\273\266"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 56, 0, 0, 0, 56, 0, 0, 8
        DC8 112, 0, 63, 252, 112, 0, 63, 252, 96, 0, 0, 56, 96, 24, 0, 56, 255
        DC8 252, 48, 56, 192, 60, 24, 48, 200, 56, 12, 113, 142, 48, 6, 113
        DC8 140, 96, 3, 99, 30, 0, 3, 227, 30, 0, 1, 198, 30, 0, 1, 224, 30, 0
        DC8 1, 224, 26, 0, 3, 240, 27, 0, 3, 120, 59, 0, 7, 56, 51, 0, 6, 60
        DC8 115, 128, 12, 28, 97, 128, 12, 28, 225, 192, 24, 13, 192, 224, 48
        DC8 1, 128, 240, 96, 7, 0, 120, 0, 14, 0, 62, 0, 56, 0, 30, 0, 96, 0
        DC8 16, 0, 0, 0, 0
        DC8 "\323\255"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 14, 0, 112, 0, 7, 0, 248, 0, 3
        DC8 155, 224, 16, 3, 159, 15, 252, 3, 140, 12, 56, 0, 12, 12, 56, 0, 12
        DC8 12, 56, 0, 12, 12, 56, 3, 12, 12, 56, 127, 140, 12, 56, 35, 140, 12
        DC8 56, 3, 12, 12, 56, 3, 12, 12, 56, 3, 12, 12, 56, 3, 12, 44, 56, 3
        DC8 13, 236, 56, 3, 31, 140, 56, 3, 31, 13, 248, 3, 14, 12, 240, 3, 8
        DC8 12, 112, 7, 0, 12, 0, 31, 128, 12, 0, 60, 224, 12, 0, 120, 120, 0
        DC8 0, 48, 63, 255, 254, 0, 15, 255, 252, 0, 0, 255, 248, 0, 0, 0, 0, 0
        DC8 0, 0, 0
        DC8 "\304\343"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 192, 0, 0, 120, 240, 0, 0, 240, 240
        DC8 0, 0, 225, 224, 0, 1, 193, 192, 0, 1, 193, 128, 16, 1, 131, 128, 56
        DC8 3, 131, 255, 252, 3, 135, 0, 56, 7, 198, 28, 112, 7, 140, 28, 96
        DC8 13, 140, 28, 64, 29, 152, 28, 0, 25, 147, 28, 0, 49, 131, 221, 128
        DC8 97, 131, 156, 192, 65, 131, 156, 96, 1, 135, 28, 112, 1, 135, 28
        DC8 56, 1, 142, 28, 60, 1, 140, 28, 28, 3, 156, 28, 28, 3, 152, 28, 28
        DC8 3, 176, 28, 12, 3, 160, 28, 8, 3, 161, 60, 0, 3, 129, 252, 0, 3
        DC8 128, 120, 0, 3, 0, 48, 0, 0, 0, 0, 0
        DC8 "\243\241"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64
        DC8 0, 0, 0, 240, 0, 0, 0, 240, 0, 0, 0, 240, 0, 0, 0, 240, 0, 0, 0
        DC8 240, 0, 0, 0, 240, 0, 0, 0, 224, 0, 0, 0, 224, 0, 0, 0, 224, 0, 0
        DC8 0, 224, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0
        DC8 64, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 1, 240, 0, 0, 1, 240, 0, 0, 1
        DC8 240, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
//    6 
//    7 /******************** (C) COPYRIGHT 2011 野火嵌入式开发工作室 ********************
//    8  * 文件名       ：LCD.c
//    9  * 描述         ：基于240*320LCD显示屏的底层驱动程序
//   10  * 实验平台     ：凌立印象开发板
//   11  * 库版本       ：基于野火库
//   12  * 嵌入系统     ：
//   13  * 作者         ：xuxu
//   14 **********************************************************************************/
//   15 
//   16 
//   17 
//   18 /************************************************
//   19 *  函数名称：LCD_PORT_init
//   20 *  功能说明：240*320的SPI LCD引脚初始化
//   21 *  参数说明：无
//   22 *  函数返回：无0
//   23 *  修改时间：2014-1-14    已经测试
//   24 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//   25 void LCD_PORT_init()
//   26 {
LCD_PORT_init:
        PUSH     {LR}
        SUB      SP,SP,#+28
//   27   
//   28   GPIO_InitTypeDef gpio_init_struct;
//   29   gpio_init_struct.GPIO_PTx = PTC;
        LDR.W    R0,??DataTable9  ;; 0x400ff080
        STR      R0,[SP, #+4]
//   30   gpio_init_struct.GPIO_Pins = GPIO_Pin2|GPIO_Pin4|GPIO_Pin5|GPIO_Pin7|GPIO_Pin9;
        MOV      R0,#+692
        STR      R0,[SP, #+8]
//   31   gpio_init_struct.GPIO_Dir = DIR_OUTPUT;
        MOVS     R0,#+1
        STRB     R0,[SP, #+16]
//   32   gpio_init_struct.GPIO_Output = OUTPUT_H;
        MOVS     R0,#+1
        STRB     R0,[SP, #+17]
//   33   LPLD_GPIO_Init(gpio_init_struct);
        ADD      R1,SP,#+4
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//   34 //  DDRC2 = 1;
//   35 //  PTC2_O = 1;
//   36 //  DDRC4 = 1;
//   37 //  PTC4_O = 1;
//   38 //  DDRC5 = 1;
//   39 //  PTC5_O = 1;
//   40 //  DDRC7 = 1;
//   41 //  PTC7_O = 1;
//   42 //  DDRC9 = 1;
//   43 //  PTC9_O = 1;
//   44 }
        ADD      SP,SP,#+28
        POP      {PC}             ;; return
//   45 
//   46 /************************************************
//   47 *  函数名称：LCD_Reset
//   48 *  功能说明：240*320的SPI LCD复位
//   49 *  参数说明：无
//   50 *  函数返回：无
//   51 *  修改时间：2014-1-14    已经测试
//   52 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//   53 void LCD_Reset()
//   54 {
LCD_Reset:
        PUSH     {R7,LR}
//   55     reset = 0;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable9_1  ;; 0x43fe101c
        STR      R0,[R1, #+0]
//   56     LPLD_LPTMR_DelayMs(20);
        MOVS     R0,#+20
        BL       LPLD_LPTMR_DelayMs
//   57     reset = 1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable9_1  ;; 0x43fe101c
        STR      R0,[R1, #+0]
//   58     LPLD_LPTMR_DelayMs(20);
        MOVS     R0,#+20
        BL       LPLD_LPTMR_DelayMs
//   59 }
        POP      {R0,PC}          ;; return
//   60 
//   61 
//   62 /************************************************
//   63 *  函数名称：LCD_Reset
//   64 *  功能说明：240*320的SPI LCD模块初始化
//   65 *  参数说明：direction取TRUE和FALSE，屏幕正反之分
//   66 *  函数返回：无
//   67 *  修改时间：2014-1-14    已经测试
//   68 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//   69 void LCD_init(unsigned char direction)
//   70 {
LCD_init:
        PUSH     {R4,LR}
        MOVS     R4,R0
//   71     //先端口输入输出配置
//   72     LCD_PORT_init();
        BL       LCD_PORT_init
//   73     
//   74     reset=0;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable9_1  ;; 0x43fe101c
        STR      R0,[R1, #+0]
//   75     LPLD_LPTMR_DelayMs(20);
        MOVS     R0,#+20
        BL       LPLD_LPTMR_DelayMs
//   76     reset=1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable9_1  ;; 0x43fe101c
        STR      R0,[R1, #+0]
//   77     LPLD_LPTMR_DelayMs(20);
        MOVS     R0,#+20
        BL       LPLD_LPTMR_DelayMs
//   78     //------------------------------------------------------------------//
//   79     //-------------------Software Reset-------------------------------//
//   80     write_command(0xCB);
        MOVS     R0,#+203
        BL       write_command
//   81     write_data(0x39);
        MOVS     R0,#+57
        BL       write_data
//   82     write_data(0x2C);
        MOVS     R0,#+44
        BL       write_data
//   83     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//   84     write_data(0x34);
        MOVS     R0,#+52
        BL       write_data
//   85     write_data(0x02);
        MOVS     R0,#+2
        BL       write_data
//   86 
//   87     write_command(0xCF);
        MOVS     R0,#+207
        BL       write_command
//   88     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//   89     write_data(0XC1);
        MOVS     R0,#+193
        BL       write_data
//   90     write_data(0X30);
        MOVS     R0,#+48
        BL       write_data
//   91 
//   92     write_command(0xE8);
        MOVS     R0,#+232
        BL       write_command
//   93     write_data(0x85);
        MOVS     R0,#+133
        BL       write_data
//   94     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//   95     write_data(0x78);
        MOVS     R0,#+120
        BL       write_data
//   96 
//   97     write_command(0xEA);
        MOVS     R0,#+234
        BL       write_command
//   98     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//   99     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//  100 
//  101     write_command(0xED);
        MOVS     R0,#+237
        BL       write_command
//  102     write_data(0x64);
        MOVS     R0,#+100
        BL       write_data
//  103     write_data(0x03);
        MOVS     R0,#+3
        BL       write_data
//  104     write_data(0X12);
        MOVS     R0,#+18
        BL       write_data
//  105     write_data(0X81);
        MOVS     R0,#+129
        BL       write_data
//  106 
//  107     write_command(0xF7);
        MOVS     R0,#+247
        BL       write_command
//  108     write_data(0x20);
        MOVS     R0,#+32
        BL       write_data
//  109 
//  110     write_command(0xC0);    //Power control
        MOVS     R0,#+192
        BL       write_command
//  111     write_data(0x23);   //VRH[5:0]
        MOVS     R0,#+35
        BL       write_data
//  112 
//  113     write_command(0xC1);    //Power control
        MOVS     R0,#+193
        BL       write_command
//  114     write_data(0x10);   //SAP[2:0];BT[3:0]
        MOVS     R0,#+16
        BL       write_data
//  115 
//  116     write_command(0xC5);    //VCM control
        MOVS     R0,#+197
        BL       write_command
//  117     write_data(0x3e); //对比度调节
        MOVS     R0,#+62
        BL       write_data
//  118     write_data(0x28);
        MOVS     R0,#+40
        BL       write_data
//  119 
//  120     write_command(0xC7);    //VCM control2
        MOVS     R0,#+199
        BL       write_command
//  121     write_data(0x86);  //--
        MOVS     R0,#+134
        BL       write_data
//  122 
//  123     write_command(0x36);    // Memory Access Control
        MOVS     R0,#+54
        BL       write_command
//  124     if(direction)
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+0
        BEQ.N    ??LCD_init_0
//  125         write_data(0xE8); //C8	   //48 68竖屏//28 E8 横屏
        MOVS     R0,#+232
        BL       write_data
        B.N      ??LCD_init_1
//  126     else
//  127         write_data(0x28);//0b00101000
??LCD_init_0:
        MOVS     R0,#+40
        BL       write_data
//  128 
//  129 
//  130     write_command(0x3A);
??LCD_init_1:
        MOVS     R0,#+58
        BL       write_command
//  131     write_data(0x55);
        MOVS     R0,#+85
        BL       write_data
//  132 
//  133     write_command(0xB1);
        MOVS     R0,#+177
        BL       write_command
//  134     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//  135     write_data(0x18);
        MOVS     R0,#+24
        BL       write_data
//  136 
//  137     write_command(0xB6);    // Display Function Control
        MOVS     R0,#+182
        BL       write_command
//  138     write_data(0x08);
        MOVS     R0,#+8
        BL       write_data
//  139     write_data(0x82);
        MOVS     R0,#+130
        BL       write_data
//  140     write_data(0x27);
        MOVS     R0,#+39
        BL       write_data
//  141 
//  142     write_command(0xF2);    // 3Gamma Function Disable
        MOVS     R0,#+242
        BL       write_command
//  143     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//  144 
//  145     write_command(0x26);    //Gamma curve selected
        MOVS     R0,#+38
        BL       write_command
//  146     write_data(0x01);
        MOVS     R0,#+1
        BL       write_data
//  147 
//  148     write_command(0xE0);    //Set Gamma
        MOVS     R0,#+224
        BL       write_command
//  149     write_data(0x0F);
        MOVS     R0,#+15
        BL       write_data
//  150     write_data(0x31);
        MOVS     R0,#+49
        BL       write_data
//  151     write_data(0x2B);
        MOVS     R0,#+43
        BL       write_data
//  152     write_data(0x0C);
        MOVS     R0,#+12
        BL       write_data
//  153     write_data(0x0E);
        MOVS     R0,#+14
        BL       write_data
//  154     write_data(0x08);
        MOVS     R0,#+8
        BL       write_data
//  155     write_data(0x4E);
        MOVS     R0,#+78
        BL       write_data
//  156     write_data(0xF1);
        MOVS     R0,#+241
        BL       write_data
//  157     write_data(0x37);
        MOVS     R0,#+55
        BL       write_data
//  158     write_data(0x07);
        MOVS     R0,#+7
        BL       write_data
//  159     write_data(0x10);
        MOVS     R0,#+16
        BL       write_data
//  160     write_data(0x03);
        MOVS     R0,#+3
        BL       write_data
//  161     write_data(0x0E);
        MOVS     R0,#+14
        BL       write_data
//  162     write_data(0x09);
        MOVS     R0,#+9
        BL       write_data
//  163     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//  164 
//  165     write_command(0XE1);    //Set Gamma
        MOVS     R0,#+225
        BL       write_command
//  166     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//  167     write_data(0x0E);
        MOVS     R0,#+14
        BL       write_data
//  168     write_data(0x14);
        MOVS     R0,#+20
        BL       write_data
//  169     write_data(0x03);
        MOVS     R0,#+3
        BL       write_data
//  170     write_data(0x11);
        MOVS     R0,#+17
        BL       write_data
//  171     write_data(0x07);
        MOVS     R0,#+7
        BL       write_data
//  172     write_data(0x31);
        MOVS     R0,#+49
        BL       write_data
//  173     write_data(0xC1);
        MOVS     R0,#+193
        BL       write_data
//  174     write_data(0x48);
        MOVS     R0,#+72
        BL       write_data
//  175     write_data(0x08);
        MOVS     R0,#+8
        BL       write_data
//  176     write_data(0x0F);
        MOVS     R0,#+15
        BL       write_data
//  177     write_data(0x0C);
        MOVS     R0,#+12
        BL       write_data
//  178     write_data(0x31);
        MOVS     R0,#+49
        BL       write_data
//  179     write_data(0x36);
        MOVS     R0,#+54
        BL       write_data
//  180     write_data(0x0F);
        MOVS     R0,#+15
        BL       write_data
//  181 
//  182     write_command(0x11);    //Exit Sleep
        MOVS     R0,#+17
        BL       write_command
//  183     LPLD_LPTMR_DelayMs(20);
        MOVS     R0,#+20
        BL       LPLD_LPTMR_DelayMs
//  184 
//  185     write_command(0x29);    //Display on
        MOVS     R0,#+41
        BL       write_command
//  186     write_command(0x2c);
        MOVS     R0,#+44
        BL       write_command
//  187 }
        POP      {R4,PC}          ;; return
//  188 
//  189 /************************************************
//  190 *  函数名称：write_command
//  191 *  功能说明：LCD写指令函数
//  192 *  参数说明：c为指令
//  193 *  函数返回：无
//  194 *  修改时间：2014-1-14    已经测试
//  195 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  196 void  write_command(unsigned char  c)
//  197 {
//  198     cs=0;
write_command:
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10  ;; 0x43fe1024
        STR      R1,[R2, #+0]
//  199     dcx=0;
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_1  ;; 0x43fe1014
        STR      R1,[R2, #+0]
//  200     sdi=(GET_BITFIELD(c))->bit7;scl=0;scl=1;
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R1,R0,#+7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  201     sdi=(GET_BITFIELD(c))->bit6;scl=0;scl=1;
        UBFX     R1,R0,#+6,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  202     sdi=(GET_BITFIELD(c))->bit5;scl=0;scl=1;
        UBFX     R1,R0,#+5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  203     sdi=(GET_BITFIELD(c))->bit4;scl=0;scl=1;
        UBFX     R1,R0,#+4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  204     sdi=(GET_BITFIELD(c))->bit3;scl=0;scl=1;
        UBFX     R1,R0,#+3,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  205     sdi=(GET_BITFIELD(c))->bit2;scl=0;scl=1;
        UBFX     R1,R0,#+2,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  206     sdi=(GET_BITFIELD(c))->bit1;scl=0;scl=1;
        UBFX     R1,R0,#+1,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  207     sdi=(GET_BITFIELD(c))->bit0;scl=0;scl=1;
        ANDS     R1,R0,#0x1
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  208     cs=1;
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10  ;; 0x43fe1024
        STR      R1,[R2, #+0]
//  209 }
        BX       LR               ;; return
//  210 
//  211 /************************************************
//  212 *  函数名称：write_data
//  213 *  功能说明：LCD写数据函数
//  214 *  参数说明：d为数据，为一个BYTE的数据
//  215 *  函数返回：无
//  216 *  修改时间：2014-1-14    已经测试
//  217 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  218 void  write_data(unsigned char  d)
//  219 {
//  220     cs=0;
write_data:
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10  ;; 0x43fe1024
        STR      R1,[R2, #+0]
//  221     dcx=1;
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_1  ;; 0x43fe1014
        STR      R1,[R2, #+0]
//  222     sdi=(GET_BITFIELD(d))->bit7;scl=0;scl=1;
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R1,R0,#+7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  223     sdi=(GET_BITFIELD(d))->bit6;scl=0;scl=1;
        UBFX     R1,R0,#+6,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  224     sdi=(GET_BITFIELD(d))->bit5;scl=0;scl=1;
        UBFX     R1,R0,#+5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  225     sdi=(GET_BITFIELD(d))->bit4;scl=0;scl=1;
        UBFX     R1,R0,#+4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  226     sdi=(GET_BITFIELD(d))->bit3;scl=0;scl=1;
        UBFX     R1,R0,#+3,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  227     sdi=(GET_BITFIELD(d))->bit2;scl=0;scl=1;
        UBFX     R1,R0,#+2,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  228     sdi=(GET_BITFIELD(d))->bit1;scl=0;scl=1;
        UBFX     R1,R0,#+1,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  229     sdi=(GET_BITFIELD(d))->bit0;scl=0;scl=1;
        ANDS     R1,R0,#0x1
        LDR.W    R2,??DataTable10_2  ;; 0x43fe1010
        STR      R1,[R2, #+0]
        MOVS     R1,#+0
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10_3  ;; 0x43fe1008
        STR      R1,[R2, #+0]
//  230     cs=1;
        MOVS     R1,#+1
        LDR.W    R2,??DataTable10  ;; 0x43fe1024
        STR      R1,[R2, #+0]
//  231 }
        BX       LR               ;; return
//  232 
//  233 /************************************************
//  234 *  函数名称：write_word
//  235 *  功能说明：LCD写数据函数
//  236 *  参数说明：dat为数据，为两个BYTE的数据
//  237 *  函数返回：无
//  238 *  修改时间：2014-1-14    已经测试
//  239 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  240 void write_word(unsigned int dat)
//  241 {
write_word:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  242     write_data(dat>>8);
        LSRS     R0,R4,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       write_data
//  243     write_data(dat);
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       write_data
//  244 }
        POP      {R4,PC}          ;; return
//  245 
//  246 
//  247 
//  248 
//  249 
//  250 
//  251 /************************************************
//  252 *  函数名称：RamAdressSet
//  253 *  功能说明：LCD的设置RAM地址
//  254 *  参数说明：无
//  255 *  函数返回：无
//  256 *  修改时间：2014-1-14    已经测试
//  257 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  258 void  RamAdressSet()
//  259 {
RamAdressSet:
        PUSH     {R7,LR}
//  260     write_command(0x2A);
        MOVS     R0,#+42
        BL       write_command
//  261     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//  262     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//  263     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//  264     write_data(0xaf);
        MOVS     R0,#+175
        BL       write_data
//  265 
//  266     write_command(0x2B);
        MOVS     R0,#+43
        BL       write_command
//  267     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//  268     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//  269     write_data(0x00);
        MOVS     R0,#+0
        BL       write_data
//  270     write_data(0xdb);		
        MOVS     R0,#+219
        BL       write_data
//  271 }
        POP      {R0,PC}          ;; return
//  272 
//  273 
//  274 /************************************************
//  275 *  函数名称：LCD_SetPos
//  276 *  功能说明：LCD的设置写入屏幕的地址
//  277 *  参数说明：横坐标X0~X1，纵坐标为Y0~Y1
//  278 *  函数返回：无
//  279 *  修改时间：2014-1-14    已经测试
//  280 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  281 void LCD_SetPos(unsigned int x0,unsigned int x1,unsigned int y0,unsigned int y1)
//  282 {
LCD_SetPos:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOVS     R7,R3
//  283     write_command(0x2A);
        MOVS     R0,#+42
        BL       write_command
//  284     write_data(x0>>8);
        LSRS     R0,R4,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       write_data
//  285     write_data(x0);
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       write_data
//  286     write_data(x1>>8);
        LSRS     R0,R5,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       write_data
//  287     write_data(x1);
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       write_data
//  288 
//  289     write_command(0x2B);
        MOVS     R0,#+43
        BL       write_command
//  290     write_data(y0>>8);
        LSRS     R0,R6,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       write_data
//  291     write_data(y0);
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       write_data
//  292     write_data(y1>>8);
        LSRS     R0,R7,#+8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       write_data
//  293     write_data(y1);
        MOVS     R0,R7
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       write_data
//  294     write_command(0x2c);
        MOVS     R0,#+44
        BL       write_command
//  295 }
        POP      {R0,R4-R7,PC}    ;; return
//  296 
//  297 /************************************************
//  298 *  函数名称：LCD_PutChar
//  299 *  功能说明：LCD的写一个Char，默认为8*16的字模
//  300 *  参数说明：横坐标x，纵坐标为y，c为数据，fColor为字颜色，bColor为背景颜色
//  301 *  函数返回：无
//  302 *  修改时间：2014-1-14    已经测试
//  303 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  304 void LCD_PutChar(unsigned int x, unsigned int y,unsigned char c, unsigned int fColor, unsigned int bColor)
//  305 {
LCD_PutChar:
        PUSH     {R4-R8,LR}
        SUB      SP,SP,#+8
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOVS     R7,R3
        LDR      R8,[SP, #+32]
//  306     LCD_PutChar8x16( x, y, c, fColor, bColor );
        STR      R8,[SP, #+0]
        MOVS     R3,R7
        MOVS     R2,R6
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R1,R5
        MOVS     R0,R4
        BL       LCD_PutChar8x16
//  307 }
        POP      {R0,R1,R4-R8,PC}  ;; return
//  308 
//  309 
//  310 /************************************************
//  311 *  函数名称：LCD_PutString
//  312 *  功能说明：LCD的写字符串
//  313 *  参数说明：横坐标x，纵坐标为y，s为字符串指针，fColor为字颜色，bColor为背景颜色
//  314 *  函数返回：无
//  315 *  修改时间：2014-1-14    已经测试
//  316 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  317 void LCD_PutString(unsigned int x, unsigned int y, unsigned char *s, unsigned int fColor, unsigned int bColor)
//  318 {
LCD_PutString:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOVS     R7,R3
        LDR      R8,[SP, #+32]
//  319     unsigned char l=0;
        MOVS     R9,#+0
//  320     while(*s) {
??LCD_PutString_0:
        LDRB     R0,[R6, #+0]
        CMP      R0,#+0
        BEQ.N    ??LCD_PutString_1
//  321         if( *s < 0x80)
        LDRB     R0,[R6, #+0]
        CMP      R0,#+128
        BGE.N    ??LCD_PutString_2
//  322         {
//  323             LCD_PutChar(x+l*8,y,*s,fColor,bColor);
        STR      R8,[SP, #+0]
        MOVS     R3,R7
        LDRB     R2,[R6, #+0]
        MOVS     R1,R5
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        ADDS     R0,R4,R9, LSL #+3
        BL       LCD_PutChar
//  324             s++;l++;
        ADDS     R6,R6,#+1
        ADDS     R9,R9,#+1
        B.N      ??LCD_PutString_0
//  325         }
//  326         else
//  327         {
//  328             PutGB1616(x+l*8,y,(unsigned char*)s,fColor,bColor);
??LCD_PutString_2:
        STR      R8,[SP, #+0]
        MOVS     R3,R7
        MOVS     R2,R6
        MOVS     R1,R5
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        ADDS     R0,R4,R9, LSL #+3
        BL       PutGB1616
//  329             s+=2;l+=2;
        ADDS     R6,R6,#+2
        ADDS     R9,R9,#+2
        B.N      ??LCD_PutString_0
//  330         }
//  331     }
//  332 }
??LCD_PutString_1:
        POP      {R0,R4-R9,PC}    ;; return
//  333 
//  334 
//  335 /************************************************
//  336 *  函数名称：LCD_PutChar8x16
//  337 *  功能说明：LCD的写字符串8*16字模
//  338 *  参数说明：横坐标x，纵坐标为y，c为ASCII码，fColor为字颜色，bColor为背景颜色
//  339 *  函数返回：无
//  340 *  修改时间：2014-1-14    已经测试
//  341 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  342 void LCD_PutChar8x16(unsigned int x, unsigned int y,unsigned char c, unsigned int fColor, unsigned int bColor)
//  343 {
LCD_PutChar8x16:
        PUSH     {R3-R11,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOVS     R7,R3
        LDR      R8,[SP, #+40]
//  344     unsigned int i,j;
//  345     LCD_SetPos(x,x+8-1,y,y+16-1);
        ADDS     R3,R5,#+15
        MOVS     R2,R5
        ADDS     R1,R4,#+7
        MOVS     R0,R4
        BL       LCD_SetPos
//  346     for(i=0; i<16;i++)
        MOVS     R0,#+0
        MOV      R9,R0
??LCD_PutChar8x16_0:
        CMP      R9,#+16
        BCS.N    ??LCD_PutChar8x16_1
//  347     {
//  348 	unsigned char m=Font8x16[c*16+i];
        LDR.W    R0,??DataTable11_2
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        ADDS     R1,R9,R6, LSL #+4
        LDRB     R11,[R1, R0]
//  349 	for(j=0;j<8;j++)
        MOVS     R0,#+0
        MOV      R10,R0
??LCD_PutChar8x16_2:
        CMP      R10,#+8
        BCS.N    ??LCD_PutChar8x16_3
//  350 	{
//  351             if((m&0x80)==0x80)
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        LSLS     R0,R11,#+24
        BPL.N    ??LCD_PutChar8x16_4
//  352                 write_word(fColor);
        MOVS     R0,R7
        BL       write_word
        B.N      ??LCD_PutChar8x16_5
//  353             else
//  354                 write_word(bColor);
??LCD_PutChar8x16_4:
        MOV      R0,R8
        BL       write_word
//  355             m<<=1;
??LCD_PutChar8x16_5:
        LSLS     R11,R11,#+1
//  356 	}
        ADDS     R10,R10,#+1
        B.N      ??LCD_PutChar8x16_2
//  357     }
??LCD_PutChar8x16_3:
        ADDS     R9,R9,#+1
        B.N      ??LCD_PutChar8x16_0
//  358 }
??LCD_PutChar8x16_1:
        POP      {R0,R4-R11,PC}   ;; return
//  359 
//  360 /************************************************
//  361 *  函数名称：PutGB1616
//  362 *  功能说明：LCD的写汉字16*16字模
//  363 *  参数说明：横坐标x，纵坐标为y，c[2]为汉子的机内码，fColor为字颜色，bColor为背景颜色
//  364 *  函数返回：无
//  365 *  修改时间：2014-1-14    已经测试
//  366 *  备注    ：需要自建汉子库codeGB_16
//  367 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  368 void PutGB1616(unsigned int x, unsigned int  y, unsigned char c[2], unsigned int fColor,unsigned int bColor)
//  369 {
PutGB1616:
        PUSH     {R0,R4-R11,LR}
        MOVS     R4,R1
        MOVS     R5,R2
        MOVS     R6,R3
        LDR      R7,[SP, #+40]
//  370     unsigned int i,j,k;
//  371     LCD_SetPos(x,  x+16-1,y, y+16-1);
        ADDS     R3,R4,#+15
        MOVS     R2,R4
        LDR      R0,[SP, #+0]
        ADDS     R1,R0,#+15
        LDR      R0,[SP, #+0]
        BL       LCD_SetPos
//  372     for (k=0;k<64;k++)
        MOVS     R0,#+0
        MOV      R10,R0
??PutGB1616_0:
        CMP      R10,#+64
        BCS.N    ??PutGB1616_1
//  373     { //64标示自建汉字库中的个数，循环查询内码
//  374         if ((codeGB_16[k].Index[0]==c[0])&&(codeGB_16[k].Index[1]==c[1]))
        LDR.W    R0,??DataTable11_3
        MOVS     R1,#+35
        MLA      R0,R1,R10,R0
        LDRB     R0,[R0, #+0]
        LDRB     R1,[R5, #+0]
        CMP      R0,R1
        BNE.N    ??PutGB1616_2
        LDR.W    R0,??DataTable11_3
        MOVS     R1,#+35
        MLA      R0,R1,R10,R0
        LDRB     R0,[R0, #+1]
        LDRB     R1,[R5, #+1]
        CMP      R0,R1
        BNE.N    ??PutGB1616_2
//  375         {
//  376             for(i=0;i<32;i++)
        MOVS     R0,#+0
        MOV      R8,R0
??PutGB1616_3:
        CMP      R8,#+32
        BCS.N    ??PutGB1616_2
//  377             {
//  378                 unsigned short m=codeGB_16[k].Msk[i];
        LDR.W    R0,??DataTable11_3
        MOVS     R1,#+35
        MLA      R0,R1,R10,R0
        ADDS     R0,R8,R0
        LDRB     R11,[R0, #+3]
//  379                 for(j=0;j<8;j++)
        MOVS     R0,#+0
        MOV      R9,R0
??PutGB1616_4:
        CMP      R9,#+8
        BCS.N    ??PutGB1616_5
//  380                 {
//  381                     if((m&0x80)==0x80)
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        LSLS     R0,R11,#+24
        BPL.N    ??PutGB1616_6
//  382                         write_word(fColor);
        MOVS     R0,R6
        BL       write_word
        B.N      ??PutGB1616_7
//  383                     else
//  384                         write_word(bColor);
??PutGB1616_6:
        MOVS     R0,R7
        BL       write_word
//  385                     m<<=1;
??PutGB1616_7:
        LSLS     R11,R11,#+1
//  386                 }
        ADDS     R9,R9,#+1
        B.N      ??PutGB1616_4
//  387             }
??PutGB1616_5:
        ADDS     R8,R8,#+1
        B.N      ??PutGB1616_3
//  388         }
//  389     }
??PutGB1616_2:
        ADDS     R10,R10,#+1
        B.N      ??PutGB1616_0
//  390 }
??PutGB1616_1:
        POP      {R0,R4-R11,PC}   ;; return
//  391 
//  392 /************************************************
//  393 *  函数名称：PutGB3232
//  394 *  功能说明：LCD的写汉字32*32字模
//  395 *  参数说明：横坐标x，纵坐标为y，c[2]为汉子的机内码，fColor为字颜色，bColor为背景颜色
//  396 *  函数返回：无
//  397 *  修改时间：2014-1-14    已经测试
//  398 *  备注    ：需要自建汉子库codeGB_32
//  399 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  400 void PutGB3232(unsigned int x, unsigned int  y, unsigned char c[2], unsigned int fColor,unsigned int bColor)
//  401 {
PutGB3232:
        PUSH     {R0,R4-R11,LR}
        MOVS     R4,R1
        MOVS     R5,R2
        MOVS     R6,R3
        LDR      R7,[SP, #+40]
//  402     unsigned int i,j,k;
//  403     LCD_SetPos(x,  x+32-1,y, y+32-1);
        ADDS     R3,R4,#+31
        MOVS     R2,R4
        LDR      R0,[SP, #+0]
        ADDS     R1,R0,#+31
        LDR      R0,[SP, #+0]
        BL       LCD_SetPos
//  404     for (k=0;k<15;k++) { //15标示自建汉字库中的个数，循环查询内码
        MOVS     R0,#+0
        MOV      R10,R0
??PutGB3232_0:
        CMP      R10,#+15
        BCS.N    ??PutGB3232_1
//  405         if ((codeGB_32[k].Index[0]==c[0])&&(codeGB_32[k].Index[1]==c[1])){
        LDR.W    R0,??DataTable11_4
        MOVS     R1,#+131
        MLA      R0,R1,R10,R0
        LDRB     R0,[R0, #+0]
        LDRB     R1,[R5, #+0]
        CMP      R0,R1
        BNE.N    ??PutGB3232_2
        LDR.W    R0,??DataTable11_4
        MOVS     R1,#+131
        MLA      R0,R1,R10,R0
        LDRB     R0,[R0, #+1]
        LDRB     R1,[R5, #+1]
        CMP      R0,R1
        BNE.N    ??PutGB3232_2
//  406             for(i=0;i<128;i++) {
        MOVS     R0,#+0
        MOV      R8,R0
??PutGB3232_3:
        CMP      R8,#+128
        BCS.N    ??PutGB3232_2
//  407                 unsigned short m=codeGB_32[k].Msk[i];
        LDR.W    R0,??DataTable11_4
        MOVS     R1,#+131
        MLA      R0,R1,R10,R0
        ADDS     R0,R8,R0
        LDRB     R11,[R0, #+3]
//  408                 for(j=0;j<8;j++) {
        MOVS     R0,#+0
        MOV      R9,R0
??PutGB3232_4:
        CMP      R9,#+8
        BCS.N    ??PutGB3232_5
//  409                     if((m&0x80)==0x80) {
        UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
        LSLS     R0,R11,#+24
        BPL.N    ??PutGB3232_6
//  410                         write_word(fColor);
        MOVS     R0,R6
        BL       write_word
        B.N      ??PutGB3232_7
//  411                     }
//  412                     else {
//  413                         write_word(bColor);
??PutGB3232_6:
        MOVS     R0,R7
        BL       write_word
//  414                     }
//  415                     m<<=1;
??PutGB3232_7:
        LSLS     R11,R11,#+1
//  416                 }
        ADDS     R9,R9,#+1
        B.N      ??PutGB3232_4
//  417             }
??PutGB3232_5:
        ADDS     R8,R8,#+1
        B.N      ??PutGB3232_3
//  418         }
//  419     }	
??PutGB3232_2:
        ADDS     R10,R10,#+1
        B.N      ??PutGB3232_0
//  420 }
??PutGB3232_1:
        POP      {R0,R4-R11,PC}   ;; return
//  421 
//  422 
//  423 /************************************************
//  424 *  函数名称：Disp_single_colour
//  425 *  功能说明：LCD的刷屏函数
//  426 *  参数说明：Color为背景颜色
//  427 *  函数返回：无
//  428 *  修改时间：2014-1-14    已经测试
//  429 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  430 void Disp_single_colour(unsigned int color)
//  431 {
Disp_single_colour:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  432     unsigned int i,j;
//  433     LCD_SetPos(0,320-1,0,240-1);
        MOVS     R3,#+239
        MOVS     R2,#+0
        MOVW     R1,#+319
        MOVS     R0,#+0
        BL       LCD_SetPos
//  434     for (i=0;i<240;i++)
        MOVS     R0,#+0
        MOVS     R5,R0
??Disp_single_colour_0:
        CMP      R5,#+240
        BCS.N    ??Disp_single_colour_1
//  435         for (j=0;j<320;j++)
        MOVS     R0,#+0
        MOVS     R6,R0
??Disp_single_colour_2:
        CMP      R6,#+320
        BCS.N    ??Disp_single_colour_3
//  436             write_word(color);
        MOVS     R0,R4
        BL       write_word
        ADDS     R6,R6,#+1
        B.N      ??Disp_single_colour_2
??Disp_single_colour_3:
        ADDS     R5,R5,#+1
        B.N      ??Disp_single_colour_0
//  437 }
??Disp_single_colour_1:
        POP      {R4-R6,PC}       ;; return
//  438 
//  439 
//  440 /************************************************
//  441 *  函数名称：Draw_single_line
//  442 *  功能说明：LCD的画单线函数
//  443 *  参数说明：axis为行或者列，取'H'或者'L'，line为第几行或者第几列，Color为颜色
//  444 *  函数返回：无
//  445 *  修改时间：2014-1-14    已经测试
//  446 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  447 void Draw_single_line(unsigned char axis,unsigned int line,unsigned int color)
//  448 {
Draw_single_line:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  449     unsigned int i;
//  450     if(axis=='L')
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+76
        BNE.N    ??Draw_single_line_0
//  451     {
//  452         LCD_SetPos(line,line,0,240-1);
        MOVS     R3,#+239
        MOVS     R2,#+0
        MOVS     R1,R5
        MOVS     R0,R5
        BL       LCD_SetPos
//  453         for (i=0;i<240;i++)
        MOVS     R0,#+0
        MOVS     R7,R0
??Draw_single_line_1:
        CMP      R7,#+240
        BCS.N    ??Draw_single_line_2
//  454             write_word(color);
        MOVS     R0,R6
        BL       write_word
        ADDS     R7,R7,#+1
        B.N      ??Draw_single_line_1
//  455     }
//  456     else if(axis=='H')
??Draw_single_line_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+72
        BNE.N    ??Draw_single_line_2
//  457     {
//  458         LCD_SetPos(0,320-1,line,line);
        MOVS     R3,R5
        MOVS     R2,R5
        MOVW     R1,#+319
        MOVS     R0,#+0
        BL       LCD_SetPos
//  459         for (i=0;i<320;i++)
        MOVS     R0,#+0
        MOVS     R7,R0
??Draw_single_line_3:
        CMP      R7,#+320
        BCS.N    ??Draw_single_line_2
//  460             write_word(color);
        MOVS     R0,R6
        BL       write_word
        ADDS     R7,R7,#+1
        B.N      ??Draw_single_line_3
//  461     }
//  462 }
??Draw_single_line_2:
        POP      {R0,R4-R7,PC}    ;; return
//  463 
//  464 
//  465 
//  466 /************************************************
//  467 *  函数名称：LCD_Put_Unsigned_Int
//  468 *  功能说明：LCD的显示Unsigned_Int
//  469 *  参数说明：x，y为坐标，s0为要先写的字符串，pnum为数值，fColor和bColor为字和底色
//  470 *  函数返回：无
//  471 *  修改时间：2014-1-14    已经测试
//  472 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  473 void LCD_Put_Unsigned_Int(unsigned int x,unsigned int y,unsigned char s0[],unsigned int pnum,unsigned int fColor, unsigned int bColor)
//  474 {
LCD_Put_Unsigned_Int:
        PUSH     {R4-R11,LR}
        SUB      SP,SP,#+36
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOVS     R7,R3
        LDR      R8,[SP, #+72]
        LDR      R9,[SP, #+76]
//  475     unsigned char l=0;
        MOVS     R10,#+0
//  476     unsigned char s[30];
//  477     unsigned char count=0;
        MOVS     R11,#+0
//  478     //copy
//  479     count=0;
        MOVS     R0,#+0
        MOV      R11,R0
//  480     while(s0[count])
??LCD_Put_Unsigned_Int_0:
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        LDRB     R0,[R11, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_Put_Unsigned_Int_1
//  481     {
//  482        s[count] = s0[count];
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        LDRB     R0,[R11, R6]
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
//  483        count++;
        ADDS     R11,R11,#+1
        B.N      ??LCD_Put_Unsigned_Int_0
//  484     }
//  485     //strcat
//  486     if(pnum<10)
??LCD_Put_Unsigned_Int_1:
        CMP      R7,#+10
        BCS.N    ??LCD_Put_Unsigned_Int_2
//  487     {  s[count]=pnum+'0';s[count+1]='\0';}
        ADDS     R0,R7,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        MOVS     R0,#+0
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+1]
        B.N      ??LCD_Put_Unsigned_Int_3
//  488     else if((10<=pnum)&&(pnum<100))
??LCD_Put_Unsigned_Int_2:
        CMP      R7,#+10
        BCC.N    ??LCD_Put_Unsigned_Int_4
        CMP      R7,#+100
        BCS.N    ??LCD_Put_Unsigned_Int_4
//  489     {  s[count]=pnum/10+'0';s[count+1]=pnum%10+'0';s[count+2]='\0';}
        MOVS     R0,#+10
        UDIV     R0,R7,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        MOVS     R0,#+10
        UDIV     R1,R7,R0
        MLS      R0,R0,R1,R7
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+1]
        MOVS     R0,#+0
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+2]
        B.N      ??LCD_Put_Unsigned_Int_3
//  490     else if(pnum<=999)
??LCD_Put_Unsigned_Int_4:
        CMP      R7,#+1000
        BCS.N    ??LCD_Put_Unsigned_Int_5
//  491     {
//  492         s[count]=pnum/100+'0';
        MOVS     R0,#+100
        UDIV     R0,R7,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
//  493         s[count+1]=pnum/10%10+'0';
        MOVS     R0,#+10
        UDIV     R0,R7,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+1]
//  494         s[count+2]=pnum%10+'0';
        MOVS     R0,#+10
        UDIV     R1,R7,R0
        MLS      R0,R0,R1,R7
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+2]
//  495         s[count+3]='\0';
        MOVS     R0,#+0
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+3]
        B.N      ??LCD_Put_Unsigned_Int_3
//  496     }
//  497     else if(pnum<=9999)
??LCD_Put_Unsigned_Int_5:
        MOVW     R0,#+10000
        CMP      R7,R0
        BCS.N    ??LCD_Put_Unsigned_Int_6
//  498     {
//  499         s[count]=pnum/1000+'0';
        MOV      R0,#+1000
        UDIV     R0,R7,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
//  500         s[count+1]=pnum/100%10+'0';
        MOVS     R0,#+100
        UDIV     R0,R7,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+1]
//  501         s[count+2]=pnum/10%10+'0';
        MOVS     R0,#+10
        UDIV     R0,R7,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+2]
//  502         s[count+3]=pnum%10+'0';
        MOVS     R0,#+10
        UDIV     R1,R7,R0
        MLS      R0,R0,R1,R7
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+3]
//  503         s[count+4]='\0';
        MOVS     R0,#+0
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+4]
        B.N      ??LCD_Put_Unsigned_Int_3
//  504     }
//  505     else if(pnum<=99999)
??LCD_Put_Unsigned_Int_6:
        LDR.W    R0,??DataTable11_5  ;; 0x186a0
        CMP      R7,R0
        BCS.N    ??LCD_Put_Unsigned_Int_3
//  506     {
//  507         s[count]=pnum/10000+'0';
        MOVW     R0,#+10000
        UDIV     R0,R7,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
//  508         s[count+1]=pnum/1000%10+'0';
        MOV      R0,#+1000
        UDIV     R0,R7,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+1]
//  509         s[count+2]=pnum/100%10+'0';
        MOVS     R0,#+100
        UDIV     R0,R7,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+2]
//  510         s[count+3]=pnum/10%10+'0';
        MOVS     R0,#+10
        UDIV     R0,R7,R0
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+3]
//  511         s[count+4]=pnum%10+'0';
        MOVS     R0,#+10
        UDIV     R1,R7,R0
        MLS      R0,R0,R1,R7
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+4]
//  512         s[count+5]='\0';
        MOVS     R0,#+0
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        ADDS     R1,R11,R1
        STRB     R0,[R1, #+5]
//  513     }
//  514     count=0;
??LCD_Put_Unsigned_Int_3:
        MOVS     R0,#+0
        MOV      R11,R0
//  515     while(s[count])
??LCD_Put_Unsigned_Int_7:
        ADD      R0,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        LDRB     R0,[R11, R0]
        CMP      R0,#+0
        BEQ.N    ??LCD_Put_Unsigned_Int_8
//  516     {
//  517         if( s[count] < 0x80)
        ADD      R0,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        LDRB     R0,[R11, R0]
        CMP      R0,#+128
        BGE.N    ??LCD_Put_Unsigned_Int_9
//  518         {
//  519             LCD_PutChar(x+l*8,y,s[count],fColor,bColor);
        STR      R9,[SP, #+0]
        MOV      R3,R8
        ADD      R0,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        LDRB     R2,[R11, R0]
        MOVS     R1,R5
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R0,R4,R10, LSL #+3
        BL       LCD_PutChar
//  520             count++;
        ADDS     R11,R11,#+1
//  521             l++;
        ADDS     R10,R10,#+1
        B.N      ??LCD_Put_Unsigned_Int_7
//  522         }
//  523         else
//  524         {
//  525             PutGB1616(x+l*8,y,(unsigned char*)s[count],fColor,bColor);
??LCD_Put_Unsigned_Int_9:
        STR      R9,[SP, #+0]
        MOV      R3,R8
        ADD      R0,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        LDRB     R2,[R11, R0]
        MOVS     R1,R5
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R0,R4,R10, LSL #+3
        BL       PutGB1616
//  526             count+=2;
        ADDS     R11,R11,#+2
//  527             l+=2;
        ADDS     R10,R10,#+2
        B.N      ??LCD_Put_Unsigned_Int_7
//  528         }
//  529     }
//  530 }
??LCD_Put_Unsigned_Int_8:
        ADD      SP,SP,#+36
        POP      {R4-R11,PC}      ;; return
//  531 
//  532 
//  533 /************************************************
//  534 *  函数名称：LCD_Put_Int
//  535 *  功能说明：LCD的显示Unsigned_Int
//  536 *  参数说明：x，y为坐标，s0为要先写的字符串，pnum为数值，fColor和bColor为字和底色
//  537 *  函数返回：无
//  538 *  修改时间：2014-1-14    已经测试
//  539 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  540 void LCD_Put_Int(unsigned int x,unsigned int y,unsigned char s0[],int pnum,unsigned int fColor, unsigned int bColor)
//  541 {
LCD_Put_Int:
        PUSH     {R4-R11,LR}
        SUB      SP,SP,#+36
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOV      R11,R3
        LDR      R7,[SP, #+72]
        LDR      R8,[SP, #+76]
//  542     unsigned char l=0;
        MOVS     R9,#+0
//  543     unsigned char s[30];
//  544     unsigned char count=0;
        MOVS     R10,#+0
//  545     //copy
//  546     count=0;
        MOVS     R0,#+0
        MOV      R10,R0
//  547     while(s0[count])
??LCD_Put_Int_0:
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        LDRB     R0,[R10, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_Put_Int_1
//  548     {
//  549        s[count] = s0[count];
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        LDRB     R0,[R10, R6]
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        STRB     R0,[R10, R1]
//  550        count++;
        ADDS     R10,R10,#+1
        B.N      ??LCD_Put_Int_0
//  551     }
//  552     //strcat
//  553     if(pnum < 0)
??LCD_Put_Int_1:
        CMP      R11,#+0
        BPL.N    ??LCD_Put_Int_2
//  554     {
//  555        s[count] = '-';
        MOVS     R0,#+45
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        STRB     R0,[R10, R1]
//  556        count++;
        ADDS     R10,R10,#+1
//  557        pnum = (-1) * pnum;
        MOVS     R0,#-1
        MUL      R11,R0,R11
//  558     }
//  559     if(pnum < 10)
??LCD_Put_Int_2:
        CMP      R11,#+10
        BGE.N    ??LCD_Put_Int_3
//  560     {  s[count]=pnum+'0';s[count+1]='\0';}
        ADDS     R0,R11,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        STRB     R0,[R10, R1]
        MOVS     R0,#+0
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+1]
        B.N      ??LCD_Put_Int_4
//  561     else if((10<=pnum)&&(pnum<100))
??LCD_Put_Int_3:
        CMP      R11,#+10
        BLT.N    ??LCD_Put_Int_5
        CMP      R11,#+100
        BGE.N    ??LCD_Put_Int_5
//  562     {  s[count]=pnum/10+'0';s[count+1]=pnum%10+'0';s[count+2]='\0';}
        MOVS     R0,#+10
        SDIV     R0,R11,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        STRB     R0,[R10, R1]
        MOVS     R0,#+10
        SDIV     R1,R11,R0
        MLS      R0,R0,R1,R11
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+1]
        MOVS     R0,#+0
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+2]
        B.N      ??LCD_Put_Int_4
//  563     else if(pnum<=999)
??LCD_Put_Int_5:
        CMP      R11,#+1000
        BGE.N    ??LCD_Put_Int_6
//  564     {
//  565         s[count]=pnum/100+'0';
        MOVS     R0,#+100
        SDIV     R0,R11,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        STRB     R0,[R10, R1]
//  566         s[count+1]=pnum/10%10+'0';
        MOVS     R0,#+10
        SDIV     R0,R11,R0
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+1]
//  567         s[count+2]=pnum%10+'0';
        MOVS     R0,#+10
        SDIV     R1,R11,R0
        MLS      R0,R0,R1,R11
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+2]
//  568         s[count+3]='\0';
        MOVS     R0,#+0
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+3]
        B.N      ??LCD_Put_Int_4
//  569     }
//  570     else if(pnum<=9999)
??LCD_Put_Int_6:
        MOVW     R0,#+10000
        CMP      R11,R0
        BGE.N    ??LCD_Put_Int_7
//  571     {
//  572         s[count]=pnum/1000+'0';
        MOV      R0,#+1000
        SDIV     R0,R11,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        STRB     R0,[R10, R1]
//  573         s[count+1]=pnum/100%10+'0';
        MOVS     R0,#+100
        SDIV     R0,R11,R0
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+1]
//  574         s[count+2]=pnum/10%10+'0';
        MOVS     R0,#+10
        SDIV     R0,R11,R0
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+2]
//  575         s[count+3]=pnum%10+'0';
        MOVS     R0,#+10
        SDIV     R1,R11,R0
        MLS      R0,R0,R1,R11
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+3]
//  576         s[count+4]='\0';
        MOVS     R0,#+0
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+4]
        B.N      ??LCD_Put_Int_4
//  577     }
//  578     else if(pnum<=99999)
??LCD_Put_Int_7:
        LDR.W    R0,??DataTable11_5  ;; 0x186a0
        CMP      R11,R0
        BGE.N    ??LCD_Put_Int_4
//  579     {
//  580         s[count]=pnum/10000+'0';
        MOVW     R0,#+10000
        SDIV     R0,R11,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        STRB     R0,[R10, R1]
//  581         s[count+1]=pnum/1000%10+'0';
        MOV      R0,#+1000
        SDIV     R0,R11,R0
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+1]
//  582         s[count+2]=pnum/100%10+'0';
        MOVS     R0,#+100
        SDIV     R0,R11,R0
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+2]
//  583         s[count+3]=pnum/10%10+'0';
        MOVS     R0,#+10
        SDIV     R0,R11,R0
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+3]
//  584         s[count+4]=pnum%10+'0';
        MOVS     R0,#+10
        SDIV     R1,R11,R0
        MLS      R0,R0,R1,R11
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+4]
//  585         s[count+5]='\0';
        MOVS     R0,#+0
        ADD      R1,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        ADDS     R1,R10,R1
        STRB     R0,[R1, #+5]
//  586     }
//  587     count=0;
??LCD_Put_Int_4:
        MOVS     R0,#+0
        MOV      R10,R0
//  588     while(s[count])
??LCD_Put_Int_8:
        ADD      R0,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        LDRB     R0,[R10, R0]
        CMP      R0,#+0
        BEQ.N    ??LCD_Put_Int_9
//  589     {
//  590         if( s[count] < 0x80)
        ADD      R0,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        LDRB     R0,[R10, R0]
        CMP      R0,#+128
        BGE.N    ??LCD_Put_Int_10
//  591         {
//  592             LCD_PutChar(x+l*8,y,s[count],fColor,bColor);
        STR      R8,[SP, #+0]
        MOVS     R3,R7
        ADD      R0,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        LDRB     R2,[R10, R0]
        MOVS     R1,R5
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        ADDS     R0,R4,R9, LSL #+3
        BL       LCD_PutChar
//  593             count++;
        ADDS     R10,R10,#+1
//  594             l++;
        ADDS     R9,R9,#+1
        B.N      ??LCD_Put_Int_8
//  595         }
//  596         else
//  597         {
//  598             PutGB1616(x+l*8,y,(unsigned char*)s[count],fColor,bColor);
??LCD_Put_Int_10:
        STR      R8,[SP, #+0]
        MOVS     R3,R7
        ADD      R0,SP,#+4
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        LDRB     R2,[R10, R0]
        MOVS     R1,R5
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        ADDS     R0,R4,R9, LSL #+3
        BL       PutGB1616
//  599             count+=2;
        ADDS     R10,R10,#+2
//  600             l+=2;
        ADDS     R9,R9,#+2
        B.N      ??LCD_Put_Int_8
//  601         }
//  602     }
//  603 }
??LCD_Put_Int_9:
        ADD      SP,SP,#+36
        POP      {R4-R11,PC}      ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable9:
        DC32     0x400ff080

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable9_1:
        DC32     0x43fe101c
//  604 
//  605 
//  606 /************************************************
//  607 *  函数名称：LCD_Put_Int
//  608 *  功能说明：LCD的显示Unsigned_Int
//  609 *  参数说明：x，y为坐标，s0为要先写的字符串，f为数值，fColor和bColor为字和底色
//  610 *  函数返回：无
//  611 *  修改时间：2014-1-14    已经测试
//  612 *************************************************/

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  613 void LCD_Put_Float(unsigned int x,unsigned int y,unsigned char s0[],float f,unsigned int fColor, unsigned int bColor)
//  614 {
LCD_Put_Float:
        PUSH     {R3-R11,LR}
        VPUSH    {D8}
        SUB      SP,SP,#+40
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        VMOV.F32 S16,S0
        MOVS     R7,R3
        LDR      R8,[SP, #+88]
//  615     unsigned char l=0;
        MOVS     R9,#+0
//  616     unsigned char s[30];
//  617     unsigned char count=0;
        MOVS     R11,#+0
//  618     int pnum;
//  619     //copy
//  620     count=0;
        MOVS     R0,#+0
        MOV      R11,R0
//  621     while(s0[count])
??LCD_Put_Float_0:
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        LDRB     R0,[R11, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_Put_Float_1
//  622     {
//  623        s[count] = s0[count];
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        LDRB     R0,[R11, R6]
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
//  624        count++;
        ADDS     R11,R11,#+1
        B.N      ??LCD_Put_Float_0
//  625     }
//  626     //strcat
//  627     pnum = (int)(f);
??LCD_Put_Float_1:
        VCVT.S32.F32 S0,S16
        VMOV     R0,S0
        MOV      R10,R0
//  628     if(pnum < 0)
        CMP      R10,#+0
        BPL.N    ??LCD_Put_Float_2
//  629     {
//  630        s[count++] = '-';
        MOVS     R0,#+45
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  631        pnum = (-1) * pnum;
        MOVS     R0,#-1
        MUL      R10,R0,R10
//  632     }
//  633     if(pnum < 10)
??LCD_Put_Float_2:
        CMP      R10,#+10
        BGE.N    ??LCD_Put_Float_3
//  634     {
//  635         s[count++]=pnum+'0';
        ADDS     R0,R10,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
        B.N      ??LCD_Put_Float_4
//  636     }
//  637     else if((10<=pnum)&&(pnum<100))
??LCD_Put_Float_3:
        CMP      R10,#+10
        BLT.N    ??LCD_Put_Float_5
        CMP      R10,#+100
        BGE.N    ??LCD_Put_Float_5
//  638     {
//  639         s[count++]=pnum/10+'0';
        MOVS     R0,#+10
        SDIV     R0,R10,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  640         s[count++]=pnum%10+'0';
        MOVS     R0,#+10
        SDIV     R1,R10,R0
        MLS      R0,R0,R1,R10
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
        B.N      ??LCD_Put_Float_4
//  641     }
//  642     else if(pnum<=999)
??LCD_Put_Float_5:
        CMP      R10,#+1000
        BGE.N    ??LCD_Put_Float_6
//  643     {
//  644         s[count++]=pnum/100+'0';
        MOVS     R0,#+100
        SDIV     R0,R10,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  645         s[count++]=pnum/10%10+'0';
        MOVS     R0,#+10
        SDIV     R0,R10,R0
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  646         s[count++]=pnum%10+'0';
        MOVS     R0,#+10
        SDIV     R1,R10,R0
        MLS      R0,R0,R1,R10
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
        B.N      ??LCD_Put_Float_4
//  647     }
//  648     else if(pnum<=9999)
??LCD_Put_Float_6:
        MOVW     R0,#+10000
        CMP      R10,R0
        BGE.N    ??LCD_Put_Float_7
//  649     {
//  650         s[count++]=pnum/1000+'0';
        MOV      R0,#+1000
        SDIV     R0,R10,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  651         s[count++]=pnum/100%10+'0';
        MOVS     R0,#+100
        SDIV     R0,R10,R0
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  652         s[count++]=pnum/10%10+'0';
        MOVS     R0,#+10
        SDIV     R0,R10,R0
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  653         s[count++]=pnum%10+'0';
        MOVS     R0,#+10
        SDIV     R1,R10,R0
        MLS      R0,R0,R1,R10
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
        B.N      ??LCD_Put_Float_4
//  654     }
//  655     else if(pnum<=99999)
??LCD_Put_Float_7:
        LDR.N    R0,??DataTable11_5  ;; 0x186a0
        CMP      R10,R0
        BGE.N    ??LCD_Put_Float_4
//  656     {
//  657         s[count++]=pnum/10000+'0';
        MOVW     R0,#+10000
        SDIV     R0,R10,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  658         s[count++]=pnum/1000%10+'0';
        MOV      R0,#+1000
        SDIV     R0,R10,R0
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  659         s[count++]=pnum/100%10+'0';
        MOVS     R0,#+100
        SDIV     R0,R10,R0
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  660         s[count++]=pnum/10%10+'0';
        MOVS     R0,#+10
        SDIV     R0,R10,R0
        MOVS     R1,#+10
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  661         s[count++]=pnum%10+'0';
        MOVS     R0,#+10
        SDIV     R1,R10,R0
        MLS      R0,R0,R1,R10
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  662     }
//  663     //小数点后面三位
//  664     if(f<0)
??LCD_Put_Float_4:
        VCMP.F32 S16,#0.0
        FMSTAT   
        BPL.N    ??LCD_Put_Float_8
//  665         f=(-1)*f;
        VMOV.F32 S0,#-1.0
        VMUL.F32 S16,S16,S0
//  666     s[count++] = '.';
??LCD_Put_Float_8:
        MOVS     R0,#+46
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  667     s[count++] = ((int)(f*10))%10 + '0';
        VMOV.F32 S0,#10.0
        VMUL.F32 S0,S16,S0
        VCVT.S32.F32 S0,S0
        MOVS     R0,#+10
        VMOV     R1,S0
        VMOV     R2,S0
        SDIV     R2,R2,R0
        MLS      R0,R0,R2,R1
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  668     s[count++] = ((int)(f*100))%10 + '0';
        VLDR.W   S0,??DataTable11  ;; 0x42c80000
        VMUL.F32 S0,S16,S0
        VCVT.S32.F32 S0,S0
        MOVS     R0,#+10
        VMOV     R1,S0
        VMOV     R2,S0
        SDIV     R2,R2,R0
        MLS      R0,R0,R2,R1
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  669     s[count++] = ((int)(f*1000))%10 + '0';
        VLDR.W   S0,??DataTable11_1  ;; 0x447a0000
        VMUL.F32 S0,S16,S0
        VCVT.S32.F32 S0,S0
        MOVS     R0,#+10
        VMOV     R1,S0
        VMOV     R2,S0
        SDIV     R2,R2,R0
        MLS      R0,R0,R2,R1
        ADDS     R0,R0,#+48
        ADD      R1,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        STRB     R0,[R11, R1]
        ADDS     R11,R11,#+1
//  670 
//  671     //print
//  672     count=0;
        MOVS     R0,#+0
        MOV      R11,R0
//  673     while(s[count])
??LCD_Put_Float_9:
        ADD      R0,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        LDRB     R0,[R11, R0]
        CMP      R0,#+0
        BEQ.N    ??LCD_Put_Float_10
//  674     {
//  675         if( s[count] < 0x80)
        ADD      R0,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        LDRB     R0,[R11, R0]
        CMP      R0,#+128
        BGE.N    ??LCD_Put_Float_11
//  676         {
//  677             LCD_PutChar(x+l*8,y,s[count],fColor,bColor);
        STR      R8,[SP, #+0]
        MOVS     R3,R7
        ADD      R0,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        LDRB     R2,[R11, R0]
        MOVS     R1,R5
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        ADDS     R0,R4,R9, LSL #+3
        BL       LCD_PutChar
//  678             count++;
        ADDS     R11,R11,#+1
//  679             l++;
        ADDS     R9,R9,#+1
        B.N      ??LCD_Put_Float_9
//  680         }
//  681         else
//  682         {
//  683             PutGB1616(x+l*8,y,(unsigned char*)s[count],fColor,bColor);
??LCD_Put_Float_11:
        STR      R8,[SP, #+0]
        MOVS     R3,R7
        ADD      R0,SP,#+4
        UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
        LDRB     R2,[R11, R0]
        MOVS     R1,R5
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        ADDS     R0,R4,R9, LSL #+3
        BL       PutGB1616
//  684             count+=2;
        ADDS     R11,R11,#+2
//  685             l+=2;
        ADDS     R9,R9,#+2
        B.N      ??LCD_Put_Float_9
//  686         }
//  687     }
//  688 }
??LCD_Put_Float_10:
        ADD      SP,SP,#+40
        VPOP     {D8}
        POP      {R0,R4-R11,PC}   ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable10:
        DC32     0x43fe1024

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable10_1:
        DC32     0x43fe1014

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable10_2:
        DC32     0x43fe1010

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable10_3:
        DC32     0x43fe1008
//  689 
//  690 /************************************************
//  691 *  函数名称：Print_child
//  692 *  功能说明：LCD的显示一个小破孩图片
//  693 *  参数说明：无
//  694 *  函数返回：无
//  695 *  修改时间：2014-1-14    已经测试
//  696 *************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  697 void Print_child()
//  698 {
Print_child:
        PUSH     {R4,LR}
        SUB      SP,SP,#+6400
//  699     unsigned char child[]={};
        ADD      R0,SP,#+0
        LDR.N    R1,??DataTable11_6
        MOV      R2,#+6400
        BL       __aeabi_memcpy4
//  700     unsigned int i=0;
        MOVS     R4,#+0
//  701     LCD_SetPos(0,256-1,0,200-1);
        MOVS     R3,#+199
        MOVS     R2,#+0
        MOVS     R1,#+255
        MOVS     R0,#+0
        BL       LCD_SetPos
//  702     for (i=0;i<6400;i++)
        MOVS     R0,#+0
        MOVS     R4,R0
??Print_child_0:
        CMP      R4,#+6400
        BCS.N    ??Print_child_1
//  703     {
//  704         if((GET_BITFIELD(child[i]))->bit7)write_word(White);else write_word(Black);
        ADD      R0,SP,#+0
        LDRB     R0,[R4, R0]
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+7
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??Print_child_2
        MOVW     R0,#+65535
        BL       write_word
        B.N      ??Print_child_3
??Print_child_2:
        MOVS     R0,#+0
        BL       write_word
//  705         if((GET_BITFIELD(child[i]))->bit6)write_word(White);else write_word(Black);
??Print_child_3:
        ADD      R0,SP,#+0
        LDRB     R0,[R4, R0]
        UBFX     R0,R0,#+6,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??Print_child_4
        MOVW     R0,#+65535
        BL       write_word
        B.N      ??Print_child_5
??Print_child_4:
        MOVS     R0,#+0
        BL       write_word
//  706         if((GET_BITFIELD(child[i]))->bit5)write_word(White);else write_word(Black);
??Print_child_5:
        ADD      R0,SP,#+0
        LDRB     R0,[R4, R0]
        UBFX     R0,R0,#+5,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??Print_child_6
        MOVW     R0,#+65535
        BL       write_word
        B.N      ??Print_child_7
??Print_child_6:
        MOVS     R0,#+0
        BL       write_word
//  707         if((GET_BITFIELD(child[i]))->bit4)write_word(White);else write_word(Black);
??Print_child_7:
        ADD      R0,SP,#+0
        LDRB     R0,[R4, R0]
        UBFX     R0,R0,#+4,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??Print_child_8
        MOVW     R0,#+65535
        BL       write_word
        B.N      ??Print_child_9
??Print_child_8:
        MOVS     R0,#+0
        BL       write_word
//  708         if((GET_BITFIELD(child[i]))->bit3)write_word(White);else write_word(Black);
??Print_child_9:
        ADD      R0,SP,#+0
        LDRB     R0,[R4, R0]
        UBFX     R0,R0,#+3,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??Print_child_10
        MOVW     R0,#+65535
        BL       write_word
        B.N      ??Print_child_11
??Print_child_10:
        MOVS     R0,#+0
        BL       write_word
//  709         if((GET_BITFIELD(child[i]))->bit2)write_word(White);else write_word(Black);
??Print_child_11:
        ADD      R0,SP,#+0
        LDRB     R0,[R4, R0]
        UBFX     R0,R0,#+2,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??Print_child_12
        MOVW     R0,#+65535
        BL       write_word
        B.N      ??Print_child_13
??Print_child_12:
        MOVS     R0,#+0
        BL       write_word
//  710         if((GET_BITFIELD(child[i]))->bit1)write_word(White);else write_word(Black);
??Print_child_13:
        ADD      R0,SP,#+0
        LDRB     R0,[R4, R0]
        UBFX     R0,R0,#+1,#+1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+0
        BEQ.N    ??Print_child_14
        MOVW     R0,#+65535
        BL       write_word
        B.N      ??Print_child_15
??Print_child_14:
        MOVS     R0,#+0
        BL       write_word
//  711         if((GET_BITFIELD(child[i]))->bit0)write_word(White);else write_word(Black);
??Print_child_15:
        ADD      R0,SP,#+0
        LDRB     R0,[R4, R0]
        ANDS     R0,R0,#0x1
        CMP      R0,#+0
        BEQ.N    ??Print_child_16
        MOVW     R0,#+65535
        BL       write_word
        B.N      ??Print_child_17
??Print_child_16:
        MOVS     R0,#+0
        BL       write_word
//  712     }
??Print_child_17:
        ADDS     R4,R4,#+1
        B.N      ??Print_child_0
//  713 }
??Print_child_1:
        ADD      SP,SP,#+6400
        POP      {R4,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11:
        DC32     0x42c80000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_1:
        DC32     0x447a0000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_2:
        DC32     Font8x16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_3:
        DC32     codeGB_16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_4:
        DC32     codeGB_32

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_5:
        DC32     0x186a0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_6:
        DC32     ?_0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_0:
        DATA
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 240, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 240, 60, 127, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254
        DC8 240, 60, 31, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 252, 120, 124, 15, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 248, 120, 124, 31, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 224, 56, 120, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 240, 60, 120, 60, 127, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 248, 28, 120
        DC8 124, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 254, 28, 120, 248, 63, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 14, 113, 240, 31, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 142, 113, 224, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 198, 115, 192, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 243, 119
        DC8 135, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 251, 239, 31, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 127, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 252, 63, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 252, 3, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 252, 193, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 248, 241
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 248, 19, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 248, 3, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 248, 3, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 240, 3, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 7, 255
        DC8 255, 255, 255, 131, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 240, 7, 255, 255, 255, 255, 131, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 240, 7, 255, 255, 255, 255
        DC8 131, 223, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 224, 7, 255, 255, 255, 255, 131, 143, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 248, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 252, 0, 0, 15, 255, 255, 255, 255, 135, 135, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 128, 0, 0, 15, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 192, 0, 0, 15, 255, 255, 255, 255
        DC8 135, 129, 255, 255, 255, 255, 255, 255, 255, 252, 3, 255, 248, 1
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 0, 0, 0, 15, 255
        DC8 255, 255, 255, 135, 3, 255, 255, 255, 255, 255, 255, 255, 240, 63
        DC8 255, 255, 192, 127, 255, 255, 255, 255, 255, 255, 255, 255, 240, 0
        DC8 0, 0, 1, 255, 255, 255, 255, 135, 7, 255, 255, 255, 255, 255, 255
        DC8 255, 193, 255, 255, 255, 248, 31, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 192, 0, 0, 0, 0, 127, 255, 255, 255, 206, 15, 255, 255, 255
        DC8 255, 255, 255, 255, 7, 255, 255, 255, 255, 7, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 128, 0, 0, 0, 0, 31, 255, 255, 255, 206, 31
        DC8 255, 255, 255, 255, 255, 255, 254, 15, 255, 255, 255, 255, 193, 255
        DC8 255, 255, 255, 255, 255, 255, 254, 0, 0, 0, 0, 0, 7, 255, 255, 255
        DC8 204, 63, 191, 255, 255, 255, 255, 255, 252, 63, 255, 255, 255, 255
        DC8 240, 255, 255, 255, 255, 255, 255, 255, 252, 0, 0, 0, 0, 0, 3, 255
        DC8 255, 255, 220, 254, 31, 255, 255, 255, 255, 255, 240, 127, 255, 255
        DC8 255, 255, 248, 63, 255, 255, 255, 255, 255, 255, 240, 0, 0, 0, 0, 0
        DC8 0, 255, 255, 255, 217, 252, 31, 255, 255, 255, 255, 255, 225, 255
        DC8 255, 255, 255, 255, 254, 31, 255, 255, 255, 255, 255, 255, 224, 0
        DC8 0, 0, 0, 0, 0, 127, 255, 255, 251, 240, 31, 255, 255, 255, 255, 255
        DC8 195, 255, 255, 255, 255, 255, 255, 15, 255, 255, 255, 255, 255, 255
        DC8 192, 0, 0, 0, 0, 0, 0, 63, 255, 255, 255, 224, 15, 255, 255, 255
        DC8 255, 255, 135, 255, 255, 255, 255, 248, 63, 199, 255, 255, 255, 255
        DC8 255, 255, 128, 0, 0, 0, 0, 0, 0, 31, 255, 255, 191, 128, 31, 255
        DC8 255, 255, 255, 255, 15, 255, 255, 255, 255, 255, 15, 227, 255, 255
        DC8 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 15, 255, 254, 30, 7, 255
        DC8 255, 255, 255, 255, 254, 31, 255, 255, 255, 255, 255, 199, 241, 255
        DC8 255, 255, 255, 255, 254, 0, 0, 0, 0, 0, 0, 0, 7, 255, 248, 31, 255
        DC8 255, 255, 255, 255, 255, 252, 63, 255, 255, 255, 255, 255, 243, 248
        DC8 255, 255, 255, 255, 255, 252, 0, 0, 0, 0, 0, 0, 0, 3, 255, 240, 143
        DC8 255, 255, 255, 255, 255, 255, 252, 127, 255, 255, 255, 255, 255
        DC8 241, 248, 127, 255, 255, 255, 255, 248, 0, 0, 0, 0, 0, 0, 0, 1, 255
        DC8 192, 207, 255, 247, 255, 255, 255, 255, 248, 127, 255, 255, 255
        DC8 255, 255, 248, 252, 63, 255, 255, 255, 255, 248, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 255, 128, 103, 0, 7, 255, 255, 255, 255, 240, 255, 255, 255
        DC8 255, 255, 255, 252, 254, 31, 255, 255, 255, 255, 241, 128, 0, 0, 0
        DC8 0, 0, 0, 0, 126, 0, 35, 224, 7, 255, 255, 255, 255, 225, 255, 255
        DC8 255, 255, 255, 255, 254, 127, 31, 255, 255, 255, 255, 243, 192, 0
        DC8 0, 0, 0, 0, 0, 0, 120, 0, 3, 248, 7, 255, 255, 255, 255, 225, 255
        DC8 255, 255, 255, 255, 255, 254, 127, 15, 255, 255, 255, 255, 227, 224
        DC8 0, 0, 0, 0, 0, 0, 0, 48, 0, 15, 255, 7, 255, 255, 255, 255, 195
        DC8 255, 255, 255, 255, 255, 255, 254, 127, 143, 255, 255, 255, 255
        DC8 199, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 255, 231, 255, 255, 255
        DC8 255, 135, 255, 255, 255, 255, 255, 255, 254, 127, 135, 255, 255
        DC8 255, 255, 199, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 255, 255, 255
        DC8 255, 255, 255, 135, 255, 255, 255, 255, 255, 255, 254, 63, 199, 255
        DC8 255, 255, 255, 143, 252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255
        DC8 255, 255, 255, 255, 15, 255, 255, 255, 255, 255, 255, 254, 63, 195
        DC8 255, 255, 255, 255, 143, 254, 0, 0, 0, 0, 0, 0, 0, 8, 3, 255, 255
        DC8 255, 255, 255, 255, 255, 15, 255, 255, 255, 255, 255, 255, 254, 63
        DC8 227, 255, 255, 255, 255, 159, 255, 0, 0, 0, 0, 0, 0, 0, 0, 15, 255
        DC8 255, 255, 255, 255, 255, 254, 31, 255, 255, 255, 255, 255, 255, 254
        DC8 127, 225, 255, 255, 255, 255, 31, 255, 128, 0, 0, 0, 0, 0, 0, 4, 31
        DC8 255, 255, 255, 255, 255, 255, 254, 31, 255, 255, 255, 255, 255, 255
        DC8 252, 127, 241, 255, 255, 255, 255, 31, 255, 192, 0, 0, 0, 0, 0, 0
        DC8 0, 127, 255, 255, 255, 255, 255, 255, 252, 63, 255, 255, 255, 255
        DC8 255, 255, 252, 255, 241, 255, 255, 255, 255, 63, 255, 224, 0, 0, 0
        DC8 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 252, 63, 255, 255
        DC8 255, 255, 255, 255, 248, 255, 240, 255, 255, 255, 254, 60, 63, 240
        DC8 0, 0, 0, 0, 0, 0, 3, 255, 255, 255, 255, 255, 255, 255, 252, 127
        DC8 255, 255, 255, 255, 255, 255, 241, 255, 248, 255, 255, 255, 254, 62
        DC8 15, 248, 0, 0, 0, 0, 0, 0, 3, 255, 255, 255, 255, 255, 255, 255
        DC8 248, 127, 255, 255, 255, 255, 255, 255, 199, 255, 248, 255, 255
        DC8 255, 254, 63, 135, 252, 0, 0, 0, 0, 0, 0, 3, 255, 255, 255, 255
        DC8 255, 255, 255, 248, 127, 255, 255, 255, 253, 255, 255, 159, 255
        DC8 248, 255, 255, 255, 254, 63, 195, 254, 0, 0, 0, 0, 0, 0, 1, 255
        DC8 255, 255, 255, 255, 255, 255, 248, 255, 255, 255, 255, 240, 255
        DC8 255, 255, 255, 248, 127, 255, 255, 252, 127, 225, 255, 0, 0, 0, 0
        DC8 0, 0, 1, 255, 255, 255, 255, 255, 255, 255, 248, 255, 255, 255, 255
        DC8 224, 255, 255, 255, 143, 248, 127, 255, 255, 252, 127, 241, 255
        DC8 128, 0, 0, 0, 0, 0, 1, 255, 255, 255, 255, 255, 255, 255, 248, 255
        DC8 255, 255, 255, 193, 255, 255, 255, 15, 248, 127, 255, 255, 252, 127
        DC8 255, 255, 192, 0, 0, 0, 0, 0, 1, 255, 255, 255, 255, 255, 255, 255
        DC8 240, 255, 255, 255, 255, 131, 255, 255, 255, 135, 248, 127, 255
        DC8 255, 252, 127, 255, 255, 224, 0, 0, 0, 0, 0, 1, 255, 255, 255, 255
        DC8 255, 255, 255, 240, 255, 255, 255, 255, 135, 255, 255, 255, 131
        DC8 252, 127, 255, 255, 252, 127, 255, 255, 248, 0, 0, 0, 0, 0, 1, 255
        DC8 255, 255, 255, 255, 255, 255, 241, 255, 255, 255, 255, 15, 255, 255
        DC8 255, 195, 252, 127, 255, 255, 252, 127, 255, 255, 252, 0, 0, 0, 0
        DC8 0, 1, 255, 255, 255, 255, 255, 255, 255, 241, 255, 255, 255, 255
        DC8 191, 255, 255, 255, 227, 252, 127, 255, 255, 252, 127, 255, 255
        DC8 254, 0, 0, 0, 0, 0, 1, 255, 255, 255, 255, 255, 255, 255, 241, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 243, 248, 127, 255, 255, 252
        DC8 127, 255, 255, 255, 0, 0, 0, 0, 0, 1, 255, 255, 255, 255, 255, 255
        DC8 255, 241, 255, 255, 255, 255, 255, 255, 255, 255, 255, 248, 255
        DC8 255, 255, 252, 127, 255, 255, 255, 128, 0, 0, 0, 0, 1, 255, 255
        DC8 255, 255, 255, 255, 255, 241, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 248, 255, 255, 255, 252, 127, 255, 255, 255, 192, 0, 0, 0
        DC8 0, 1, 255, 255, 255, 255, 255, 255, 255, 241, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 248, 255, 255, 255, 252, 127, 255, 255
        DC8 255, 224, 0, 0, 0, 0, 1, 255, 255, 255, 255, 255, 255, 255, 241
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 248, 255, 255, 255
        DC8 252, 127, 255, 255, 255, 240, 0, 0, 0, 0, 1, 255, 255, 255, 255
        DC8 255, 255, 255, 241, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 248, 255, 255, 255, 254, 127, 255, 255, 255, 248, 0, 0, 0, 0, 1
        DC8 255, 255, 255, 255, 255, 255, 255, 241, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 248, 255, 255, 255, 254, 127, 255, 255, 255
        DC8 252, 0, 0, 0, 0, 1, 255, 255, 255, 255, 255, 255, 255, 249, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 249, 255, 255, 255, 254
        DC8 127, 255, 255, 255, 254, 0, 0, 0, 0, 3, 255, 255, 255, 255, 255
        DC8 255, 255, 249, 255, 255, 255, 255, 255, 255, 255, 255, 255, 241
        DC8 255, 255, 255, 254, 127, 255, 255, 255, 254, 0, 0, 0, 0, 3, 255
        DC8 255, 255, 255, 255, 255, 255, 249, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 241, 255, 255, 255, 254, 127, 255, 255, 255, 254, 1
        DC8 240, 0, 0, 3, 255, 255, 255, 255, 255, 255, 255, 249, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 241, 255, 255, 255, 254, 63, 255, 255
        DC8 255, 255, 15, 240, 0, 0, 3, 255, 255, 255, 255, 255, 255, 255, 249
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 243, 255, 255, 255
        DC8 254, 63, 255, 255, 255, 255, 31, 248, 0, 0, 7, 255, 255, 255, 255
        DC8 255, 255, 255, 248, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 227, 255, 255, 255, 255, 63, 255, 255, 255, 255, 31, 248, 0, 0, 7
        DC8 255, 255, 255, 255, 255, 255, 255, 252, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 227, 255, 255, 255, 255, 63, 255, 255, 255, 255
        DC8 31, 248, 0, 0, 7, 255, 255, 255, 255, 255, 255, 255, 252, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 231, 255, 255, 255, 255, 62, 127
        DC8 255, 255, 255, 31, 240, 0, 0, 7, 255, 255, 255, 255, 255, 255, 255
        DC8 252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 199, 255, 255
        DC8 255, 255, 28, 159, 255, 255, 255, 159, 224, 0, 0, 15, 255, 255, 255
        DC8 255, 255, 255, 255, 252, 127, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 199, 255, 255, 255, 255, 28, 223, 255, 255, 255, 159, 224, 0
        DC8 0, 15, 255, 255, 255, 255, 255, 255, 255, 254, 127, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 143, 255, 255, 255, 255, 24, 31, 255, 255
        DC8 255, 159, 128, 0, 0, 31, 255, 255, 255, 255, 255, 255, 255, 254
        DC8 127, 255, 255, 255, 255, 255, 255, 255, 255, 143, 255, 255, 255
        DC8 255, 156, 31, 255, 255, 255, 159, 32, 0, 0, 31, 255, 255, 255, 255
        DC8 255, 255, 255, 254, 63, 255, 255, 255, 255, 255, 255, 255, 255, 159
        DC8 255, 255, 255, 255, 12, 31, 255, 240, 63, 159, 248, 0, 0, 63, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 63, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 31, 255, 255, 255, 252, 15, 127, 255, 128, 15, 223, 252
        DC8 0, 0, 63, 255, 255, 255, 255, 255, 255, 255, 255, 63, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 63, 255, 255, 255, 252, 31, 255, 255, 32
        DC8 3, 223, 254, 0, 0, 127, 255, 255, 255, 255, 255, 255, 255, 255, 159
        DC8 255, 255, 255, 255, 143, 255, 255, 254, 63, 255, 255, 255, 253, 63
        DC8 255, 254, 224, 1, 223, 255, 0, 0, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 7, 255, 255, 255, 255, 7, 255, 255, 254, 127, 255, 255
        DC8 255, 252, 63, 255, 253, 224, 0, 223, 255, 128, 0, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 254, 1, 255, 255, 255, 255, 7, 252, 63
        DC8 252, 127, 255, 255, 255, 254, 127, 255, 251, 224, 0, 223, 255, 192
        DC8 1, 255, 255, 255, 255, 255, 255, 255, 255, 252, 32, 255, 255, 255
        DC8 255, 7, 248, 63, 248, 31, 255, 255, 255, 254, 127, 255, 247, 224, 0
        DC8 127, 255, 224, 3, 255, 255, 255, 255, 255, 255, 255, 255, 252, 248
        DC8 255, 255, 255, 255, 7, 248, 63, 248, 15, 255, 255, 255, 254, 127
        DC8 255, 231, 224, 14, 127, 255, 240, 7, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 252, 254, 127, 255, 255, 255, 159, 252, 63, 240, 15, 255
        DC8 255, 255, 254, 127, 255, 239, 192, 63, 127, 255, 248, 7, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 248, 254, 127, 255, 176, 255, 255
        DC8 188, 127, 241, 199, 255, 255, 255, 255, 63, 255, 223, 128, 255, 63
        DC8 255, 254, 15, 255, 255, 255, 255, 255, 255, 255, 255, 252, 255, 255
        DC8 255, 239, 127, 252, 3, 255, 99, 199, 255, 255, 255, 255, 63, 255
        DC8 191, 129, 255, 63, 255, 254, 31, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 252, 127, 255, 255, 255, 255, 240, 1, 224, 195, 199, 255, 255
        DC8 255, 255, 31, 255, 63, 3, 255, 127, 255, 252, 63, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 252, 127, 255, 255, 255, 255, 231, 249
        DC8 239, 227, 207, 255, 255, 255, 255, 143, 254, 126, 19, 254, 127, 255
        DC8 248, 127, 255, 255, 255, 255, 255, 255, 255, 255, 254, 63, 255, 255
        DC8 255, 255, 255, 252, 255, 227, 143, 255, 255, 255, 255, 199, 252
        DC8 252, 55, 254, 127, 255, 225, 255, 255, 255, 255, 255, 255, 255, 249
        DC8 255, 230, 8, 127, 255, 255, 255, 255, 253, 255, 241, 31, 255, 255
        DC8 255, 255, 227, 251, 240, 119, 252, 255, 255, 195, 255, 255, 255
        DC8 255, 255, 255, 255, 224, 240, 0, 0, 63, 255, 255, 255, 255, 255
        DC8 255, 240, 63, 255, 255, 255, 255, 241, 199, 224, 255, 241, 255, 255
        DC8 15, 255, 247, 255, 255, 255, 255, 255, 204, 0, 0, 0, 63, 255, 255
        DC8 255, 255, 255, 255, 240, 127, 255, 255, 255, 255, 248, 99, 128, 255
        DC8 227, 255, 252, 31, 255, 255, 255, 255, 255, 255, 254, 31, 15, 255
        DC8 255, 31, 255, 255, 255, 255, 255, 255, 241, 255, 255, 255, 255, 255
        DC8 254, 60, 0, 255, 7, 255, 224, 127, 255, 255, 255, 255, 255, 255
        DC8 252, 31, 159, 255, 255, 135, 255, 255, 255, 255, 255, 255, 243, 255
        DC8 255, 255, 255, 255, 255, 135, 128, 0, 31, 254, 0, 0, 1, 255, 191
        DC8 255, 255, 255, 252, 207, 159, 255, 255, 195, 255, 255, 255, 255
        DC8 255, 255, 227, 255, 255, 255, 255, 255, 255, 224, 248, 3, 255, 224
        DC8 0, 0, 0, 15, 255, 255, 255, 255, 253, 207, 223, 255, 255, 225, 255
        DC8 255, 255, 255, 255, 255, 231, 255, 255, 255, 255, 255, 255, 252, 3
        DC8 255, 248, 0, 127, 255, 224, 0, 123, 255, 255, 255, 252, 227, 255
        DC8 255, 255, 248, 127, 255, 255, 255, 255, 255, 207, 255, 255, 255
        DC8 255, 255, 255, 255, 128, 0, 0, 7, 255, 255, 255, 240, 32, 255, 255
        DC8 255, 252, 15, 255, 255, 255, 252, 63, 255, 255, 255, 255, 255, 143
        DC8 255, 255, 255, 255, 255, 255, 255, 248, 0, 0, 255, 255, 255, 255
        DC8 254, 6, 127, 255, 255, 252, 31, 255, 255, 255, 254, 15, 255, 255
        DC8 143, 255, 255, 31, 255, 255, 255, 255, 255, 255, 255, 248, 128, 127
        DC8 255, 255, 255, 255, 255, 159, 63, 255, 255, 249, 255, 255, 255, 255
        DC8 255, 131, 255, 255, 31, 255, 252, 127, 255, 255, 255, 255, 255, 255
        DC8 255, 227, 0, 127, 255, 255, 255, 255, 255, 63, 15, 255, 255, 253
        DC8 255, 255, 255, 255, 255, 224, 255, 254, 31, 255, 240, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 142, 40, 127, 255, 255, 255, 255, 255, 127
        DC8 39, 255, 255, 252, 63, 255, 255, 255, 255, 248, 31, 252, 63, 255
        DC8 129, 255, 255, 255, 255, 255, 255, 255, 254, 62, 48, 127, 255, 255
        DC8 255, 255, 255, 254, 119, 255, 255, 254, 63, 255, 255, 255, 255, 254
        DC8 1, 254, 127, 252, 7, 255, 255, 255, 255, 255, 255, 255, 248, 124
        DC8 80, 127, 255, 255, 255, 255, 255, 248, 247, 255, 255, 255, 191, 255
        DC8 255, 255, 255, 255, 192, 31, 255, 192, 31, 255, 255, 255, 255, 255
        DC8 255, 255, 225, 248, 192, 127, 255, 255, 255, 255, 255, 254, 71, 255
        DC8 255, 255, 157, 255, 255, 255, 255, 255, 252, 7, 128, 3, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 199, 248, 128, 127, 255, 255, 255
        DC8 255, 255, 255, 15, 255, 255, 255, 139, 247, 255, 255, 255, 255, 247
        DC8 128, 0, 3, 255, 255, 255, 255, 255, 255, 255, 255, 31, 242, 128
        DC8 127, 255, 255, 255, 255, 255, 255, 231, 255, 255, 255, 195, 240, 0
        DC8 0, 1, 255, 243, 252, 127, 225, 255, 255, 255, 255, 255, 255, 255
        DC8 252, 63, 241, 0, 63, 255, 255, 255, 255, 255, 255, 231, 255, 255
        DC8 255, 227, 240, 0, 63, 199, 255, 243, 254, 63, 248, 127, 255, 255
        DC8 255, 255, 255, 255, 240, 255, 224, 0, 63, 255, 152, 31, 255, 255
        DC8 255, 15, 255, 255, 255, 249, 225, 255, 255, 207, 255, 255, 255, 63
        DC8 252, 63, 255, 255, 255, 255, 255, 255, 195, 255, 224, 0, 63, 255
        DC8 159, 128, 31, 255, 255, 31, 255, 255, 255, 252, 7, 255, 255, 143
        DC8 255, 255, 255, 159, 255, 15, 255, 255, 255, 255, 255, 254, 7, 255
        DC8 224, 0, 31, 255, 159, 252, 0, 127, 239, 127, 255, 255, 255, 254, 31
        DC8 255, 255, 159, 255, 255, 255, 143, 255, 135, 255, 255, 255, 255
        DC8 255, 248, 31, 255, 224, 0, 31, 255, 156, 255, 224, 3, 246, 127, 255
        DC8 255, 255, 255, 255, 255, 252, 31, 255, 255, 255, 207, 255, 195, 255
        DC8 255, 255, 255, 255, 241, 255, 255, 192, 0, 15, 255, 144, 127, 255
        DC8 3, 244, 255, 255, 255, 255, 255, 255, 255, 240, 63, 255, 255, 255
        DC8 207, 255, 241, 255, 255, 255, 255, 255, 243, 255, 255, 192, 0, 1
        DC8 255, 135, 127, 255, 243, 227, 255, 255, 255, 255, 255, 255, 255
        DC8 243, 63, 255, 255, 255, 227, 255, 248, 15, 255, 255, 255, 255, 241
        DC8 223, 255, 192, 0, 24, 63, 142, 127, 255, 248, 199, 255, 255, 255
        DC8 255, 255, 255, 255, 246, 63, 255, 255, 255, 224, 255, 252, 7, 255
        DC8 255, 255, 255, 248, 31, 255, 192, 0, 63, 131, 158, 255, 255, 252
        DC8 31, 255, 255, 255, 255, 255, 255, 255, 246, 127, 255, 255, 249, 228
        DC8 63, 254, 39, 255, 255, 255, 255, 248, 63, 255, 128, 0, 127, 240, 13
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 243, 31, 255
        DC8 255, 248, 231, 63, 255, 7, 255, 255, 255, 255, 248, 63, 255, 0, 0
        DC8 255, 255, 1, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 243, 143, 255, 255, 255, 231, 63, 255, 195, 255, 255, 255, 255, 252
        DC8 24, 252, 0, 3, 255, 255, 132, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 251, 243, 227, 255, 255, 255, 207, 63, 255, 251, 255
        DC8 255, 255, 255, 255, 128, 0, 192, 3, 255, 255, 3, 63, 255, 255, 255
        DC8 255, 255, 255, 191, 255, 255, 191, 243, 248, 255, 255, 254, 31, 63
        DC8 255, 251, 255, 255, 255, 255, 255, 198, 3, 192, 7, 255, 255, 1, 63
        DC8 255, 255, 255, 255, 255, 255, 91, 255, 255, 243, 243, 254, 31, 255
        DC8 248, 127, 31, 255, 243, 255, 255, 255, 255, 255, 224, 223, 192, 15
        DC8 255, 255, 36, 191, 255, 255, 255, 255, 255, 255, 175, 255, 255, 143
        DC8 99, 255, 128, 127, 1, 254, 7, 255, 7, 255, 255, 255, 255, 255, 241
        DC8 255, 192, 31, 255, 255, 54, 63, 255, 255, 255, 255, 255, 255, 187
        DC8 255, 254, 252, 145, 255, 248, 0, 7, 254, 97, 248, 31, 255, 255, 255
        DC8 255, 255, 255, 255, 192, 31, 255, 255, 51, 255, 255, 255, 255, 255
        DC8 255, 255, 127, 255, 201, 226, 145, 255, 255, 255, 255, 254, 113
        DC8 225, 255, 255, 255, 255, 255, 255, 255, 159, 224, 63, 255, 255, 63
        DC8 255, 255, 63, 255, 255, 255, 255, 183, 255, 255, 255, 249, 255, 255
        DC8 255, 255, 252, 249, 231, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 224, 127, 255, 255, 63, 255, 255, 179, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 252, 255, 255, 15, 255, 252, 248, 207, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 224, 127, 255, 254, 57, 255, 255, 69, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 252, 255, 248, 0, 255, 248, 252, 15
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 240, 223, 255, 254, 127
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 127
        DC8 243, 252, 63, 240, 254, 31, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 248, 95, 255, 254, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 254, 63, 231, 255, 143, 242, 127, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 248, 31, 255, 252, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 63, 223, 255, 227, 230, 127, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 252, 31, 255, 236, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 159, 159
        DC8 255, 249, 207, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 252, 31, 255, 233, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 207, 63, 255, 252, 31, 63, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 254, 31, 255, 241, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 227, 127, 255, 254, 53, 63, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 31, 255, 243, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 127
        DC8 255, 255, 48, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 159, 255, 247, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 248, 255, 255, 255, 159, 63, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 143, 255, 243, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 254, 127, 255, 255, 159, 63
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 207, 255, 251
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 254, 127, 255, 255, 143, 127, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 239, 255, 249, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 254, 63, 255, 255, 206, 127, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 231, 255, 252, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 63, 255
        DC8 255, 206, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 243, 127, 252, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 159, 255, 255, 206, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 243, 255, 252, 63, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 143, 255, 255, 204
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 249, 255
        DC8 254, 159, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 199, 255, 255, 201, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 253, 255, 254, 79, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 227, 255, 241, 193, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 252, 255, 255, 99, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 241
        DC8 255, 3, 195, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 224, 255, 255, 51, 143, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 243, 255, 255, 135, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 188, 127, 255, 185, 249, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 199, 255, 255, 143
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 188, 63, 255
        DC8 153, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 199, 255, 255, 7, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 188, 159, 255, 204, 255, 127, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 143, 255, 254, 3, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 190, 31, 255, 228, 255, 127, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 31, 255, 254, 1
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 191, 63, 255
        DC8 224, 255, 191, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 63, 255, 252, 192, 127, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 158, 63, 255, 240, 255, 191, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 63, 255, 249, 228, 223, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 158, 127, 255, 251, 255, 223, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 127, 255, 243
        DC8 228, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 142
        DC8 255, 255, 251, 255, 239, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 254, 127, 255, 227, 224, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 206, 31, 248, 0, 7, 239, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 252, 127, 255, 192, 1, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 199, 8, 0, 0, 0, 119
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252, 255, 255
        DC8 192, 3, 223, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 199
        DC8 192, 0, 0, 0, 11, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 252, 255, 255, 224, 143, 223, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 199, 0, 0, 0, 0, 1, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 248, 255, 255, 240, 127, 159, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 192, 0, 64, 0, 0, 0, 127, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 248, 255, 255, 254, 127
        DC8 159, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192, 0, 0, 0
        DC8 0, 0, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 248, 255
        DC8 255, 255, 63, 31, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 192, 0, 0, 0, 0, 0, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 239, 231, 255, 247, 251, 31, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 225, 0, 0, 0, 0, 0, 63, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 239, 255, 254, 31, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 248, 0, 0, 0, 0, 0, 127, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 79, 135, 254, 31, 254, 31, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 254, 0, 0, 0, 0, 3, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 160, 3, 254, 0, 14, 31, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 0, 1, 255, 160, 3
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 208, 0, 0, 0, 0
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 0, 0, 0
        DC8 4, 3, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 0, 64
        DC8 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 0
        DC8 0, 0, 0, 3, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240
        DC8 64, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 254, 3, 255, 255, 255, 131, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 240, 0, 0, 105, 1, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 254, 3, 255, 255, 255, 131, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 248, 127, 255, 255, 129, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 254, 3, 255, 255, 255, 131
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 248, 127, 255
        DC8 255, 129, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 7, 255, 255, 255, 135, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 248, 127, 255, 255, 129, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 7, 255, 255, 255, 135, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 252, 255, 255, 255, 195, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 255, 255, 255, 255

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
//  714 
//  715 
// 
// 4 892 bytes in section .data
// 6 400 bytes in section .rodata
// 4 598 bytes in section .text
// 
// 4 598 bytes of CODE  memory
// 6 400 bytes of CONST memory
// 4 892 bytes of DATA  memory
//
//Errors: none
//Warnings: none
