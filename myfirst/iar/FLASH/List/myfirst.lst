###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        10/Jun/2015  09:06:47
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\app\myfirst.c
#    Command line =  
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\app\myfirst.c
#        -D LPLD_K60 -D USE_K60F12 -D ARM_MATH_CM4 -lCN
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\FLASH\List\
#        -lB
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\FLASH\List\
#        -o
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4F -e --char_is_signed --fpu=VFPv4_sp --dlib_config
#        D:\tools\IAR\iar7_3\arm\INC\c\DLib_Config_Normal.h -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\app\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\CPU\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\common\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\LPLD\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\LPLD\HW\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\FatFs\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\FatFs\option\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\USB\common\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\USB\driver\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\USB\descriptor\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\USB\class\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\dsp\
#        -I
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\..\..\..\lib\MyDrive\
#        -On -I D:\tools\IAR\iar7_3\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\FLASH\List\myfirst.lst
#    Object file  =  
#        D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\iar\FLASH\Obj\myfirst.o
#
###############################################################################

D:\tools\IAR\lapulande\%5B拉普兰德K60固件库%5DLPLD_OSKinetis_V3.10\LPLD_OSKinetis_V3\project\myfirst\app\myfirst.c
      1          /**
      2          * --------------基于"拉普兰德K60底层库V3"的工程（myfirst）-----------------
      3          * @file myfirst.c
      4          * @version 0.0
      5          * @date 2013-9-29
      6          * @brief 关于该工程的描述
      7          *
      8          * 版权所有:北京拉普兰德电子技术有限公司
      9          * http://www.lpld.cn
     10          * mail:support@lpld.cn
     11          * 硬件平台:  LPLD K60 Card / LPLD K60 Nano
     12          *
     13          * 本工程基于"拉普兰德K60底层库V3"开发，
     14          * 所有开源代码均在"lib"文件夹下，用户不必更改该目录下代码，
     15          * 所有用户工程需保存在"project"文件夹下，以工程名定义文件夹名，
     16          * 底层库使用方法见相关文档。 
     17          *
     18          */
     19          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable11  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0943             LSRS     R3,R0,#+5
   \   00000010   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
     20          #include "arm_math.h"
     21          #include "arm_const_structs.h"
     22          

   \                                 In section .bss, align 4
     23          ADC_InitTypeDef adc0_init_struct;
   \                     adc0_init_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     24          DMA_InitTypeDef dma_init_struct;
   \                     dma_init_struct:
   \   00000000                      DS8 44

   \                                 In section .bss, align 4
     25          DMA_InitTypeDef dma2_init_struct;
   \                     dma2_init_struct:
   \   00000000                      DS8 44

   \                                 In section .bss, align 4
     26          PDB_InitTypeDef pdb_init_struct;
   \                     pdb_init_struct:
   \   00000000                      DS8 40

   \                                 In section .bss, align 4
     27          PIT_InitTypeDef pit0_init_struct;
   \                     pit0_init_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     28          DAC_InitTypeDef dac0_init_struct;
   \                     dac0_init_struct:
   \   00000000                      DS8 28

   \                                 In section .bss, align 4
     29          GPIO_InitTypeDef gpio_init_struct;
   \                     gpio_init_struct:
   \   00000000                      DS8 20
     30          
     31          #define LENGTH 2048
     32          #define MY_SAMPLE_TIME 25       //25us
     33          #define OFFEST  2547 
     34          #define FFT_VALUE 666   //显示用的
     35          
     36          /*FFT参数*/

   \                                 In section .bss, align 4
     37          float32_t testInput_x[LENGTH*2];  
   \                     testInput_x:
   \   00000000                      DS8 16384

   \                                 In section .data, align 4
     38          uint32_t fftSize = LENGTH;
   \                     fftSize:
   \   00000000   0x00000800         DC32 2048

   \                                 In section .bss, align 4
     39          uint32_t ifftFlag = 0;
   \                     ifftFlag:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     40          uint32_t doBitReverse = 1;              //fft
   \                     doBitReverse:
   \   00000000   0x00000001         DC32 1

   \                                 In section .bss, align 4
     41          static float32_t testOutput[LENGTH];
   \                     testOutput:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
     42          float32_t maxValue;
   \                     maxValue:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     43          uint32_t testIndex = 0;
   \                     testIndex:
   \   00000000                      DS8 4
     44          /*FIR参数*/
     45          #define TEST_LENGTH_SAMPLES  LENGTH            //信号长度
     46          #define BLOCK_SIZE            256             //处理数据块大小
     47          #define NUM_TAPS              257
     48          

   \                                 In section .bss, align 4
     49          arm_fir_instance_f32 S;
   \                     S:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     50          float32_t  *inputF32, *outputF32;
   \                     inputF32:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     outputF32:
   \   00000000                      DS8 4
     51          

   \                                 In section .bss, align 4
     52          static float32_t firOutput[TEST_LENGTH_SAMPLES];
   \                     firOutput:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
     53          float32_t firInput[TEST_LENGTH_SAMPLES];
   \                     firInput:
   \   00000000                      DS8 8192
     54          /* -------------------------------------------------------------------
     55          * Declare State buffer of size (numTaps + blockSize - 1)
     56          * ------------------------------------------------------------------- */

   \                                 In section .bss, align 1
     57          uint8 starfir = 0;
   \                     starfir:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     58          static float32_t firStateF32[BLOCK_SIZE + NUM_TAPS - 1];
   \                     firStateF32:
   \   00000000                      DS8 2048
     59          
     60          /* ----------------------------------------------------------------------
     61          ** FIR Coefficients buffer generated using fir1() MATLAB function.
     62          ** fir1(28, 5/20)
     63          ** 深度28阶 采样率20*2 = 40；截止频率5
     64          ** ------------------------------------------------------------------- */
     65          
     66          //const float32_t firCoeffs32[NUM_TAPS] = {
     67          //  -0.00182252303876500f,	-0.00158792937657900f,	0.0f,	0.00369775082778883f,	0.00807543026333160f,
     68          //  0.00853022168344206f,	0.0f,	-0.0173976983943204f,	-0.0341458607045117f,	-0.0333591564739013f,	0.0f,
     69          //  0.0676308394716027f,	0.152206183469855f,	0.222924695624960f,	0.250496093294194f,	0.222924695624960f,
     70          //  0.152206183469855f,	0.0676308394716027f,	0.0f,	-0.0333591564739013f,	-0.0341458607045117f,	-0.0173976983943204f,
     71          //  0.0f,	0.00853022168344206f,	0.00807543026333160f,	0.00369775082778883f,	1.22600883254452e-18	-0.00158792937657890f,
     72          //  -0.00182252303876478f
     73          //};
     74          ///*深度28阶 采样率20*2 = 40；截止频率1k*/
     75          //const float32_t firCoeffs32[NUM_TAPS] = {
     76          //0.00220147550354879,	0.00298751607525626,	0.00473861040595637,	0.00771179992273451,
     77          //0.0120572664060801,	0.0177901016003866,	0.0247758165611018,	0.0327318735909219,
     78          //0.0412457205147427,	0.0498079016934013,	0.0578570401047242,	0.0648320458621942,
     79          //0.0702259860802637,	0.0736357657109149,	0.0748021599355456,	0.0736357657109149,
     80          //0.0702259860802637,	0.0648320458621942,	0.0578570401047242,	0.0498079016934013,
     81          //0.0412457205147427,	0.0327318735909219,	0.0247758165611018,	0.0177901016003866,
     82          //0.0120572664060801,	0.00771179992273451,	0.00473861040595637,	0.00298751607525626,
     83          //0.00220147550354879
     84          //};
     85          //const float32_t firCoeffs32[NUM_TAPS] = {
     86          //0.00522779451474040,	0.00598812205124778,	0.00822226545230521,	0.0118224027698896,
     87          //0.0166112315520419,	0.0223508387611049,	0.0287546727786943,	0.0355020112015747,
     88          //0.0422541893107746,	0.0486717628583401,	0.0544317299159395,	0.0592439325388307,
     89          //0.0628658001712345,	0.0651146809751320,	0.0658771302963001,	0.0651146809751320,
     90          //0.0628658001712345,	0.0592439325388307,	0.0544317299159395,	0.0486717628583401,
     91          //0.0422541893107746,	0.0355020112015747,	0.0287546727786943,	0.0223508387611049,
     92          //0.0166112315520419,	0.0118224027698896,	0.00822226545230521,	0.00598812205124778,
     93          //0.00522779451474040
     94          //};
     95          //const float32_t firCoeffs32[NUM_TAPS] = {
     96          //  -0.0018225230f, -0.0015879294f, +0.0000000000f, +0.0036977508f, +0.0080754303f, +0.0085302217f, -0.0000000000f, -0.0173976984f,
     97          //  -0.0341458607f, -0.0333591565f, +0.0000000000f, +0.0676308395f, +0.1522061835f, +0.2229246956f, +0.2504960933f, +0.2229246956f,
     98          //  +0.1522061835f, +0.0676308395f, +0.0000000000f, -0.0333591565f, -0.0341458607f, -0.0173976984f, -0.0000000000f, +0.0085302217f,
     99          //  +0.0080754303f, +0.0036977508f, +0.0000000000f, -0.0015879294f, -0.0018225230f
    100          //};
    101          //const float32_t firCoeffs32[NUM_TAPS]  = {
    102          //-0.00182252303876478,	-0.00158792937657890,	0,	0.00369775082778883,
    103          //0.00807543026333160,	0.00853022168344206,	0,	-0.0173976983943204,
    104          //-0.0341458607045117,	-0.0333591564739013,	0,	0.0676308394716027,
    105          //0.152206183469855,	0.222924695624960,	0.250496093294194,	0.222924695624960,
    106          //0.152206183469855,	0.0676308394716027,	0,	-0.0333591564739013,
    107          //-0.0341458607045117,	-0.0173976983943204,	0,	0.00853022168344206,
    108          //0.00807543026333160,	0.00369775082778883,	0,	-0.00158792937657890,
    109          //-0.00182252303876478
    110          //};
    111          //const float32_t firCoeffs32[NUM_TAPS]  = {
    112          //0.000098596334444907250140442689367859, -0.00010284039200871093115534360418195, -0.00032178871001964934675521057272363, 
    113          //-0.0005559248141126732836725388153809, -0.00079421237640128804560757380670566, -0.0010135039109662302009295942184508, 
    114          //-0.0011777273518818914040812151355908, -0.0012404165774539744390020379327666, -0.001150775449605638675251717550907, 
    115          //-0.00086279511887951210527547551976113, -0.000346278773738184898842856762613, 0.00040192114350394263222465696117069,
    116          //0.0013484785918355533980428351270575, 0.0024180432516182170758767266960376, 0.0034933284500921666336503701444371,
    117          //0.0044219870029839408384630949910843, 0.0050305499284727245301596099125163, 0.005144674854390664242576036713217,
    118          //0.0046139054913954457778912932042203, 0.0033382311300652156398072190057746, 0.0012930993122895228283203428176762, 
    119          //-0.0014507084272266290627534379709118, -0.0047157083585034160685967030701704, -0.0082175305238515860412062963291646, 
    120          //-0.011577479060157439688660829801847, -0.014347970703167359229901478556712, -0.016049410504061771554074056211903,
    121          //-0.016215532123844137585289004732658, -0.01444293947082527299063947623381, -0.010439715548011286108676110018223, 
    122          //-0.0040676483194113594379914822241062, 0.0046270656454689878048225359918888, 0.015398843837435364709231855329108, 
    123          //0.027806192006785711290373086512773, 0.041234483494531445901820632116141, 0.054936837849884734286121101831668, 
    124          //0.068089880704201397043640042738843, 0.079859438871696622475049309741735, 0.089469990393412232587699861596775, 
    125          //0.096271104549776137515593177340634, 0.099794253669843333010014418960054, 0.099794253669843333010014418960054,
    126          //0.096271104549776137515593177340634, 0.089469990393412232587699861596775, 0.079859438871696622475049309741735, 
    127          //0.068089880704201397043640042738843, 0.054936837849884734286121101831668, 0.041234483494531445901820632116141, 
    128          //0.027806192006785711290373086512773, 0.015398843837435364709231855329108, 0.0046270656454689878048225359918888,
    129          //-0.0040676483194113594379914822241062, -0.010439715548011286108676110018223, -0.01444293947082527299063947623381,
    130          //-0.016215532123844137585289004732658, -0.016049410504061771554074056211903, -0.014347970703167359229901478556712,
    131          //-0.011577479060157439688660829801847, -0.0082175305238515860412062963291646, -0.0047157083585034160685967030701704,
    132          //-0.0014507084272266290627534379709118, 0.0012930993122895228283203428176762, 0.0033382311300652156398072190057746, 
    133          //0.0046139054913954457778912932042203, 0.005144674854390664242576036713217, 0.0050305499284727245301596099125163,
    134          //0.0044219870029839408384630949910843, 0.0034933284500921666336503701444371, 0.0024180432516182170758767266960376, 
    135          //0.0013484785918355533980428351270575, 0.00040192114350394263222465696117069, -0.000346278773738184898842856762613, 
    136          //-0.00086279511887951210527547551976113, -0.001150775449605638675251717550907, -0.0012404165774539744390020379327666,
    137          //-0.0011777273518818914040812151355908, -0.0010135039109662302009295942184508, -0.00079421237640128804560757380670566, 
    138          //-0.0005559248141126732836725388153809, -0.00032178871001964934675521057272363, -0.00010284039200871093115534360418195,
    139          //0.000098596334444907250140442689367859
    140          //};
    141          //const float32_t firCoeffs32[NUM_TAPS]=
    142          //{-0.00056259572171827969266910685064431, 0.00035092932135704989855470858906017, 0.0019593914651300464550842672650788, 0.0046545163372522808248321624091659, 0.0080669005924457904549429443363806, 0.010737353065432667792444831889043, 0.01024467498961919437183709646888, 0.0038448577000617079578448365140275, -0.010540506066670323609413273402424, -0.033323920874500208288981895066172, -0.062632781729253225733167198541196, -0.094367127873070930088594820972503, -0.12300732524437903159242324591105, -0.14297528771589021467924851549469, 0.85078712335093620300341399342869, -0.14297528771589021467924851549469, -0.12300732524437903159242324591105, -0.094367127873070930088594820972503, -0.062632781729253225733167198541196, -0.033323920874500208288981895066172, -0.010540506066670323609413273402424, 0.0038448577000617079578448365140275, 0.01024467498961919437183709646888, 0.010737353065432667792444831889043, 0.0080669005924457904549429443363806, 0.0046545163372522808248321624091659, 0.0019593914651300464550842672650788, 0.00035092932135704989855470858906017, -0.00056259572171827969266910685064431}
    143          //;
    144          //const float32_t firCoeffs32[NUM_TAPS]=
    145          //{
    146          // -0.0002335705967647545031138506255175, -0.00018453692694678374450027724673618, -0.0001302660797717656931352797622381, -0.00006927917385272641659626352561574, 0.00000000000000000017293100684117755420365103701489, 0.000079050782257657952259433109531983, 0.00016904673343465459684278884289199, 0.00027064335054492733153783112776125, 0.00038377455898802533039784745660938, 0.00050747040030582222722155272265354, 0.00063970804547589703650811721047376, 0.00077730740129696752893639910553247, 0.00091588116002505495609475882901052, 0.001049847209633510657089683348886, 0.0011725089366145212410597054031314, 0.0012762061986839380069158611519242, 0.0013525367226611816496434359535783, 0.0013926445090915711561008194507849, 0.0013875686258361652741094571794633, 0.0013286426791093855839798187901124, 0.0012079323936772959433710861176792, 0.0010186962404262957671702283235504, 0.00075585203531265254123239216710317, 0.00041643099972966333413224027104604, -0.00000000000000000070848505214237909039702798004723, -0.00049096736879379241063475758366508, -0.001050789490028680717159659252502, -0.0016703624039323835236137139048651, -0.0023370474511611848827952186979928, -0.0030346730124679683823774034578946, -0.0037436590166061095921734569458295, -0.0044412689407067927963024267512537, -0.0051019897185625847843559732552876, -0.0056980354482736141411014507696109, -0.0061999662097247231623553531676407, -0.0065774088293527842308261455173124, -0.0067998622304714833111671801191278, -0.0068375662426067764648740521238324, -0.0066624095620893110727966934803135, -0.0062488500907034866260758576572698, -0.0055748192393645619804876112368675, -0.0046225810526579896864163288228156, -0.0033795172403340745410915690882803, -0.0018388104133160924728851437492949, 0.0000000000000000015486187980314379553433264776553, 0.002130611585248406297798950959077, 0.0045397210175858494773937223953908, 0.0072069682227427697696064967658458, 0.01010507122838574800560706989927, 0.013200154654945841017910090897658, 0.016452268901589815752739554000073, 0.019816091143912452354758357842002, 0.023241793472225207028980520362893, 0.026676058057927148209342860241122, 0.030063214326338370818714196275323, 0.033346468907973124407018161718952, 0.036469195785279795440914085702389, 0.039376251670063873444593838257788, 0.04201528032827227254752955332151, 0.044337969368732292607671041650974, 0.046301223948845511568794819368122, 0.047868223903131994212412081424191, 0.049009333912315766745848577556899, 0.049702840407919349208221149183373, 0.049935493823898606524647192372868, 0.049702840407919349208221149183373, 0.049009333912315766745848577556899, 0.047868223903131994212412081424191, 0.046301223948845511568794819368122, 0.044337969368732292607671041650974, 0.04201528032827227254752955332151, 0.039376251670063873444593838257788, 0.036469195785279795440914085702389, 0.033346468907973124407018161718952, 0.030063214326338370818714196275323, 0.026676058057927148209342860241122, 0.023241793472225207028980520362893, 0.019816091143912452354758357842002, 0.016452268901589815752739554000073, 0.013200154654945841017910090897658, 0.01010507122838574800560706989927, 0.0072069682227427697696064967658458, 0.0045397210175858494773937223953908, 0.002130611585248406297798950959077, 0.0000000000000000015486187980314379553433264776553, -0.0018388104133160924728851437492949, -0.0033795172403340745410915690882803, -0.0046225810526579896864163288228156, -0.0055748192393645619804876112368675, -0.0062488500907034866260758576572698, -0.0066624095620893110727966934803135, -0.0068375662426067764648740521238324, -0.0067998622304714833111671801191278, -0.0065774088293527842308261455173124, -0.0061999662097247231623553531676407, -0.0056980354482736141411014507696109, -0.0051019897185625847843559732552876, -0.0044412689407067927963024267512537, -0.0037436590166061095921734569458295, -0.0030346730124679683823774034578946, -0.0023370474511611848827952186979928, -0.0016703624039323835236137139048651, -0.001050789490028680717159659252502, -0.00049096736879379241063475758366508, -0.00000000000000000070848505214237909039702798004723, 0.00041643099972966333413224027104604, 0.00075585203531265254123239216710317, 0.0010186962404262957671702283235504, 0.0012079323936772959433710861176792, 0.0013286426791093855839798187901124, 0.0013875686258361652741094571794633, 0.0013926445090915711561008194507849, 0.0013525367226611816496434359535783, 0.0012762061986839380069158611519242, 0.0011725089366145212410597054031314, 0.001049847209633510657089683348886, 0.00091588116002505495609475882901052, 0.00077730740129696752893639910553247, 0.00063970804547589703650811721047376, 0.00050747040030582222722155272265354, 0.00038377455898802533039784745660938, 0.00027064335054492733153783112776125, 0.00016904673343465459684278884289199, 0.000079050782257657952259433109531983, 0.00000000000000000017293100684117755420365103701489, -0.00006927917385272641659626352561574, -0.0001302660797717656931352797622381, -0.00018453692694678374450027724673618, -0.0002335705967647545031138506255175
    147          //};

   \                                 In section .rodata, align 4
    148          const float32_t firCoeffs32[NUM_TAPS]= 
   \                     firCoeffs32:
   \   00000000   0x39468194         DC32 39468194H, 393BC2EAH, 392CBA54H, 39197C3BH, 390225C3H, 38CDBF5FH
   \              0x393BC2EA   
   \              0x392CBA54   
   \              0x39197C3B   
   \              0x390225C3   
   \              0x38CDBF5F   
   \   00000018   0x388FC3A4         DC32 388FC3A4H, 3815DB48H, 0A04C8959H, 0B8201C2BH, 0B8A40AAEH
   \              0x3815DB48   
   \              0xA04C8959   
   \              0xB8201C2B   
   \              0xB8A40AAE   
   \   0000002C   0xB8FA849A         DC32 0B8FA849AH, 0B928E493H, 0B953F24DH, 0B97D52F6H, 0B991E97EH
   \              0xB928E493   
   \              0xB953F24D   
   \              0xB97D52F6   
   \              0xB991E97E   
   \   00000040   0xB9A3149C         DC32 0B9A3149CH, 0B9B17F1EH, 0B9BC7ABBH, 0B9C35BF6H, 0B9C58030H
   \              0xB9B17F1E   
   \              0xB9BC7ABB   
   \              0xB9C35BF6   
   \              0xB9C58030   
   \   00000054   0xB9C2543A         DC32 0B9C2543AH, 0B9B95B42H, 0B9AA35D0H, 0B994A892H, 0B9714566H
   \              0xB9B95B42   
   \              0xB9AA35D0   
   \              0xB994A892   
   \              0xB9714566   
   \   00000068   0xB92C86E1         DC32 0B92C86E1H, 0B8B77A95H, 20D44AEDH, 38CA4D5DH, 3951B9C2H, 39A1A6DCH
   \              0xB8B77A95   
   \              0x20D44AED   
   \              0x38CA4D5D   
   \              0x3951B9C2   
   \              0x39A1A6DC   
   \   00000080   0x39DB886D         DC32 39DB886DH, 3A0A75EEH, 3A260B77H, 3A3F9A9FH, 3A56322DH, 3A68E0BFH
   \              0x3A0A75EE   
   \              0x3A260B77   
   \              0x3A3F9A9F   
   \              0x3A56322D   
   \              0x3A68E0BF   
   \   00000098   0x3A76BC41         DC32 3A76BC41H, 3A7EE9D8H, 3A8052FDH, 3A7B4C82H, 3A6E606FH, 3A599318H
   \              0x3A7EE9D8   
   \              0x3A8052FD   
   \              0x3A7B4C82   
   \              0x3A6E606F   
   \              0x3A599318   
   \   000000B0   0x3A3CCA80         DC32 3A3CCA80H, 3A18268EH, 39D809DCH, 39640D4EH, 0A1517E1BH, 0B9779E98H
   \              0x3A18268E   
   \              0x39D809DC   
   \              0x39640D4E   
   \              0xA1517E1B   
   \              0xB9779E98   
   \   000000C8   0xB9FEB4F9         DC32 0B9FEB4F9H, 0BA42C91BH, 0BA833AA8H, 0BAA43DC7H, 0BAC36F11H
   \              0xBA42C91B   
   \              0xBA833AA8   
   \              0xBAA43DC7   
   \              0xBAC36F11   
   \   000000DC   0xBADFC901         DC32 0BADFC901H, 0BAF84675H, 0BB05F51CH, 0BB0CE36CH, 0BB10834DH
   \              0xBAF84675   
   \              0xBB05F51C   
   \              0xBB0CE36C   
   \              0xBB10834D   
   \   000000F0   0xBB1079A4         DC32 0BB1079A4H, 0BB0C7ECDH, 0BB046209H, 0BAF018F8H, 0BACF074CH
   \              0xBB0C7ECD   
   \              0xBB046209   
   \              0xBAF018F8   
   \              0xBACF074C   
   \   00000104   0xBAA5D672         DC32 0BAA5D672H, 0BA6A18D3H, 0B9F5B9D2H, 21A8622AH, 3A04006DH
   \              0xBA6A18D3   
   \              0xB9F5B9D2   
   \              0x21A8622A   
   \              0x3A04006D   
   \   00000118   0x3A871CCC         DC32 3A871CCCH, 3ACDB02CH, 3B09F65FH, 3B2BF353H, 3B4BCF7CH, 3B68880EH
   \              0x3ACDB02C   
   \              0x3B09F65F   
   \              0x3B2BF353   
   \              0x3B4BCF7C   
   \              0x3B68880E   
   \   00000130   0x3B808EC8         DC32 3B808EC8H, 3B8A4D6EH, 3B910E22H, 3B946B58H, 3B940F44H, 3B8FB721H
   \              0x3B8A4D6E   
   \              0x3B910E22   
   \              0x3B946B58   
   \              0x3B940F44   
   \              0x3B8FB721   
   \   00000148   0x3B873625         DC32 3B873625H, 3B74F039H, 3B53070FH, 3B28F664H, 3AEE7CBAH, 3A7A6939H
   \              0x3B74F039   
   \              0x3B53070F   
   \              0x3B28F664   
   \              0x3AEE7CBA   
   \              0x3A7A6939   
   \   00000160   0xA1E4F4CD         DC32 0A1E4F4CDH, 0BA86C50AH, 0BB0A2A99H, 0BB52C604H, 0BB8DBCB6H
   \              0xBA86C50A   
   \              0xBB0A2A99   
   \              0xBB52C604   
   \              0xBB8DBCB6   
   \   00000174   0xBBB13402         DC32 0BBB13402H, 0BBD2CE2EH, 0BBF18919H, 0BC063041H, 0BC1129C9H
   \              0xBBD2CE2E   
   \              0xBBF18919   
   \              0xBC063041   
   \              0xBC1129C9   
   \   00000188   0xBC193552         DC32 0BC193552H, 0BC1DDE7EH, 0BC1EBB3AH, 0BC1B6E78H, 0BC13AAB6H
   \              0xBC1DDE7E   
   \              0xBC1EBB3A   
   \              0xBC1B6E78   
   \              0xBC13AAB6   
   \   0000019C   0xBC07344A         DC32 0BC07344AH, 0BBEBC6BEH, 0BBBF4B2DH, 0BB88FE87H, 0BB1230CEH
   \              0xBBEBC6BE   
   \              0xBBBF4B2D   
   \              0xBB88FE87   
   \              0xBB1230CE   
   \   000001B0   0x2208147A         DC32 2208147AH, 3B23687CH, 3BAB3FFEH, 3C05D9AEH, 3C38FB19H, 3C6E6624H
   \              0x3B23687C   
   \              0x3BAB3FFE   
   \              0x3C05D9AE   
   \              0x3C38FB19   
   \              0x3C6E6624   
   \   000001C8   0x3C92B698         DC32 3C92B698H, 3CAEAB01H, 3CCAAE79H, 3CE65C32H, 3D00A71AH, 3D0D8F9FH
   \              0x3CAEAB01   
   \              0x3CCAAE79   
   \              0x3CE65C32   
   \              0x3D00A71A   
   \              0x3D0D8F9F   
   \   000001E0   0x3D19B653         DC32 3D19B653H, 3D24EC1CH, 3D2F04FEH, 3D37D8F5H, 3D3F44BAH, 3D452A72H
   \              0x3D24EC1C   
   \              0x3D2F04FE   
   \              0x3D37D8F5   
   \              0x3D3F44BA   
   \              0x3D452A72   
   \   000001F8   0x3D497243         DC32 3D497243H, 3D4C0ACDH, 3D4CE97FH, 3D4C0ACDH, 3D497243H, 3D452A72H
   \              0x3D4C0ACD   
   \              0x3D4CE97F   
   \              0x3D4C0ACD   
   \              0x3D497243   
   \              0x3D452A72   
   \   00000210   0x3D3F44BA         DC32 3D3F44BAH, 3D37D8F5H, 3D2F04FEH, 3D24EC1CH, 3D19B653H, 3D0D8F9FH
   \              0x3D37D8F5   
   \              0x3D2F04FE   
   \              0x3D24EC1C   
   \              0x3D19B653   
   \              0x3D0D8F9F   
   \   00000228   0x3D00A71A         DC32 3D00A71AH, 3CE65C32H, 3CCAAE79H, 3CAEAB01H, 3C92B698H, 3C6E6624H
   \              0x3CE65C32   
   \              0x3CCAAE79   
   \              0x3CAEAB01   
   \              0x3C92B698   
   \              0x3C6E6624   
   \   00000240   0x3C38FB19         DC32 3C38FB19H, 3C05D9AEH, 3BAB3FFEH, 3B23687CH, 2208147AH, 0BB1230CEH
   \              0x3C05D9AE   
   \              0x3BAB3FFE   
   \              0x3B23687C   
   \              0x2208147A   
   \              0xBB1230CE   
   \   00000258   0xBB88FE87         DC32 0BB88FE87H, 0BBBF4B2DH, 0BBEBC6BEH, 0BC07344AH, 0BC13AAB6H
   \              0xBBBF4B2D   
   \              0xBBEBC6BE   
   \              0xBC07344A   
   \              0xBC13AAB6   
   \   0000026C   0xBC1B6E78         DC32 0BC1B6E78H, 0BC1EBB3AH, 0BC1DDE7EH, 0BC193552H, 0BC1129C9H
   \              0xBC1EBB3A   
   \              0xBC1DDE7E   
   \              0xBC193552   
   \              0xBC1129C9   
   \   00000280   0xBC063041         DC32 0BC063041H, 0BBF18919H, 0BBD2CE2EH, 0BBB13402H, 0BB8DBCB6H
   \              0xBBF18919   
   \              0xBBD2CE2E   
   \              0xBBB13402   
   \              0xBB8DBCB6   
   \   00000294   0xBB52C604         DC32 0BB52C604H, 0BB0A2A99H, 0BA86C50AH, 0A1E4F4CDH, 3A7A6939H
   \              0xBB0A2A99   
   \              0xBA86C50A   
   \              0xA1E4F4CD   
   \              0x3A7A6939   
   \   000002A8   0x3AEE7CBA         DC32 3AEE7CBAH, 3B28F664H, 3B53070FH, 3B74F039H, 3B873625H, 3B8FB721H
   \              0x3B28F664   
   \              0x3B53070F   
   \              0x3B74F039   
   \              0x3B873625   
   \              0x3B8FB721   
   \   000002C0   0x3B940F44         DC32 3B940F44H, 3B946B58H, 3B910E22H, 3B8A4D6EH, 3B808EC8H, 3B68880EH
   \              0x3B946B58   
   \              0x3B910E22   
   \              0x3B8A4D6E   
   \              0x3B808EC8   
   \              0x3B68880E   
   \   000002D8   0x3B4BCF7C         DC32 3B4BCF7CH, 3B2BF353H, 3B09F65FH, 3ACDB02CH, 3A871CCCH, 3A04006DH
   \              0x3B2BF353   
   \              0x3B09F65F   
   \              0x3ACDB02C   
   \              0x3A871CCC   
   \              0x3A04006D   
   \   000002F0   0x21A8622A         DC32 21A8622AH, 0B9F5B9D2H, 0BA6A18D3H, 0BAA5D672H, 0BACF074CH
   \              0xB9F5B9D2   
   \              0xBA6A18D3   
   \              0xBAA5D672   
   \              0xBACF074C   
   \   00000304   0xBAF018F8         DC32 0BAF018F8H, 0BB046209H, 0BB0C7ECDH, 0BB1079A4H, 0BB10834DH
   \              0xBB046209   
   \              0xBB0C7ECD   
   \              0xBB1079A4   
   \              0xBB10834D   
   \   00000318   0xBB0CE36C         DC32 0BB0CE36CH, 0BB05F51CH, 0BAF84675H, 0BADFC901H, 0BAC36F11H
   \              0xBB05F51C   
   \              0xBAF84675   
   \              0xBADFC901   
   \              0xBAC36F11   
   \   0000032C   0xBAA43DC7         DC32 0BAA43DC7H, 0BA833AA8H, 0BA42C91BH, 0B9FEB4F9H, 0B9779E98H
   \              0xBA833AA8   
   \              0xBA42C91B   
   \              0xB9FEB4F9   
   \              0xB9779E98   
   \   00000340   0xA1517E1B         DC32 0A1517E1BH, 39640D4EH, 39D809DCH, 3A18268EH, 3A3CCA80H, 3A599318H
   \              0x39640D4E   
   \              0x39D809DC   
   \              0x3A18268E   
   \              0x3A3CCA80   
   \              0x3A599318   
   \   00000358   0x3A6E606F         DC32 3A6E606FH, 3A7B4C82H, 3A8052FDH, 3A7EE9D8H, 3A76BC41H, 3A68E0BFH
   \              0x3A7B4C82   
   \              0x3A8052FD   
   \              0x3A7EE9D8   
   \              0x3A76BC41   
   \              0x3A68E0BF   
   \   00000370   0x3A56322D         DC32 3A56322DH, 3A3F9A9FH, 3A260B77H, 3A0A75EEH, 39DB886DH, 39A1A6DCH
   \              0x3A3F9A9F   
   \              0x3A260B77   
   \              0x3A0A75EE   
   \              0x39DB886D   
   \              0x39A1A6DC   
   \   00000388   0x3951B9C2         DC32 3951B9C2H, 38CA4D5DH, 20D44AEDH, 0B8B77A95H, 0B92C86E1H
   \              0x38CA4D5D   
   \              0x20D44AED   
   \              0xB8B77A95   
   \              0xB92C86E1   
   \   0000039C   0xB9714566         DC32 0B9714566H, 0B994A892H, 0B9AA35D0H, 0B9B95B42H, 0B9C2543AH
   \              0xB994A892   
   \              0xB9AA35D0   
   \              0xB9B95B42   
   \              0xB9C2543A   
   \   000003B0   0xB9C58030         DC32 0B9C58030H, 0B9C35BF6H, 0B9BC7ABBH, 0B9B17F1EH, 0B9A3149CH
   \              0xB9C35BF6   
   \              0xB9BC7ABB   
   \              0xB9B17F1E   
   \              0xB9A3149C   
   \   000003C4   0xB991E97E         DC32 0B991E97EH, 0B97D52F6H, 0B953F24DH, 0B928E493H, 0B8FA849AH
   \              0xB97D52F6   
   \              0xB953F24D   
   \              0xB928E493   
   \              0xB8FA849A   
   \   000003D8   0xB8A40AAE         DC32 0B8A40AAEH, 0B8201C2BH, 0A04C8959H, 3815DB48H, 388FC3A4H
   \              0xB8201C2B   
   \              0xA04C8959   
   \              0x3815DB48   
   \              0x388FC3A4   
   \   000003EC   0x38CDBF5F         DC32 38CDBF5FH, 390225C3H, 39197C3BH, 392CBA54H, 393BC2EAH, 39468194H
   \              0x390225C3   
   \              0x39197C3B   
   \              0x392CBA54   
   \              0x393BC2EA   
   \              0x39468194   
    149          {0.00018931023733887328785140125031461, 0.00017906320956449718780068014467588, 0.00016472611398933082707714270487287, 0.00014637496998698635349706043129459, 0.00012411833877197118915919338277831, 0.00009810807218950060991802947230056, 0.000068552123498382381986196443257597, 0.000035728588532677305240631976390731, -0.00000000000000000017324916696511484087552600094259, -0.000038173205621765953919795333337817, -0.000078221183749832483658205595222768, -0.00011945627651464417896126635199039, -0.00016106878909305483811228998369813, -0.00020212791977308188721279558208721, -0.00024158865192967367524316812943397, -0.00027830520246743069203571030456601, -0.00031105136456802351613629142867978, -0.00033854779127134420604536280130503, -0.00035949595078080796590330736606234, -0.00037261815610527433944437758484014, -0.00037670274346248707559789425936003, -0.00037065315910034610106041363941642, -0.00035353942629353263694264031258285, -0.00032465021631997251780679669685981, -0.00028354355141542659027309447594689, -0.00023009403488550753775696011693697, -0.00016453444274808185659488002361428, -0.000087489529290607154026447600525529, 0.00000000000000000035963777897995740511225111464631, 0.000096465209123675725046663520512169, 0.0002000099384037126346806007015644, 0.00030832634330427095880125532012528, 0.00041872579380565261211039063127259, 0.00052818548571549161618071677182229, 0.00063341059142568191531186272413834, 0.00073091122268881703483850431624091, 0.00081709290947889275276427856198325, 0.00088835873579306038564512570943066, 0.00094122073501536822164037499049982, 0.00097241765403888083107303286212186, 0.00097903576607579530927116806537924, 0.00095862906516159553365480361364348, 0.00090933492714634952657631883354838, 0.00082998118639221853468090905892041, 0.00072018056538424783490082159431722, 0.00058040851344036837721612753782097, 0.00041206076421621863625777137940531, 0.00021748730910838459965891966696461, -0.00000000000000000070978852973216944366881500279641, -0.00023614836926109009193792964698133, -0.00048581491128597473466016465337702, -0.00074304800167863385360056405204432, -0.0010011988242059220634988525588938, -0.001253061844487439804862738412794, -0.0014910419952587929386805809528482, -0.0017073454117585836961601408745537, -0.0018941896530629330572953472611175, -0.0020440285137572540043182645064235, -0.0021497857988733524298163857224608, -0.0022050918304676631227778660360173, -0.0022045160008804915406643853970081, -0.0021437884064354805271901405205881, -0.0020200035027234828841069536053965, -0.0018317988303859073211804497915978, -0.0015795021747653965882296489553482, -0.0012652410444060988720105243032776, -0.00089300907659485974192381529945806, -0.00046868489126708994365125282577367, 0.0000000000000000011410107033491598856884648433206, 0.00050354638885745600738325089551495, 0.0010308264731604627282429698098554, 0.0015692762303077874719986484208789, 0.0021051389308092845718822783140922, 0.0026237561588407756936469628072928, 0.0031099012342115646238827064706811, 0.0035481485307514567736908439599119, 0.0039232709012478961599357241141206, 0.0042206562886429165731838608621729, 0.0044267336642499679338902396352751, 0.0045293977192586978505750572310262, 0.0045184212736689632547437689424896, 0.004385844178926175812582854973698, 0.0041263275920089886525388145344095, 0.0037374628972148896122185135482141, 0.0032200252472203202275258249187573, 0.002578162678915450495981120937472, 0.0018195130157256571377250020660199, 0.00095524227249454767788711118114975, -0.0000000000000000015514679617396319271238689727893, -0.0010282110944270109274129021414979, -0.0021082518799881017068642563572212, -0.0032161483998399834419168463739425, -0.0043254746913254787932245903903095, -0.0054078110570637124773774040420449, -0.0064332699618400253013805745183618, -0.0073710798093752022755453801039494, -0.0081902151172676771612168877823024, -0.0088600601069449558266910571546759, -0.0093510915026249735032548571211919, -0.0096355654271309959524316468559846, -0.0096881927236054446450630450726749, -0.0094867868430822243491773448909044, -0.0090128686317790772386526754189617, -0.0082522129325435077812356254867154, -0.0071953228759486058396799279535117, -0.005837819062040572500038582148818, -0.004180732498025788515527700894836, -0.0022306921254926252370931472057691, 0.0000000000000000018442277566840108513731233345571, 0.002493410374395803579677943773163, 0.0052261344594180516795467461577118, 0.0081695750630628120175780182421477, 0.011290335189272669019766581754993, 0.014550719183306680751255335337646, 0.017909333426899445851354641945363, 0.021321775433130414623139614604952, 0.024741398015764016343753795013072, 0.028120133317360743868684735957686, 0.031409359923844012985050255792885, 0.034560795111718854710769477378562, 0.037527393500066341669452185669797, 0.040264233035191630827309694495852, 0.042729369333261039975990769335112, 0.044884639946403681598496859805891, 0.046696401090561612257090473576682, 0.04813618075803847290439207995405, 0.049181233903094367931885244615842, 0.049814987494363631437277462055135, 0.050027365624069605742896271749487, 0.049814987494363631437277462055135, 0.049181233903094367931885244615842, 0.04813618075803847290439207995405, 0.046696401090561612257090473576682, 0.044884639946403681598496859805891, 0.042729369333261039975990769335112, 0.040264233035191630827309694495852, 0.037527393500066341669452185669797, 0.034560795111718854710769477378562, 0.031409359923844012985050255792885, 0.028120133317360743868684735957686, 0.024741398015764016343753795013072, 0.021321775433130414623139614604952, 0.017909333426899445851354641945363, 0.014550719183306680751255335337646, 0.011290335189272669019766581754993, 0.0081695750630628120175780182421477, 0.0052261344594180516795467461577118, 0.002493410374395803579677943773163, 0.0000000000000000018442277566840108513731233345571, -0.0022306921254926252370931472057691, -0.004180732498025788515527700894836, -0.005837819062040572500038582148818, -0.0071953228759486058396799279535117, -0.0082522129325435077812356254867154, -0.0090128686317790772386526754189617, -0.0094867868430822243491773448909044, -0.0096881927236054446450630450726749, -0.0096355654271309959524316468559846, -0.0093510915026249735032548571211919, -0.0088600601069449558266910571546759, -0.0081902151172676771612168877823024, -0.0073710798093752022755453801039494, -0.0064332699618400253013805745183618, -0.0054078110570637124773774040420449, -0.0043254746913254787932245903903095, -0.0032161483998399834419168463739425, -0.0021082518799881017068642563572212, -0.0010282110944270109274129021414979, -0.0000000000000000015514679617396319271238689727893, 0.00095524227249454767788711118114975, 0.0018195130157256571377250020660199, 0.002578162678915450495981120937472, 0.0032200252472203202275258249187573, 0.0037374628972148896122185135482141, 0.0041263275920089886525388145344095, 0.004385844178926175812582854973698, 0.0045184212736689632547437689424896, 0.0045293977192586978505750572310262, 0.0044267336642499679338902396352751, 0.0042206562886429165731838608621729, 0.0039232709012478961599357241141206, 0.0035481485307514567736908439599119, 0.0031099012342115646238827064706811, 0.0026237561588407756936469628072928, 0.0021051389308092845718822783140922, 0.0015692762303077874719986484208789, 0.0010308264731604627282429698098554, 0.00050354638885745600738325089551495, 0.0000000000000000011410107033491598856884648433206, -0.00046868489126708994365125282577367, -0.00089300907659485974192381529945806, -0.0012652410444060988720105243032776, -0.0015795021747653965882296489553482, -0.0018317988303859073211804497915978, -0.0020200035027234828841069536053965, -0.0021437884064354805271901405205881, -0.0022045160008804915406643853970081, -0.0022050918304676631227778660360173, -0.0021497857988733524298163857224608, -0.0020440285137572540043182645064235, -0.0018941896530629330572953472611175, -0.0017073454117585836961601408745537, -0.0014910419952587929386805809528482, -0.001253061844487439804862738412794, -0.0010011988242059220634988525588938, -0.00074304800167863385360056405204432, -0.00048581491128597473466016465337702, -0.00023614836926109009193792964698133, -0.00000000000000000070978852973216944366881500279641, 0.00021748730910838459965891966696461, 0.00041206076421621863625777137940531, 0.00058040851344036837721612753782097, 0.00072018056538424783490082159431722, 0.00082998118639221853468090905892041, 0.00090933492714634952657631883354838, 0.00095862906516159553365480361364348, 0.00097903576607579530927116806537924, 0.00097241765403888083107303286212186, 0.00094122073501536822164037499049982, 0.00088835873579306038564512570943066, 0.00081709290947889275276427856198325, 0.00073091122268881703483850431624091, 0.00063341059142568191531186272413834, 0.00052818548571549161618071677182229, 0.00041872579380565261211039063127259, 0.00030832634330427095880125532012528, 0.0002000099384037126346806007015644, 0.000096465209123675725046663520512169, 0.00000000000000000035963777897995740511225111464631, -0.000087489529290607154026447600525529, -0.00016453444274808185659488002361428, -0.00023009403488550753775696011693697, -0.00028354355141542659027309447594689, -0.00032465021631997251780679669685981, -0.00035353942629353263694264031258285, -0.00037065315910034610106041363941642, -0.00037670274346248707559789425936003, -0.00037261815610527433944437758484014, -0.00035949595078080796590330736606234, -0.00033854779127134420604536280130503, -0.00031105136456802351613629142867978, -0.00027830520246743069203571030456601, -0.00024158865192967367524316812943397, -0.00020212791977308188721279558208721, -0.00016106878909305483811228998369813, -0.00011945627651464417896126635199039, -0.000078221183749832483658205595222768, -0.000038173205621765953919795333337817, -0.00000000000000000017324916696511484087552600094259, 0.000035728588532677305240631976390731, 0.000068552123498382381986196443257597, 0.00009810807218950060991802947230056, 0.00012411833877197118915919338277831, 0.00014637496998698635349706043129459, 0.00016472611398933082707714270487287, 0.00017906320956449718780068014467588, 0.00018931023733887328785140125031461};
    150          /* ------------------------------------------------------------------
    151          * Global variables for FIR LPF Example
    152          * ------------------------------------------------------------------- */
    153          

   \                                 In section .data, align 4
    154          uint32_t blockSize = BLOCK_SIZE;
   \                     blockSize:
   \   00000000   0x00000100         DC32 256

   \                                 In section .data, align 4
    155          uint32_t numBlocks = TEST_LENGTH_SAMPLES/BLOCK_SIZE;
   \                     numBlocks:
   \   00000000   0x00000008         DC32 8
    156          
    157          /**/

   \                                 In section .bss, align 4
    158          uint16 Result_A[LENGTH+1]={0};
   \                     Result_A:
   \   00000000                      DS8 4100

   \                                 In section .bss, align 4
    159          uint16 Result_B[LENGTH+1]={0};
   \                     Result_B:
   \   00000000                      DS8 4100

   \                                 In section .bss, align 4
    160          uint16 Result_C[LENGTH+1]={0};
   \                     Result_C:
   \   00000000                      DS8 4100
    161          

   \                                 In section .data, align 4
    162          float MyDb = 0.5;
   \                     MyDb:
   \   00000000   0x3F000000         DC32 3F000000H

   \                                 In section .bss, align 4
    163          float power = 0;
   \                     power:
   \   00000000                      DS8 4
    164          
    165          
    166          

   \                                 In section .bss, align 4
    167          uint16 FFT_RESULT_OLD[160]={0};
   \                     FFT_RESULT_OLD:
   \   00000000                      DS8 320

   \                                 In section .bss, align 4
    168          uint16 FFT_RESULT_NEW[160]={0};
   \                     FFT_RESULT_NEW:
   \   00000000                      DS8 320

   \                                 In section .bss, align 2
    169          uint16 ShowMenu = 0;
   \                     ShowMenu:
   \   00000000                      DS8 2
    170          

   \                                 In section .text, align 2, keep-with-next
    171          void draw_fft()
    172          {
   \                     draw_fft: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    173            uint16 i,j;
    174            for(i = 0; i<160;i++ )
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0004             MOVS     R4,R0
   \                     ??draw_fft_0: (+1)
   \   00000006   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000008   0x2CA0             CMP      R4,#+160
   \   0000000A   0xDA73             BGE.N    ??draw_fft_1
    175            {
    176              if(FFT_RESULT_NEW[i] - FFT_RESULT_OLD[i]>0)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000010   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000012   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   0000001A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001C   0xF831 0x1014      LDRH     R1,[R1, R4, LSL #+1]
   \   00000020   0x1A40             SUBS     R0,R0,R1
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xDB28             BLT.N    ??draw_fft_2
    177              {
    178                LCD_SetPos(i*2,i*2,FFT_RESULT_OLD[i],FFT_RESULT_NEW[i]);
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   0000002A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000002C   0xF830 0x3014      LDRH     R3,[R0, R4, LSL #+1]
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000034   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000036   0xF830 0x2014      LDRH     R2,[R0, R4, LSL #+1]
   \   0000003A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000003C   0x0061             LSLS     R1,R4,#+1
   \   0000003E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000040   0x0060             LSLS     R0,R4,#+1
   \   00000042   0x.... 0x....      BL       LCD_SetPos
    179                for (j=0;j <FFT_RESULT_NEW[i] - FFT_RESULT_OLD[i];j++)
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x0005             MOVS     R5,R0
   \                     ??draw_fft_3: (+1)
   \   0000004A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000050   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000052   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   0000005A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000005C   0xF831 0x1014      LDRH     R1,[R1, R4, LSL #+1]
   \   00000060   0x1A40             SUBS     R0,R0,R1
   \   00000062   0x4285             CMP      R5,R0
   \   00000064   0xDA3A             BGE.N    ??draw_fft_4
    180                  write_word(Blue + j*30);
   \   00000066   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000068   0x201E             MOVS     R0,#+30
   \   0000006A   0xFB00 0xF005      MUL      R0,R0,R5
   \   0000006E   0x301F             ADDS     R0,R0,#+31
   \   00000070   0x.... 0x....      BL       write_word
   \   00000074   0x1C6D             ADDS     R5,R5,#+1
   \   00000076   0xE7E8             B.N      ??draw_fft_3
    181              }
    182              else if(FFT_RESULT_NEW[i] - FFT_RESULT_OLD[i]<0)
   \                     ??draw_fft_2: (+1)
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   0000007C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000007E   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00000086   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000088   0xF831 0x1014      LDRH     R1,[R1, R4, LSL #+1]
   \   0000008C   0x1A40             SUBS     R0,R0,R1
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD524             BPL.N    ??draw_fft_4
    183              {
    184                LCD_SetPos(i*2,i*2,FFT_RESULT_NEW[i],FFT_RESULT_OLD[i]);
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000096   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000098   0xF830 0x3014      LDRH     R3,[R0, R4, LSL #+1]
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   000000A0   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000A2   0xF830 0x2014      LDRH     R2,[R0, R4, LSL #+1]
   \   000000A6   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000A8   0x0061             LSLS     R1,R4,#+1
   \   000000AA   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000AC   0x0060             LSLS     R0,R4,#+1
   \   000000AE   0x.... 0x....      BL       LCD_SetPos
    185                for (j=0;j<FFT_RESULT_OLD[i] - FFT_RESULT_NEW[i];j++)
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x0005             MOVS     R5,R0
   \                     ??draw_fft_5: (+1)
   \   000000B6   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   000000BC   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000BE   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable11_1
   \   000000C6   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000C8   0xF831 0x1014      LDRH     R1,[R1, R4, LSL #+1]
   \   000000CC   0x1A40             SUBS     R0,R0,R1
   \   000000CE   0x4285             CMP      R5,R0
   \   000000D0   0xDA04             BGE.N    ??draw_fft_4
    186                  write_word(Black);
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x.... 0x....      BL       write_word
   \   000000D8   0x1C6D             ADDS     R5,R5,#+1
   \   000000DA   0xE7EC             B.N      ??draw_fft_5
    187              }
    188              FFT_RESULT_OLD[i] =  FFT_RESULT_NEW[i];
   \                     ??draw_fft_4: (+1)
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   000000E0   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000E2   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   000000EA   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000EC   0xF821 0x0014      STRH     R0,[R1, R4, LSL #+1]
    189            }
   \   000000F0   0x1C64             ADDS     R4,R4,#+1
   \   000000F2   0xE788             B.N      ??draw_fft_0
    190            
    191          }
   \                     ??draw_fft_1: (+1)
   \   000000F4   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    192          
    193          

   \                                 In section .bss, align 2
    194          volatile uint16 Result_flag = 0;
   \                     Result_flag:
   \   00000000                      DS8 2

   \                                 In section .text, align 2, keep-with-next
    195          void dmaisr()
    196          {
    197            // PTE->PTOR = 0x01L<<24;
    198            if(Result_flag == 0)
   \                     dmaisr: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD109             BNE.N    ??dmaisr_0
    199            {
    200              LPLD_DMA_LoadDstAddr(DMA_CH15,(uint32)&Result_B);
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable11_4  ;; 0x400091f0
   \   00000012   0x6008             STR      R0,[R1, #+0]
    201              Result_flag = 1;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000001A   0x8008             STRH     R0,[R1, #+0]
   \   0000001C   0xE01C             B.N      ??dmaisr_1
    202            }else if(Result_flag ==1 )
   \                     ??dmaisr_0: (+1)
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000022   0x8800             LDRH     R0,[R0, #+0]
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xD109             BNE.N    ??dmaisr_2
    203            {
    204              LPLD_DMA_LoadDstAddr(DMA_CH15,(uint32)&Result_C);
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable11_5
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable11_4  ;; 0x400091f0
   \   00000030   0x6008             STR      R0,[R1, #+0]
    205              Result_flag = 2;
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000038   0x8008             STRH     R0,[R1, #+0]
   \   0000003A   0xE00D             B.N      ??dmaisr_1
    206            }
    207            else if(Result_flag ==2)
   \                     ??dmaisr_2: (+1)
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000040   0x8800             LDRH     R0,[R0, #+0]
   \   00000042   0x2802             CMP      R0,#+2
   \   00000044   0xD108             BNE.N    ??dmaisr_1
    208            {
    209              LPLD_DMA_LoadDstAddr(DMA_CH15,(uint32)&Result_A);
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable11_4  ;; 0x400091f0
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    210              Result_flag = 0;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000056   0x8008             STRH     R0,[R1, #+0]
    211            }
    212            //   Result_flag++;
    213            //  if(Result_flag >2 )
    214            //  {
    215            //    Result_flag = 0;
    216            //  }
    217          }
   \                     ??dmaisr_1: (+1)
   \   00000058   0x4770             BX       LR               ;; return
    218          
    219          
    220          

   \                                 In section .bss, align 2
    221          uint16 value = 0;
   \                     value:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
    222          uint16  flag = LENGTH - 2;
   \                     flag:
   \   00000000   0x07FE             DC16 2046

   \                                 In section .data, align 2
    223          volatile uint16 bufflag = 1;
   \                     bufflag:
   \   00000000   0x0001             DC16 1

   \                                 In section .text, align 4, keep-with-next
    224          void pitdacisr()
    225          {
   \                     pitdacisr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    226            if(bufflag == 0)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   00000006   0x8800             LDRH     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD133             BNE.N    ??pitdacisr_0
    227            {
    228              value = (Result_B[flag] - OFFEST)*MyDb + OFFEST;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   00000014   0x8809             LDRH     R1,[R1, #+0]
   \   00000016   0xF830 0x0011      LDRH     R0,[R0, R1, LSL #+1]
   \   0000001A   0xF6A0 0x10F3      SUBW     R0,R0,#+2547
   \   0000001E   0xEE00 0x0A10      VMOV     S0,R0
   \   00000022   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \   0000002A   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000002E   0xED9F 0x....      VLDR.W   S2,??DataTable4  ;; 0x451f3000
   \   00000032   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000036   0xEEBD 0x0AC1      VCVT.S32.F32 S0,S2
   \   0000003A   0xEE10 0x0A10      VMOV     R0,S0
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   00000042   0x8008             STRH     R0,[R1, #+0]
    229              if(value>4095) value= 4095;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \   00000048   0x8800             LDRH     R0,[R0, #+0]
   \   0000004A   0xF5B0 0x5F80      CMP      R0,#+4096
   \   0000004E   0xDB04             BLT.N    ??pitdacisr_1
   \   00000050   0xF640 0x70FF      MOVW     R0,#+4095
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   00000058   0x8008             STRH     R0,[R1, #+0]
    230              LPLD_DAC_SetBufferDataN(DAC0,value, 1);
   \                     ??pitdacisr_1: (+1)
   \   0000005A   0x2201             MOVS     R2,#+1
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \   00000060   0x8801             LDRH     R1,[R0, #+0]
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable11_11  ;; 0x400cc000
   \   00000066   0x.... 0x....      BL       LPLD_DAC_SetBufferDataN
    231              LPLD_DAC_SoftwareTrigger(DAC0);
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable11_11  ;; 0x400cc000
   \   0000006E   0x.... 0x....      BL       LPLD_DAC_SoftwareTrigger
   \   00000072   0xE070             B.N      ??pitdacisr_2
    232            }
    233            else if(bufflag == 1)
   \                     ??pitdacisr_0: (+1)
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   00000078   0x8800             LDRH     R0,[R0, #+0]
   \   0000007A   0x2801             CMP      R0,#+1
   \   0000007C   0xD133             BNE.N    ??pitdacisr_3
    234            {
    235              value = (Result_C[flag] - OFFEST)*MyDb + OFFEST;
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable11_5
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   00000086   0x8809             LDRH     R1,[R1, #+0]
   \   00000088   0xF830 0x0011      LDRH     R0,[R0, R1, LSL #+1]
   \   0000008C   0xF6A0 0x10F3      SUBW     R0,R0,#+2547
   \   00000090   0xEE00 0x0A10      VMOV     S0,R0
   \   00000094   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \   0000009C   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000000A0   0xED9F 0x....      VLDR.W   S2,??DataTable4  ;; 0x451f3000
   \   000000A4   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   000000A8   0xEEBD 0x0AC1      VCVT.S32.F32 S0,S2
   \   000000AC   0xEE10 0x0A10      VMOV     R0,S0
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   000000B4   0x8008             STRH     R0,[R1, #+0]
    236              if(value>4095) value= 4095;
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \   000000BA   0x8800             LDRH     R0,[R0, #+0]
   \   000000BC   0xF5B0 0x5F80      CMP      R0,#+4096
   \   000000C0   0xDB04             BLT.N    ??pitdacisr_4
   \   000000C2   0xF640 0x70FF      MOVW     R0,#+4095
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   000000CA   0x8008             STRH     R0,[R1, #+0]
    237              LPLD_DAC_SetBufferDataN(DAC0, value, 1);
   \                     ??pitdacisr_4: (+1)
   \   000000CC   0x2201             MOVS     R2,#+1
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \   000000D2   0x8801             LDRH     R1,[R0, #+0]
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable11_11  ;; 0x400cc000
   \   000000D8   0x.... 0x....      BL       LPLD_DAC_SetBufferDataN
    238              LPLD_DAC_SoftwareTrigger(DAC0);
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable11_11  ;; 0x400cc000
   \   000000E0   0x.... 0x....      BL       LPLD_DAC_SoftwareTrigger
   \   000000E4   0xE037             B.N      ??pitdacisr_2
    239            }
    240            else if(bufflag == 2)
   \                     ??pitdacisr_3: (+1)
   \   000000E6   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   000000EA   0x8800             LDRH     R0,[R0, #+0]
   \   000000EC   0x2802             CMP      R0,#+2
   \   000000EE   0xD132             BNE.N    ??pitdacisr_2
    241            {
    242              value = (Result_A[flag] - OFFEST)*MyDb + OFFEST;
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   000000F4   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   000000F8   0x8809             LDRH     R1,[R1, #+0]
   \   000000FA   0xF830 0x0011      LDRH     R0,[R0, R1, LSL #+1]
   \   000000FE   0xF6A0 0x10F3      SUBW     R0,R0,#+2547
   \   00000102   0xEE00 0x0A10      VMOV     S0,R0
   \   00000106   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \   0000010E   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000112   0xED9F 0x....      VLDR.W   S2,??DataTable4  ;; 0x451f3000
   \   00000116   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   0000011A   0xEEBD 0x0AC1      VCVT.S32.F32 S0,S2
   \   0000011E   0xEE10 0x0A10      VMOV     R0,S0
   \   00000122   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   00000126   0x8008             STRH     R0,[R1, #+0]
    243              if(value>4095) value= 4095;
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \   0000012C   0x8800             LDRH     R0,[R0, #+0]
   \   0000012E   0xF5B0 0x5F80      CMP      R0,#+4096
   \   00000132   0xDB04             BLT.N    ??pitdacisr_5
   \   00000134   0xF640 0x70FF      MOVW     R0,#+4095
   \   00000138   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   0000013C   0x8008             STRH     R0,[R1, #+0]
    244              LPLD_DAC_SetBufferDataN(DAC0, value, 1);
   \                     ??pitdacisr_5: (+1)
   \   0000013E   0x2201             MOVS     R2,#+1
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \   00000144   0x8801             LDRH     R1,[R0, #+0]
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable11_11  ;; 0x400cc000
   \   0000014A   0x.... 0x....      BL       LPLD_DAC_SetBufferDataN
    245              LPLD_DAC_SoftwareTrigger(DAC0);
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable11_11  ;; 0x400cc000
   \   00000152   0x.... 0x....      BL       LPLD_DAC_SoftwareTrigger
    246            }
    247            
    248            if(++flag==LENGTH)
   \                     ??pitdacisr_2: (+1)
   \   00000156   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   0000015A   0x8800             LDRH     R0,[R0, #+0]
   \   0000015C   0x1C40             ADDS     R0,R0,#+1
   \   0000015E   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   00000162   0x8008             STRH     R0,[R1, #+0]
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000168   0x8800             LDRH     R0,[R0, #+0]
   \   0000016A   0xF5B0 0x6F00      CMP      R0,#+2048
   \   0000016E   0xD113             BNE.N    ??pitdacisr_6
    249            {
    250              flag = 0;
   \   00000170   0x2000             MOVS     R0,#+0
   \   00000172   0x.... 0x....      LDR.W    R1,??DataTable11_8
   \   00000176   0x8008             STRH     R0,[R1, #+0]
    251              bufflag++;
   \   00000178   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   0000017C   0x8800             LDRH     R0,[R0, #+0]
   \   0000017E   0x1C40             ADDS     R0,R0,#+1
   \   00000180   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   00000184   0x8008             STRH     R0,[R1, #+0]
    252              if(bufflag > 2)
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   0000018A   0x8800             LDRH     R0,[R0, #+0]
   \   0000018C   0x2803             CMP      R0,#+3
   \   0000018E   0xDB03             BLT.N    ??pitdacisr_6
    253                bufflag = 0;
   \   00000190   0x2000             MOVS     R0,#+0
   \   00000192   0x.... 0x....      LDR.W    R1,??DataTable11_7
   \   00000196   0x8008             STRH     R0,[R1, #+0]
    254            }
    255          }
   \                     ??pitdacisr_6: (+1)
   \   00000198   0xBD01             POP      {R0,PC}          ;; return
    256          

   \                                 In section .text, align 4, keep-with-next
    257          void buttonisr()
    258          {
   \                     buttonisr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    259            DisableInterrupts;
   \   00000002   0xB672             CPSID    I
    260            if(LPLD_GPIO_IsPinxExt(PORTA, GPIO_Pin6))
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable12_1  ;; 0x400490a0
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xD52B             BPL.N    ??buttonisr_0
    261            {
    262              
    263              if(PTA6_I==0)
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x43fe0218
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD126             BNE.N    ??buttonisr_0
    264              {
    265                for(uint32_t i = 0;i<0xffff;i++)
   \   00000018   0x2000             MOVS     R0,#+0
   \                     ??buttonisr_1: (+1)
   \   0000001A   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000001E   0x4288             CMP      R0,R1
   \   00000020   0xD201             BCS.N    ??buttonisr_2
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0xE7F9             B.N      ??buttonisr_1
    266                  ;
    267                //   starfir = 1;
    268                MyDb+=0.01;
   \                     ??buttonisr_2: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x.... 0x....      BL       __aeabi_f2d
   \   00000030   0x.... 0x....      LDR.W    R2,??DataTable12_3  ;; 0x47ae147b
   \   00000034   0x.... 0x....      LDR.W    R3,??DataTable12_4  ;; 0x3f847ae1
   \   00000038   0x.... 0x....      BL       __aeabi_dadd
   \   0000003C   0x.... 0x....      BL       __aeabi_d2f
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable11_9
   \   00000044   0x6008             STR      R0,[R1, #+0]
    269                if(MyDb>1.3)
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \   0000004A   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000004E   0xEDDF 0x....      VLDR.W   S1,??DataTable7  ;; 0x3fa66667
   \   00000052   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000056   0xEEF1 0xFA10      FMSTAT   
   \   0000005A   0xDB04             BLT.N    ??buttonisr_0
    270                  MyDb = 1.3;
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable12_5  ;; 0x3fa66666
   \   00000064   0x6001             STR      R1,[R0, #+0]
    271              }
    272            }
    273            
    274            
    275            if(LPLD_GPIO_IsPinxExt(PORTA, GPIO_Pin8))
   \                     ??buttonisr_0: (+1)
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable12_1  ;; 0x400490a0
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x05C0             LSLS     R0,R0,#+23
   \   0000006E   0xD528             BPL.N    ??buttonisr_3
    276            {
    277              
    278              if(PTA7_I==0)
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable12_6  ;; 0x43fe021c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD123             BNE.N    ??buttonisr_3
    279              {
    280                for(uint32_t i = 0;i<0xffff;i++)
   \   0000007A   0x2000             MOVS     R0,#+0
   \                     ??buttonisr_4: (+1)
   \   0000007C   0xF64F 0x71FF      MOVW     R1,#+65535
   \   00000080   0x4288             CMP      R0,R1
   \   00000082   0xD201             BCS.N    ??buttonisr_5
   \   00000084   0x1C40             ADDS     R0,R0,#+1
   \   00000086   0xE7F9             B.N      ??buttonisr_4
    281                  ;
    282                //     starfir = 0;
    283                MyDb-=0.01;
   \                     ??buttonisr_5: (+1)
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x.... 0x....      BL       __aeabi_f2d
   \   00000092   0x.... 0x....      LDR.W    R2,??DataTable12_3  ;; 0x47ae147b
   \   00000096   0x.... 0x....      LDR.W    R3,??DataTable12_8  ;; 0xbf847ae1
   \   0000009A   0x.... 0x....      BL       __aeabi_dadd
   \   0000009E   0x.... 0x....      BL       __aeabi_d2f
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable11_9
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    284                if(MyDb<0)
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \   000000AC   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000B0   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   000000B4   0xEEF1 0xFA10      FMSTAT   
   \   000000B8   0xD503             BPL.N    ??buttonisr_3
    285                  MyDb = 0;
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \   000000BE   0x2100             MOVS     R1,#+0
   \   000000C0   0x6001             STR      R1,[R0, #+0]
    286              }
    287            }
    288            
    289            if(LPLD_GPIO_IsPinxExt(PORTA, GPIO_Pin10))
   \                     ??buttonisr_3: (+1)
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable12_1  ;; 0x400490a0
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0x0540             LSLS     R0,R0,#+21
   \   000000CA   0xD544             BPL.N    ??buttonisr_6
    290            {
    291              
    292              if(PTA10_I==0)
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable12_10  ;; 0x43fe0228
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD13F             BNE.N    ??buttonisr_6
    293              {
    294                for(uint32_t i = 0;i<0xffff;i++)
   \   000000D6   0x2000             MOVS     R0,#+0
   \                     ??buttonisr_7: (+1)
   \   000000D8   0xF64F 0x71FF      MOVW     R1,#+65535
   \   000000DC   0x4288             CMP      R0,R1
   \   000000DE   0xD201             BCS.N    ??buttonisr_8
   \   000000E0   0x1C40             ADDS     R0,R0,#+1
   \   000000E2   0xE7F9             B.N      ??buttonisr_7
    295                  ;
    296                starfir++;
   \                     ??buttonisr_8: (+1)
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   000000E8   0x7800             LDRB     R0,[R0, #+0]
   \   000000EA   0x1C40             ADDS     R0,R0,#+1
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable12_11
   \   000000F0   0x7008             STRB     R0,[R1, #+0]
    297                if(starfir > 2)
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   000000F6   0x7800             LDRB     R0,[R0, #+0]
   \   000000F8   0x2803             CMP      R0,#+3
   \   000000FA   0xDB03             BLT.N    ??buttonisr_9
    298                  starfir = 0;
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable12_11
   \   00000102   0x7008             STRB     R0,[R1, #+0]
    299                if(starfir == 1)
   \                     ??buttonisr_9: (+1)
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   00000108   0x7800             LDRB     R0,[R0, #+0]
   \   0000010A   0x2801             CMP      R0,#+1
   \   0000010C   0xD108             BNE.N    ??buttonisr_10
    300                {
    301                  MyDb = 0.4;
   \   0000010E   0x....             LDR.N    R0,??DataTable11_9
   \   00000110   0x.... 0x....      LDR.W    R1,??DataTable12_12  ;; 0x3ecccccd
   \   00000114   0x6001             STR      R1,[R0, #+0]
    302                  ShowMenu = 1;
   \   00000116   0x2001             MOVS     R0,#+1
   \   00000118   0x.... 0x....      LDR.W    R1,??DataTable12_13
   \   0000011C   0x8008             STRH     R0,[R1, #+0]
   \   0000011E   0xE01A             B.N      ??buttonisr_6
    303                }
    304                else if(starfir == 0)
   \                     ??buttonisr_10: (+1)
   \   00000120   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   00000124   0x7800             LDRB     R0,[R0, #+0]
   \   00000126   0x2800             CMP      R0,#+0
   \   00000128   0xD108             BNE.N    ??buttonisr_11
    305                {
    306                  MyDb = 0.5;
   \   0000012A   0x....             LDR.N    R0,??DataTable11_9
   \   0000012C   0xF05F 0x517C      MOVS     R1,#+1056964608
   \   00000130   0x6001             STR      R1,[R0, #+0]
    307                  ShowMenu = 1;
   \   00000132   0x2001             MOVS     R0,#+1
   \   00000134   0x.... 0x....      LDR.W    R1,??DataTable12_13
   \   00000138   0x8008             STRH     R0,[R1, #+0]
   \   0000013A   0xE00C             B.N      ??buttonisr_6
    308                }
    309                else if(starfir == 2)
   \                     ??buttonisr_11: (+1)
   \   0000013C   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   00000140   0x7800             LDRB     R0,[R0, #+0]
   \   00000142   0x2802             CMP      R0,#+2
   \   00000144   0xD107             BNE.N    ??buttonisr_6
    310                {
    311                  MyDb = 0.5;
   \   00000146   0x....             LDR.N    R0,??DataTable11_9
   \   00000148   0xF05F 0x517C      MOVS     R1,#+1056964608
   \   0000014C   0x6001             STR      R1,[R0, #+0]
    312                  ShowMenu = 1;
   \   0000014E   0x2001             MOVS     R0,#+1
   \   00000150   0x.... 0x....      LDR.W    R1,??DataTable12_13
   \   00000154   0x8008             STRH     R0,[R1, #+0]
    313                }
    314                
    315              }
    316            }
    317            EnableInterrupts;
   \                     ??buttonisr_6: (+1)
   \   00000156   0xB662             CPSIE    I
    318          }
   \   00000158   0xBD01             POP      {R0,PC}          ;; return
    319          

   \                                 In section .bss, align 1
    320          uint8_t myflag2 = 0;
   \                     myflag2:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
    321          void buttonsetisr()
    322          {
    323            DisableInterrupts;
   \                     buttonsetisr: (+1)
   \   00000000   0xB672             CPSID    I
    324            if(LPLD_GPIO_IsPinxExt(PORTD, GPIO_Pin7))
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12_14  ;; 0x4004c0a0
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0600             LSLS     R0,R0,#+24
   \   0000000A   0xD527             BPL.N    ??buttonsetisr_0
    325            {
    326              
    327              if(PTD7_I==0)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable12_15  ;; 0x43fe1a1c
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD122             BNE.N    ??buttonsetisr_0
    328              {
    329                for(uint32_t i = 0;i<0xffff;i++)
   \   00000016   0x2000             MOVS     R0,#+0
   \                     ??buttonsetisr_1: (+1)
   \   00000018   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD201             BCS.N    ??buttonsetisr_2
   \   00000020   0x1C40             ADDS     R0,R0,#+1
   \   00000022   0xE7F9             B.N      ??buttonsetisr_1
    330                  ;
    331                if(myflag2 == 0)
   \                     ??buttonsetisr_2: (+1)
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable12_16
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD104             BNE.N    ??buttonsetisr_3
    332                  MyDb=1.3;
   \   0000002E   0x....             LDR.N    R0,??DataTable11_9
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable12_5  ;; 0x3fa66666
   \   00000034   0x6001             STR      R1,[R0, #+0]
   \   00000036   0xE003             B.N      ??buttonsetisr_4
    333                else 
    334                  MyDb = 0.5;
   \                     ??buttonsetisr_3: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable11_9
   \   0000003A   0xF05F 0x517C      MOVS     R1,#+1056964608
   \   0000003E   0x6001             STR      R1,[R0, #+0]
    335                myflag2 = !myflag2;
   \                     ??buttonsetisr_4: (+1)
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable12_16
   \   00000044   0x7800             LDRB     R0,[R0, #+0]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD104             BNE.N    ??buttonsetisr_5
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable12_16
   \   00000050   0x7008             STRB     R0,[R1, #+0]
   \   00000052   0xE003             B.N      ??buttonsetisr_0
   \                     ??buttonsetisr_5: (+1)
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable12_16
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    336              }
    337            }
    338            EnableInterrupts;
   \                     ??buttonsetisr_0: (+1)
   \   0000005C   0xB662             CPSIE    I
    339          }
   \   0000005E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    340          void init_ADC()
    341          {
   \                     init_ADC: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    342            adc0_init_struct.ADC_Adcx = ADC0;     //选择ADC0
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12_17  ;; 0x4003b000
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable12_18
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    343            adc0_init_struct.ADC_BitMode = SE_12BIT;      //配置转换精度
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable12_18
   \   00000012   0x7148             STRB     R0,[R1, #+5]
    344            adc0_init_struct.ADC_CalEnable = TRUE;        //使能初始化自动校准
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable12_18
   \   0000001A   0x72C8             STRB     R0,[R1, #+11]
    345            adc0_init_struct.ADC_HwTrgCfg = HW_TRGA;      //配置为硬件触发转换
   \   0000001C   0x2040             MOVS     R0,#+64
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable12_18
   \   00000022   0x7308             STRB     R0,[R1, #+12]
    346            adc0_init_struct.ADC_DmaEnable = TRUE;        //使能DMA
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable12_18
   \   0000002A   0x7348             STRB     R0,[R1, #+13]
    347            adc0_init_struct.ADC_SampleTimeCfg = SAMTIME_LONG;
   \   0000002C   0x2010             MOVS     R0,#+16
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable12_18
   \   00000032   0x7188             STRB     R0,[R1, #+6]
    348            //初始化ADC0
    349            LPLD_ADC_Init(adc0_init_struct);   
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable12_18
   \   00000038   0xB084             SUB      SP,SP,#+16
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x2214             MOVS     R2,#+20
   \   0000003E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000042   0xBC0F             POP      {R0-R3}
   \   00000044   0x.... 0x....      BL       LPLD_ADC_Init
    350            //使能ADC0的AD8输入引脚复用功能
    351            LPLD_ADC_Chn_Enable(ADC0, AD8);
   \   00000048   0x2108             MOVS     R1,#+8
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable12_17  ;; 0x4003b000
   \   0000004E   0x.... 0x....      BL       LPLD_ADC_Chn_Enable
    352            //使能ADC0的AD8输入通道、禁用转换完成中断
    353            LPLD_ADC_EnableConversion(ADC0, AD8, 0, FALSE);               //使能PTB0通道
   \   00000052   0x2300             MOVS     R3,#+0
   \   00000054   0x2200             MOVS     R2,#+0
   \   00000056   0x2108             MOVS     R1,#+8
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable12_17  ;; 0x4003b000
   \   0000005C   0x.... 0x....      BL       LPLD_ADC_EnableConversion
    354            
    355            adc0_init_struct.ADC_Adcx = ADC1;
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable12_19  ;; 0x400bb000
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable12_18
   \   00000068   0x6008             STR      R0,[R1, #+0]
    356            LPLD_ADC_Init(adc0_init_struct);   
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable12_18
   \   0000006E   0xB084             SUB      SP,SP,#+16
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x2214             MOVS     R2,#+20
   \   00000074   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000078   0xBC0F             POP      {R0-R3}
   \   0000007A   0x.... 0x....      BL       LPLD_ADC_Init
    357            //使能ADC0的AD8输入引脚复用功能
    358            LPLD_ADC_Chn_Enable(ADC0, AD8);
   \   0000007E   0x2108             MOVS     R1,#+8
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable12_17  ;; 0x4003b000
   \   00000084   0x.... 0x....      BL       LPLD_ADC_Chn_Enable
    359            //使能ADC0的AD8输入通道、禁用转换完成中断
    360            LPLD_ADC_EnableConversion(ADC1, AD8, 0, FALSE);               //使能PTB0通道
   \   00000088   0x2300             MOVS     R3,#+0
   \   0000008A   0x2200             MOVS     R2,#+0
   \   0000008C   0x2108             MOVS     R1,#+8
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable12_19  ;; 0x400bb000
   \   00000092   0x.... 0x....      BL       LPLD_ADC_EnableConversion
    361            
    362          }
   \   00000096   0xBD01             POP      {R0,PC}          ;; return
    363          

   \                                 In section .text, align 2, keep-with-next
    364          void init_DMA()
    365          {
   \                     init_DMA: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    366            /*ADC_DMA*/
    367            dma_init_struct.DMA_CHx = DMA_CH15;   //使用Ch15通道
   \   00000004   0x200F             MOVS     R0,#+15
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
    368            dma_init_struct.DMA_Req = ADC0_DMAREQ;        //DMA请求源为ADC0
   \   0000000C   0x2028             MOVS     R0,#+40
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   00000012   0x7048             STRB     R0,[R1, #+1]
    369            dma_init_struct.DMA_PeriodicTriggerEnable = TRUE;      //周期触发
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   0000001A   0x7088             STRB     R0,[R1, #+2]
    370            dma_init_struct.DMA_MajorLoopCnt = LENGTH;        //主循环计数滤波数组长度次
   \   0000001C   0xF44F 0x6000      MOV      R0,#+2048
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   00000024   0x8088             STRH     R0,[R1, #+4]
    371            dma_init_struct.DMA_MinorByteCnt = 2; //次循环传输字节计数（由于ADC采样为12位，因此传输2字节）
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   0000002C   0x6088             STR      R0,[R1, #+8]
    372            dma_init_struct.DMA_SourceAddr = (uint32)&(ADC0->R[0]);       //源地址：ADC0结果寄存器A地址
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable12_21  ;; 0x4003b010
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   00000036   0x60C8             STR      R0,[R1, #+12]
    373            dma_init_struct.DMA_SourceDataSize = DMA_SRC_16BIT;   //源地址传输数据宽度16位
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   0000003E   0x7408             STRB     R0,[R1, #+16]
    374            dma_init_struct.DMA_DestAddr = (uint32)&Result_A;       //目的地址
   \   00000040   0x....             LDR.N    R0,??DataTable11_6
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   00000046   0x6188             STR      R0,[R1, #+24]
    375            dma_init_struct.DMA_DestDataSize = DMA_DST_16BIT;     //目的地址传输数据宽度16位
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   0000004E   0x7708             STRB     R0,[R1, #+28]
    376            dma_init_struct.DMA_AutoDisableReq = FALSE;   //禁用自动禁用请求，即不受主循环计数计数限制
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   00000056   0xF881 0x0024      STRB     R0,[R1, #+36]
    377            dma_init_struct.DMA_MajorCompleteIntEnable = TRUE;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   00000060   0xF881 0x0025      STRB     R0,[R1, #+37]
    378            dma_init_struct.DMA_Isr = dmaisr;
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable12_22
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   0000006C   0x6288             STR      R0,[R1, #+40]
    379            dma_init_struct.DMA_DestAddrOffset = 2;       //目的地址偏移：每次读入增加2
   \   0000006E   0x2002             MOVS     R0,#+2
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   00000074   0x83C8             STRH     R0,[R1, #+30]
    380            //dma_init_struct.DMA_LastDestAddrAdj = -(2*LENGTH);
    381            //初始化DMA
    382            LPLD_DMA_Init(dma_init_struct);
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   0000007A   0xB084             SUB      SP,SP,#+16
   \   0000007C   0x4668             MOV      R0,SP
   \   0000007E   0x222C             MOVS     R2,#+44
   \   00000080   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000084   0xBC0F             POP      {R0-R3}
   \   00000086   0x.... 0x....      BL       LPLD_DMA_Init
    383            //使能DMA请求
    384            LPLD_DMA_EnableReq(DMA_CH15); 
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable12_23  ;; 0x4000800c
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable12_23  ;; 0x4000800c
   \   00000098   0x6008             STR      R0,[R1, #+0]
    385            LPLD_DMA_EnableIrq(dma_init_struct);
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable12_20
   \   0000009E   0xB084             SUB      SP,SP,#+16
   \   000000A0   0x4668             MOV      R0,SP
   \   000000A2   0x222C             MOVS     R2,#+44
   \   000000A4   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000A8   0xBC0F             POP      {R0-R3}
   \   000000AA   0x.... 0x....      BL       LPLD_DMA_EnableIrq
    386            
    387            //  /*DAC_DMA*/
    388            //  dma2_init_struct.DMA_CHx = DMA_CH16;   //使用Ch15通道
    389            //  dma2_init_struct.DMA_Req = ADC1_DMAREQ;        //DMA请求源为DAC0
    390            //  dma2_init_struct.DMA_PeriodicTriggerEnable = TRUE;      //周期触发
    391            //  dma2_init_struct.DMA_MajorLoopCnt = LENGTH;        //主循环计数滤波数组长度次
    392            //  dma2_init_struct.DMA_MinorByteCnt = 2; //次循环传输字节计数（由于ADC采样为12位，因此传输2字节）
    393            //  dma2_init_struct.DMA_SourceAddr = (uint32)&Result_B;       //源地址：
    394            //  dma2_init_struct.DMA_SourceDataSize = DMA_SRC_16BIT;   //源地址传输数据宽度16位
    395            //  dma2_init_struct.DMA_SourceAddrOffset = 2;
    396            //  dma2_init_struct.DMA_LastSourceAddrAdj = -(2*LENGTH);
    397            //  dma2_init_struct.DMA_DestAddr = (uint32)&(DAC0->DAT[0].DATL);       //目的地址
    398            //  dma2_init_struct.DMA_DestDataSize = DMA_DST_16BIT;     //目的地址传输数据宽度16位
    399            //  //dma2_init_struct.DMA_DestAddrOffset = 2; 
    400            //  dma2_init_struct.DMA_MajorCompleteIntEnable = TRUE;
    401            //  dma2_init_struct.DMA_Isr = dma2isr;
    402            //  dma2_init_struct.DMA_AutoDisableReq = FALSE;   //禁用自动禁用请求，即不受主循环计数计数限制
    403            // // dma2_init_struct.DMA_LastDestAddrAdj = -(2*LENGTH);
    404            //  LPLD_DMA_Init(dma2_init_struct);
    405            //  //使能DMA请求
    406            //  LPLD_DMA_EnableReq(DMA_CH16); 
    407            //  LPLD_DMA_EnableIrq(dma2_init_struct);
    408            
    409          }
   \   000000AE   0xB007             ADD      SP,SP,#+28
   \   000000B0   0xBD00             POP      {PC}             ;; return
    410          
    411          

   \                                 In section .text, align 2, keep-with-next
    412          void init_DAC()
    413          {
   \                     init_DAC: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    414            dac0_init_struct.DAC_Dacx = DAC0;
   \   00000002   0x....             LDR.N    R0,??DataTable11_11  ;; 0x400cc000
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable12_24
   \   00000008   0x6008             STR      R0,[R1, #+0]
    415            
    416            LPLD_DAC_Init(dac0_init_struct);
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable12_24
   \   0000000E   0xB084             SUB      SP,SP,#+16
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x221C             MOVS     R2,#+28
   \   00000014   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000018   0xBC0F             POP      {R0-R3}
   \   0000001A   0x.... 0x....      BL       LPLD_DAC_Init
    417            
    418          }
   \   0000001E   0xBD07             POP      {R0-R2,PC}       ;; return
    419          

   \                                 In section .text, align 2, keep-with-next
    420          void init_PDB()
    421          {
   \                     init_PDB: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    422            pdb_init_struct.PDB_CounterPeriodMs = 1000;
   \   00000004   0xF44F 0x707A      MOV      R0,#+1000
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable12_25
   \   0000000C   0x6048             STR      R0,[R1, #+4]
    423            pdb_init_struct.PDB_ContinuousModeEnable = FALSE;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable12_25
   \   00000014   0x7388             STRB     R0,[R1, #+14]
    424            pdb_init_struct.PDB_LoadModeSel = LOADMODE_0; //加载模式设置
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable12_25
   \   0000001C   0x7308             STRB     R0,[R1, #+12]
    425            pdb_init_struct.PDB_TriggerInputSourceSel =  TRIGGER_PIT0;
   \   0000001E   0x2004             MOVS     R0,#+4
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable12_25
   \   00000024   0x7348             STRB     R0,[R1, #+13]
    426            
    427            LPLD_PDB_Init(pdb_init_struct);
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable12_25
   \   0000002A   0xB084             SUB      SP,SP,#+16
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x2228             MOVS     R2,#+40
   \   00000030   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000034   0xBC0F             POP      {R0-R3}
   \   00000036   0x.... 0x....      BL       LPLD_PDB_Init
    428            LPLD_PDB_AdcTriggerCfg(ADC0, PRETRIG_EN_A, 0);
   \   0000003A   0x2200             MOVS     R2,#+0
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable12_17  ;; 0x4003b000
   \   00000042   0x.... 0x....      BL       LPLD_PDB_AdcTriggerCfg
    429            // LPLD_PDB_AdcTriggerCfg(ADC1, PRETRIG_EN_A, 0);
    430            LPLD_PDB_EnableIrq();
   \   00000046   0x2048             MOVS     R0,#+72
   \   00000048   0x.... 0x....      BL       NVIC_EnableIRQ
    431            //LPLD_PDB_SoftwareTrigger();
    432            
    433          }
   \   0000004C   0xB007             ADD      SP,SP,#+28
   \   0000004E   0xBD00             POP      {PC}             ;; return
    434          

   \                                 In section .text, align 2, keep-with-next
    435          void init_PIT()
    436          {
   \                     init_PIT: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    437            pit0_init_struct.PIT_Pitx = PIT0;     //选择PIT0
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable12_26
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    438            pit0_init_struct.PIT_PeriodUs = MY_SAMPLE_TIME;  //PIT0计数周期500ms
   \   0000000A   0x2019             MOVS     R0,#+25
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable12_26
   \   00000010   0x6048             STR      R0,[R1, #+4]
    439            pit0_init_struct.PIT_Isr = pitdacisr;
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable12_27
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable12_26
   \   0000001A   0x6108             STR      R0,[R1, #+16]
    440            //初始化PIT0
    441            LPLD_PIT_Init(pit0_init_struct); 
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable12_26
   \   00000020   0xB084             SUB      SP,SP,#+16
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x2214             MOVS     R2,#+20
   \   00000026   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002A   0xBC0F             POP      {R0-R3}
   \   0000002C   0x.... 0x....      BL       LPLD_PIT_Init
    442            LPLD_PIT_EnableIrq(pit0_init_struct);
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable12_26
   \   00000034   0xB084             SUB      SP,SP,#+16
   \   00000036   0x4668             MOV      R0,SP
   \   00000038   0x2214             MOVS     R2,#+20
   \   0000003A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000003E   0xBC0F             POP      {R0-R3}
   \   00000040   0x.... 0x....      BL       LPLD_PIT_EnableIrq
    443          }
   \   00000044   0xBD01             POP      {R0,PC}          ;; return
    444          

   \                                 In section .text, align 2, keep-with-next
    445          void init_gpio_PE24()
    446          {
   \                     init_gpio_PE24: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    447            
    448            gpio_init_struct.GPIO_PTx = PTD;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12_28  ;; 0x400ff0c0
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    449            gpio_init_struct.GPIO_Pins = GPIO_Pin7;
   \   0000000C   0x2080             MOVS     R0,#+128
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   00000012   0x6048             STR      R0,[R1, #+4]
    450            gpio_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   0000001A   0x7308             STRB     R0,[R1, #+12]
    451            gpio_init_struct.GPIO_Isr = buttonsetisr;
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable12_30
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   00000024   0x6108             STR      R0,[R1, #+16]
    452            gpio_init_struct.GPIO_PinControl = INPUT_PULL_UP|IRQC_FA;     //内部上拉|下降沿中断
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable12_31  ;; 0xa0003
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   0000002E   0x6088             STR      R0,[R1, #+8]
    453            LPLD_GPIO_Init(gpio_init_struct);
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   00000034   0xB084             SUB      SP,SP,#+16
   \   00000036   0x4668             MOV      R0,SP
   \   00000038   0x2214             MOVS     R2,#+20
   \   0000003A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000003E   0xBC0F             POP      {R0-R3}
   \   00000040   0x.... 0x....      BL       LPLD_GPIO_Init
    454            LPLD_GPIO_EnableIrq(gpio_init_struct);
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   00000048   0xB084             SUB      SP,SP,#+16
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0x2214             MOVS     R2,#+20
   \   0000004E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000052   0xBC0F             POP      {R0-R3}
   \   00000054   0x.... 0x....      BL       LPLD_GPIO_EnableIrq
    455            
    456            gpio_init_struct.GPIO_PTx = PTA;
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable12_32  ;; 0x400ff000
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   00000060   0x6008             STR      R0,[R1, #+0]
    457            gpio_init_struct.GPIO_Pins = GPIO_Pin6|GPIO_Pin8|GPIO_Pin10;
   \   00000062   0xF44F 0x60A8      MOV      R0,#+1344
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   0000006A   0x6048             STR      R0,[R1, #+4]
    458            gpio_init_struct.GPIO_Dir = DIR_INPUT;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   00000072   0x7308             STRB     R0,[R1, #+12]
    459            gpio_init_struct.GPIO_Isr = buttonisr;
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable12_33
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   0000007C   0x6108             STR      R0,[R1, #+16]
    460            gpio_init_struct.GPIO_PinControl = INPUT_PULL_UP|IRQC_FA;     //内部上拉|下降沿中断
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable12_31  ;; 0xa0003
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   00000086   0x6088             STR      R0,[R1, #+8]
    461            LPLD_GPIO_Init(gpio_init_struct);
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   0000008C   0xB084             SUB      SP,SP,#+16
   \   0000008E   0x4668             MOV      R0,SP
   \   00000090   0x2214             MOVS     R2,#+20
   \   00000092   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000096   0xBC0F             POP      {R0-R3}
   \   00000098   0x.... 0x....      BL       LPLD_GPIO_Init
    462            LPLD_GPIO_EnableIrq(gpio_init_struct);
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   000000A0   0xB084             SUB      SP,SP,#+16
   \   000000A2   0x4668             MOV      R0,SP
   \   000000A4   0x2214             MOVS     R2,#+20
   \   000000A6   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000AA   0xBC0F             POP      {R0-R3}
   \   000000AC   0x.... 0x....      BL       LPLD_GPIO_EnableIrq
    463            
    464            
    465            
    466          }
   \   000000B0   0xBD01             POP      {R0,PC}          ;; return
    467          

   \                                 In section .text, align 4, keep-with-next
    468          void main (void)
    469          {
   \                     main: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
    470            /*开硬件浮点*/
    471            SCB->CPACR |=((3UL << 10*2)|(3UL << 11*2));     /* set CP10 and CP11 Full Access */
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable12_34  ;; 0xe000ed88
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF450 0x0070      ORRS     R0,R0,#0xF00000
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable12_34  ;; 0xe000ed88
   \   00000014   0x6008             STR      R0,[R1, #+0]
    472            
    473            
    474            
    475            uint16 flag; 
    476            uint16 i,j;
    477            
    478            DisableInterrupts;
   \   00000016   0xB672             CPSID    I
    479            LCD_init(1);
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       LCD_init
    480            Disp_single_colour(Black);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       Disp_single_colour
    481            LCD_PutString(10, 50,"Frequency: ", White, Black);
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0xF64F 0x73FF      MOVW     R3,#+65535
   \   0000002C   0x.... 0x....      LDR.W    R2,??DataTable12_35
   \   00000030   0x2132             MOVS     R1,#+50
   \   00000032   0x200A             MOVS     R0,#+10
   \   00000034   0x.... 0x....      BL       LCD_PutString
    482            LCD_PutString(145, 50,"  KHz", White, Black);
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0xF64F 0x73FF      MOVW     R3,#+65535
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable12_36
   \   00000044   0x2132             MOVS     R1,#+50
   \   00000046   0x2091             MOVS     R0,#+145
   \   00000048   0x.... 0x....      BL       LCD_PutString
    483            LCD_PutString(10, 80,"Power: ", White, Black);
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x9000             STR      R0,[SP, #+0]
   \   00000050   0xF64F 0x73FF      MOVW     R3,#+65535
   \   00000054   0x.... 0x....      LDR.W    R2,??DataTable12_37
   \   00000058   0x2150             MOVS     R1,#+80
   \   0000005A   0x200A             MOVS     R0,#+10
   \   0000005C   0x.... 0x....      BL       LCD_PutString
    484            LCD_PutString(145, 80,"   W", White, Black);
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x9000             STR      R0,[SP, #+0]
   \   00000064   0xF64F 0x73FF      MOVW     R3,#+65535
   \   00000068   0x.... 0x....      LDR.W    R2,??DataTable12_38
   \   0000006C   0x2150             MOVS     R1,#+80
   \   0000006E   0x2091             MOVS     R0,#+145
   \   00000070   0x.... 0x....      BL       LCD_PutString
    485            LCD_PutString(10, 110,"Amplify: ", White, Black);
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0xF64F 0x73FF      MOVW     R3,#+65535
   \   0000007C   0x.... 0x....      LDR.W    R2,??DataTable12_39
   \   00000080   0x216E             MOVS     R1,#+110
   \   00000082   0x200A             MOVS     R0,#+10
   \   00000084   0x.... 0x....      BL       LCD_PutString
    486            LCD_PutString(165, 110,"Restrain: ", White, Black);
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0x9000             STR      R0,[SP, #+0]
   \   0000008C   0xF64F 0x73FF      MOVW     R3,#+65535
   \   00000090   0x.... 0x....      LDR.W    R2,??DataTable12_40
   \   00000094   0x216E             MOVS     R1,#+110
   \   00000096   0x20A5             MOVS     R0,#+165
   \   00000098   0x.... 0x....      BL       LCD_PutString
    487            init_ADC();
   \   0000009C   0x.... 0x....      BL       init_ADC
    488            init_DAC();
   \   000000A0   0x.... 0x....      BL       init_DAC
    489            init_DMA();
   \   000000A4   0x.... 0x....      BL       init_DMA
    490            init_PDB();
   \   000000A8   0x.... 0x....      BL       init_PDB
    491            init_PIT();
   \   000000AC   0x.... 0x....      BL       init_PIT
    492            init_gpio_PE24();
   \   000000B0   0x.... 0x....      BL       init_gpio_PE24
    493            EnableInterrupts;
   \   000000B4   0xB662             CPSIE    I
    494            LPLD_LPTMR_DelayMs(100);
   \   000000B6   0x2064             MOVS     R0,#+100
   \   000000B8   0x.... 0x....      BL       LPLD_LPTMR_DelayMs
    495            
    496            
    497            
    498            flag = Result_flag;
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable12
   \   000000C0   0x8800             LDRH     R0,[R0, #+0]
   \   000000C2   0x4683             MOV      R11,R0
    499            uint16 ShowAFlag = 0;
   \   000000C4   0x2400             MOVS     R4,#+0
    500            uint16 ShowBFlag = 0;
   \   000000C6   0x2700             MOVS     R7,#+0
    501            uint16 ShowCFlag = 0;
   \   000000C8   0xF05F 0x0A00      MOVS     R10,#+0
    502            
    503            arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable12_41
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x9000             STR      R0,[SP, #+0]
   \   000000D4   0x.... 0x....      LDR.W    R3,??DataTable12_42
   \   000000D8   0x.... 0x....      LDR.W    R2,??DataTable12_43
   \   000000DC   0xF240 0x1101      MOVW     R1,#+257
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable12_44
   \   000000E4   0x.... 0x....      BL       arm_fir_init_f32
    504            while(1)
    505            {
    506              if( flag==Result_flag && Result_flag == 0)
   \                     ??main_0: (+1)
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable12
   \   000000EC   0x8800             LDRH     R0,[R0, #+0]
   \   000000EE   0xFA1F 0xFB8B      UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   000000F2   0x4583             CMP      R11,R0
   \   000000F4   0xF040 0x80EF      BNE.W    ??main_1
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable12
   \   000000FC   0x8800             LDRH     R0,[R0, #+0]
   \   000000FE   0x2800             CMP      R0,#+0
   \   00000100   0xF040 0x80E9      BNE.W    ??main_1
    507              {
    508                if(++ShowAFlag<10)
   \   00000104   0x1C64             ADDS     R4,R4,#+1
   \   00000106   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000108   0x2C0A             CMP      R4,#+10
   \   0000010A   0xDA4E             BGE.N    ??main_2
    509                {
    510                  for(j = 0;j<LENGTH;j++)
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0x0006             MOVS     R6,R0
   \                     ??main_3: (+1)
   \   00000110   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000112   0xF5B6 0x6F00      CMP      R6,#+2048
   \   00000116   0xDA11             BGE.N    ??main_4
    511                    testInput_x[j*2] = Result_A[j];
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable12_45
   \   0000011C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000011E   0xF830 0x0016      LDRH     R0,[R0, R6, LSL #+1]
   \   00000122   0xEE00 0x0A10      VMOV     S0,R0
   \   00000126   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   0000012A   0x.... 0x....      LDR.W    R0,??DataTable12_46
   \   0000012E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000130   0xEB10 0x00C6      ADDS     R0,R0,R6, LSL #+3
   \   00000134   0xED80 0x0A00      VSTR     S0,[R0, #0]
   \   00000138   0x1C76             ADDS     R6,R6,#+1
   \   0000013A   0xE7E9             B.N      ??main_3
    512                  for(j = 0;j<LENGTH;j++)
   \                     ??main_4: (+1)
   \   0000013C   0x2000             MOVS     R0,#+0
   \   0000013E   0x0006             MOVS     R6,R0
   \                     ??main_5: (+1)
   \   00000140   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000142   0xF5B6 0x6F00      CMP      R6,#+2048
   \   00000146   0xDA09             BGE.N    ??main_6
    513                    testInput_x[j*2+1] = 0;
   \   00000148   0x.... 0x....      LDR.W    R0,??DataTable12_46
   \   0000014C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000014E   0x0071             LSLS     R1,R6,#+1
   \   00000150   0xEB10 0x0081      ADDS     R0,R0,R1, LSL #+2
   \   00000154   0x2100             MOVS     R1,#+0
   \   00000156   0x6041             STR      R1,[R0, #+4]
   \   00000158   0x1C76             ADDS     R6,R6,#+1
   \   0000015A   0xE7F1             B.N      ??main_5
    514                  
    515                  arm_cfft_f32(&arm_cfft_sR_f32_len2048, testInput_x, ifftFlag, doBitReverse);
   \                     ??main_6: (+1)
   \   0000015C   0x.... 0x....      LDR.W    R0,??DataTable12_47
   \   00000160   0x6803             LDR      R3,[R0, #+0]
   \   00000162   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable12_48
   \   00000168   0x6802             LDR      R2,[R0, #+0]
   \   0000016A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000016C   0x.... 0x....      LDR.W    R1,??DataTable12_46
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable12_49
   \   00000174   0x.... 0x....      BL       arm_cfft_f32
    516                  
    517                  /* Process the data through the Complex Magnitude Module for
    518                  calculating the magnitude at each bin */
    519                  arm_cmplx_mag_f32(testInput_x, testOutput, fftSize);
   \   00000178   0x.... 0x....      LDR.W    R0,??DataTable12_50
   \   0000017C   0x6802             LDR      R2,[R0, #+0]
   \   0000017E   0x.... 0x....      LDR.W    R1,??DataTable12_51
   \   00000182   0x.... 0x....      LDR.W    R0,??DataTable12_46
   \   00000186   0x.... 0x....      BL       arm_cmplx_mag_f32
    520                  
    521                  testOutput[0] = 0;
   \   0000018A   0x.... 0x....      LDR.W    R0,??DataTable12_51
   \   0000018E   0x2100             MOVS     R1,#+0
   \   00000190   0x6001             STR      R1,[R0, #+0]
    522                  /* Calculates maxValue and returns corresponding BIN value */
    523                  arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
   \   00000192   0x.... 0x....      LDR.W    R3,??DataTable12_52
   \   00000196   0x.... 0x....      LDR.W    R2,??DataTable12_53
   \   0000019A   0x.... 0x....      LDR.W    R0,??DataTable12_50
   \   0000019E   0x6801             LDR      R1,[R0, #+0]
   \   000001A0   0x.... 0x....      LDR.W    R0,??DataTable12_51
   \   000001A4   0x.... 0x....      BL       arm_max_f32
   \   000001A8   0xE024             B.N      ??main_7
    524                }
    525                else
    526                {
    527                  ShowAFlag = 0;
   \                     ??main_2: (+1)
   \   000001AA   0x2000             MOVS     R0,#+0
   \   000001AC   0x0004             MOVS     R4,R0
    528                  if(starfir !=2 )
   \   000001AE   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   000001B2   0x7800             LDRB     R0,[R0, #+0]
   \   000001B4   0x2802             CMP      R0,#+2
   \   000001B6   0xD01D             BEQ.N    ??main_7
    529                      LCD_Put_Float(100, 50,"",testIndex*40.0/2048, White, Black);
   \   000001B8   0x2000             MOVS     R0,#+0
   \   000001BA   0x9000             STR      R0,[SP, #+0]
   \   000001BC   0xF64F 0x73FF      MOVW     R3,#+65535
   \   000001C0   0x4698             MOV      R8,R3
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable12_52
   \   000001C6   0x6800             LDR      R0,[R0, #+0]
   \   000001C8   0x.... 0x....      BL       __aeabi_ui2d
   \   000001CC   0x2200             MOVS     R2,#+0
   \   000001CE   0x.... 0x....      LDR.W    R3,??DataTable12_54  ;; 0x40440000
   \   000001D2   0x.... 0x....      BL       __aeabi_dmul
   \   000001D6   0x2200             MOVS     R2,#+0
   \   000001D8   0x.... 0x....      LDR.W    R3,??DataTable12_55  ;; 0x40a00000
   \   000001DC   0x.... 0x....      BL       __aeabi_ddiv
   \   000001E0   0x.... 0x....      BL       __aeabi_d2f
   \   000001E4   0xEE00 0x0A10      VMOV     S0,R0
   \   000001E8   0x4643             MOV      R3,R8
   \   000001EA   0xA2D7             ADR.N    R2,??main_8      ;; ""
   \   000001EC   0x2132             MOVS     R1,#+50
   \   000001EE   0x2064             MOVS     R0,#+100
   \   000001F0   0x.... 0x....      BL       LCD_Put_Float
    530                }
    531                if(starfir == 1)
   \                     ??main_7: (+1)
   \   000001F4   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   000001F8   0x7800             LDRB     R0,[R0, #+0]
   \   000001FA   0x2801             CMP      R0,#+1
   \   000001FC   0xD168             BNE.N    ??main_9
    532                {
    533                  PTE24_O = 1;
   \   000001FE   0x2001             MOVS     R0,#+1
   \   00000200   0x.... 0x....      LDR.W    R1,??DataTable12_56  ;; 0x43fe2060
   \   00000204   0x6008             STR      R0,[R1, #+0]
    534                  for(j = 0;j<LENGTH;j++)
   \   00000206   0x2000             MOVS     R0,#+0
   \   00000208   0x0006             MOVS     R6,R0
   \                     ??main_10: (+1)
   \   0000020A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000020C   0xF5B6 0x6F00      CMP      R6,#+2048
   \   00000210   0xDA11             BGE.N    ??main_11
    535                    firInput[j] = Result_A[j];
   \   00000212   0x.... 0x....      LDR.W    R0,??DataTable12_45
   \   00000216   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000218   0xF830 0x0016      LDRH     R0,[R0, R6, LSL #+1]
   \   0000021C   0xEE00 0x0A10      VMOV     S0,R0
   \   00000220   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000224   0x.... 0x....      LDR.W    R0,??DataTable12_57
   \   00000228   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000022A   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   0000022E   0xED80 0x0A00      VSTR     S0,[R0, #0]
   \   00000232   0x1C76             ADDS     R6,R6,#+1
   \   00000234   0xE7E9             B.N      ??main_10
    536                  inputF32 = &firInput[0];
   \                     ??main_11: (+1)
   \   00000236   0x.... 0x....      LDR.W    R0,??DataTable12_57
   \   0000023A   0x.... 0x....      LDR.W    R1,??DataTable12_58
   \   0000023E   0x6008             STR      R0,[R1, #+0]
    537                  outputF32 = &firOutput[0];
   \   00000240   0x.... 0x....      LDR.W    R0,??DataTable12_59
   \   00000244   0x.... 0x....      LDR.W    R1,??DataTable12_60
   \   00000248   0x6008             STR      R0,[R1, #+0]
    538                  for(i=0; i < numBlocks; i++)
   \   0000024A   0x2000             MOVS     R0,#+0
   \   0000024C   0x0005             MOVS     R5,R0
   \                     ??main_12: (+1)
   \   0000024E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000250   0x.... 0x....      LDR.W    R0,??DataTable12_61
   \   00000254   0x6800             LDR      R0,[R0, #+0]
   \   00000256   0x4285             CMP      R5,R0
   \   00000258   0xD21E             BCS.N    ??main_13
    539                    arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
   \   0000025A   0x.... 0x....      LDR.W    R0,??DataTable12_41
   \   0000025E   0x6803             LDR      R3,[R0, #+0]
   \   00000260   0x.... 0x....      LDR.W    R0,??DataTable12_60
   \   00000264   0x6800             LDR      R0,[R0, #+0]
   \   00000266   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000268   0x.... 0x....      LDR.W    R1,??DataTable12_41
   \   0000026C   0x6809             LDR      R1,[R1, #+0]
   \   0000026E   0xFB01 0xF105      MUL      R1,R1,R5
   \   00000272   0xEB10 0x0281      ADDS     R2,R0,R1, LSL #+2
   \   00000276   0x.... 0x....      LDR.W    R0,??DataTable12_58
   \   0000027A   0x6800             LDR      R0,[R0, #+0]
   \   0000027C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000027E   0x.... 0x....      LDR.W    R1,??DataTable12_41
   \   00000282   0x6809             LDR      R1,[R1, #+0]
   \   00000284   0xFB01 0xF105      MUL      R1,R1,R5
   \   00000288   0xEB10 0x0181      ADDS     R1,R0,R1, LSL #+2
   \   0000028C   0x.... 0x....      LDR.W    R0,??DataTable12_44
   \   00000290   0x.... 0x....      BL       arm_fir_f32
   \   00000294   0x1C6D             ADDS     R5,R5,#+1
   \   00000296   0xE7DA             B.N      ??main_12
    540                  for(j = 0;j<LENGTH;j++)
   \                     ??main_13: (+1)
   \   00000298   0x2000             MOVS     R0,#+0
   \   0000029A   0x0006             MOVS     R6,R0
   \                     ??main_14: (+1)
   \   0000029C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000029E   0xF5B6 0x6F00      CMP      R6,#+2048
   \   000002A2   0xDA11             BGE.N    ??main_15
    541                    Result_A[j] = firOutput[j];
   \   000002A4   0x.... 0x....      LDR.W    R0,??DataTable12_59
   \   000002A8   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000002AA   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000002AE   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000002B2   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000002B6   0xEE10 0x0A10      VMOV     R0,S0
   \   000002BA   0x.... 0x....      LDR.W    R1,??DataTable12_45
   \   000002BE   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000002C0   0xF821 0x0016      STRH     R0,[R1, R6, LSL #+1]
   \   000002C4   0x1C76             ADDS     R6,R6,#+1
   \   000002C6   0xE7E9             B.N      ??main_14
    542                  PTE24_O = 0;
   \                     ??main_15: (+1)
   \   000002C8   0x2000             MOVS     R0,#+0
   \   000002CA   0x.... 0x....      LDR.W    R1,??DataTable12_56  ;; 0x43fe2060
   \   000002CE   0x6008             STR      R0,[R1, #+0]
    543                }
    544                flag = 1;
   \                     ??main_9: (+1)
   \   000002D0   0x2001             MOVS     R0,#+1
   \   000002D2   0x4683             MOV      R11,R0
   \   000002D4   0xE708             B.N      ??main_0
    545              }
    546              else  if(flag==Result_flag && Result_flag == 1)
   \                     ??main_1: (+1)
   \   000002D6   0x.... 0x....      LDR.W    R0,??DataTable12
   \   000002DA   0x8800             LDRH     R0,[R0, #+0]
   \   000002DC   0xFA1F 0xFB8B      UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   000002E0   0x4583             CMP      R11,R0
   \   000002E2   0xF040 0x810A      BNE.W    ??main_16
   \   000002E6   0x.... 0x....      LDR.W    R0,??DataTable12
   \   000002EA   0x8800             LDRH     R0,[R0, #+0]
   \   000002EC   0x2801             CMP      R0,#+1
   \   000002EE   0xF040 0x8104      BNE.W    ??main_16
    547              {
    548                if(starfir !=2 )
   \   000002F2   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   000002F6   0x7800             LDRB     R0,[R0, #+0]
   \   000002F8   0x2802             CMP      R0,#+2
   \   000002FA   0xD073             BEQ.N    ??main_17
    549                {
    550                  if(++ShowBFlag<10)
   \   000002FC   0x1C7F             ADDS     R7,R7,#+1
   \   000002FE   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000300   0x2F0A             CMP      R7,#+10
   \   00000302   0xDA5F             BGE.N    ??main_18
    551                  {
    552                    power = 0;
   \   00000304   0x.... 0x....      LDR.W    R0,??DataTable12_62
   \   00000308   0x2100             MOVS     R1,#+0
   \   0000030A   0x6001             STR      R1,[R0, #+0]
    553                    for(i=0;i<LENGTH;i++)
   \   0000030C   0x2000             MOVS     R0,#+0
   \   0000030E   0x0005             MOVS     R5,R0
   \                     ??main_19: (+1)
   \   00000310   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000312   0xF5B5 0x6F00      CMP      R5,#+2048
   \   00000316   0xDA48             BGE.N    ??main_20
    554                      power+=((Result_B[i] - OFFEST)/1241.0)*((Result_B[i] - OFFEST)/1241.0)*90*MyDb/8.0;
   \   00000318   0x.... 0x....      LDR.W    R0,??DataTable12_62
   \   0000031C   0x6800             LDR      R0,[R0, #+0]
   \   0000031E   0x.... 0x....      BL       __aeabi_f2d
   \   00000322   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000326   0x.... 0x....      LDR.W    R0,??DataTable12_63
   \   0000032A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000032C   0xF830 0x0015      LDRH     R0,[R0, R5, LSL #+1]
   \   00000330   0xF6A0 0x10F3      SUBW     R0,R0,#+2547
   \   00000334   0x.... 0x....      BL       __aeabi_i2d
   \   00000338   0x2200             MOVS     R2,#+0
   \   0000033A   0x.... 0x....      LDR.W    R3,??DataTable12_64  ;; 0x40936400
   \   0000033E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000342   0x4680             MOV      R8,R0
   \   00000344   0x4689             MOV      R9,R1
   \   00000346   0x.... 0x....      LDR.W    R0,??DataTable12_63
   \   0000034A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000034C   0xF830 0x0015      LDRH     R0,[R0, R5, LSL #+1]
   \   00000350   0xF6A0 0x10F3      SUBW     R0,R0,#+2547
   \   00000354   0x.... 0x....      BL       __aeabi_i2d
   \   00000358   0x2200             MOVS     R2,#+0
   \   0000035A   0x.... 0x....      LDR.W    R3,??DataTable12_64  ;; 0x40936400
   \   0000035E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000362   0x4642             MOV      R2,R8
   \   00000364   0x464B             MOV      R3,R9
   \   00000366   0x.... 0x....      BL       __aeabi_dmul
   \   0000036A   0x2200             MOVS     R2,#+0
   \   0000036C   0x.... 0x....      LDR.W    R3,??DataTable12_65  ;; 0x40568000
   \   00000370   0x.... 0x....      BL       __aeabi_dmul
   \   00000374   0x4680             MOV      R8,R0
   \   00000376   0x4689             MOV      R9,R1
   \   00000378   0x.... 0x....      LDR.W    R0,??DataTable12_66
   \   0000037C   0x6800             LDR      R0,[R0, #+0]
   \   0000037E   0x.... 0x....      BL       __aeabi_f2d
   \   00000382   0x4642             MOV      R2,R8
   \   00000384   0x464B             MOV      R3,R9
   \   00000386   0x.... 0x....      BL       __aeabi_dmul
   \   0000038A   0x2200             MOVS     R2,#+0
   \   0000038C   0x.... 0x....      LDR.W    R3,??DataTable12_67  ;; 0x40200000
   \   00000390   0x.... 0x....      BL       __aeabi_ddiv
   \   00000394   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   00000398   0x.... 0x....      BL       __aeabi_dadd
   \   0000039C   0x.... 0x....      BL       __aeabi_d2f
   \   000003A0   0x.... 0x....      LDR.W    R1,??DataTable12_62
   \   000003A4   0x6008             STR      R0,[R1, #+0]
   \   000003A6   0x1C6D             ADDS     R5,R5,#+1
   \   000003A8   0xE7B2             B.N      ??main_19
    555                    power = power/LENGTH;
   \                     ??main_20: (+1)
   \   000003AA   0x.... 0x....      LDR.W    R0,??DataTable12_62
   \   000003AE   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000003B2   0xEDDF 0x0ACA      VLDR.W   S1,??main_21     ;; 0x45000000
   \   000003B6   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   000003BA   0x.... 0x....      LDR.W    R0,??DataTable12_62
   \   000003BE   0xED80 0x0A00      VSTR     S0,[R0, #0]
   \   000003C2   0xE038             B.N      ??main_22
    556                  }
    557                  else
    558                  {
    559                    ShowBFlag = 0;
   \                     ??main_18: (+1)
   \   000003C4   0x2000             MOVS     R0,#+0
   \   000003C6   0x0007             MOVS     R7,R0
    560                    LCD_Put_Float(100, 80,"",power, White, Black);
   \   000003C8   0x2000             MOVS     R0,#+0
   \   000003CA   0x9000             STR      R0,[SP, #+0]
   \   000003CC   0xF64F 0x73FF      MOVW     R3,#+65535
   \   000003D0   0x.... 0x....      LDR.W    R0,??DataTable12_62
   \   000003D4   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000003D8   0xA25B             ADR.N    R2,??main_8      ;; ""
   \   000003DA   0x2150             MOVS     R1,#+80
   \   000003DC   0x2064             MOVS     R0,#+100
   \   000003DE   0x.... 0x....      BL       LCD_Put_Float
   \   000003E2   0xE028             B.N      ??main_22
    561                  }
    562                }
    563                else
    564                {
    565                  for(i = 0;i<160;i++)
   \                     ??main_17: (+1)
   \   000003E4   0x2000             MOVS     R0,#+0
   \   000003E6   0x0005             MOVS     R5,R0
   \                     ??main_23: (+1)
   \   000003E8   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000003EA   0x2DA0             CMP      R5,#+160
   \   000003EC   0xDA23             BGE.N    ??main_22
    566                  {
    567                    FFT_RESULT_NEW[i] = testOutput[i*6]/FFT_VALUE;
   \   000003EE   0x.... 0x....      LDR.W    R0,??DataTable12_51
   \   000003F2   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000003F4   0x2118             MOVS     R1,#+24
   \   000003F6   0xFB01 0x0005      MLA      R0,R1,R5,R0
   \   000003FA   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000003FE   0xEDDF 0x0AB8      VLDR.W   S1,??main_21+0x4  ;; 0x44268000
   \   00000402   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000406   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000040A   0xEE10 0x0A10      VMOV     R0,S0
   \   0000040E   0x.... 0x....      LDR.W    R1,??DataTable12_68
   \   00000412   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000414   0xF821 0x0015      STRH     R0,[R1, R5, LSL #+1]
    568                    if(FFT_RESULT_NEW[i]>239) FFT_RESULT_NEW[i] = 239;
   \   00000418   0x.... 0x....      LDR.W    R0,??DataTable12_68
   \   0000041C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000041E   0xF830 0x0015      LDRH     R0,[R0, R5, LSL #+1]
   \   00000422   0x28F0             CMP      R0,#+240
   \   00000424   0xDB05             BLT.N    ??main_24
   \   00000426   0x20EF             MOVS     R0,#+239
   \   00000428   0x.... 0x....      LDR.W    R1,??DataTable12_68
   \   0000042C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000042E   0xF821 0x0015      STRH     R0,[R1, R5, LSL #+1]
    569                  }
   \                     ??main_24: (+1)
   \   00000432   0x1C6D             ADDS     R5,R5,#+1
   \   00000434   0xE7D8             B.N      ??main_23
    570                }
    571                
    572                //     {
    573                //     for(j = 0;j<LENGTH;j++)
    574                //       testInput_x[j*2] = Result_B[j];
    575                //     for(j = 0;j<LENGTH;j++)
    576                //       testInput_x[j*2+1] = 0;
    577                //     
    578                //     arm_cfft_f32(&arm_cfft_sR_f32_len2048, testInput_x, ifftFlag, doBitReverse);
    579                //
    580                //  /* Process the data through the Complex Magnitude Module for
    581                //  calculating the magnitude at each bin */
    582                //    arm_cmplx_mag_f32(testInput_x, testOutput, fftSize);
    583                //
    584                //    testOutput[0] = 0;
    585                //  /* Calculates maxValue and returns corresponding BIN value */
    586                //    arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
    587                //     }
    588                if(starfir == 1)
   \                     ??main_22: (+1)
   \   00000436   0x....             LDR.N    R0,??DataTable12_11
   \   00000438   0x7800             LDRB     R0,[R0, #+0]
   \   0000043A   0x2801             CMP      R0,#+1
   \   0000043C   0xD15A             BNE.N    ??main_25
    589                {
    590                  PTE24_O = 1;
   \   0000043E   0x2001             MOVS     R0,#+1
   \   00000440   0x.... 0x....      LDR.W    R1,??DataTable12_56  ;; 0x43fe2060
   \   00000444   0x6008             STR      R0,[R1, #+0]
    591                  for(j = 0;j<LENGTH;j++)
   \   00000446   0x2000             MOVS     R0,#+0
   \   00000448   0x0006             MOVS     R6,R0
   \                     ??main_26: (+1)
   \   0000044A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000044C   0xF5B6 0x6F00      CMP      R6,#+2048
   \   00000450   0xDA11             BGE.N    ??main_27
    592                    firInput[j] = Result_B[j];
   \   00000452   0x.... 0x....      LDR.W    R0,??DataTable12_63
   \   00000456   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000458   0xF830 0x0016      LDRH     R0,[R0, R6, LSL #+1]
   \   0000045C   0xEE00 0x0A10      VMOV     S0,R0
   \   00000460   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000464   0x.... 0x....      LDR.W    R0,??DataTable12_57
   \   00000468   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000046A   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   0000046E   0xED80 0x0A00      VSTR     S0,[R0, #0]
   \   00000472   0x1C76             ADDS     R6,R6,#+1
   \   00000474   0xE7E9             B.N      ??main_26
    593                  inputF32 = &firInput[0];
   \                     ??main_27: (+1)
   \   00000476   0x....             LDR.N    R0,??DataTable12_57
   \   00000478   0x....             LDR.N    R1,??DataTable12_58
   \   0000047A   0x6008             STR      R0,[R1, #+0]
    594                  outputF32 = &firOutput[0];
   \   0000047C   0x....             LDR.N    R0,??DataTable12_59
   \   0000047E   0x....             LDR.N    R1,??DataTable12_60
   \   00000480   0x6008             STR      R0,[R1, #+0]
    595                  for(i=0; i < numBlocks; i++)
   \   00000482   0x2000             MOVS     R0,#+0
   \   00000484   0x0005             MOVS     R5,R0
   \                     ??main_28: (+1)
   \   00000486   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000488   0x....             LDR.N    R0,??DataTable12_61
   \   0000048A   0x6800             LDR      R0,[R0, #+0]
   \   0000048C   0x4285             CMP      R5,R0
   \   0000048E   0xD218             BCS.N    ??main_29
    596                    arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
   \   00000490   0x....             LDR.N    R0,??DataTable12_41
   \   00000492   0x6803             LDR      R3,[R0, #+0]
   \   00000494   0x....             LDR.N    R0,??DataTable12_60
   \   00000496   0x6800             LDR      R0,[R0, #+0]
   \   00000498   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000049A   0x....             LDR.N    R1,??DataTable12_41
   \   0000049C   0x6809             LDR      R1,[R1, #+0]
   \   0000049E   0xFB01 0xF105      MUL      R1,R1,R5
   \   000004A2   0xEB10 0x0281      ADDS     R2,R0,R1, LSL #+2
   \   000004A6   0x....             LDR.N    R0,??DataTable12_58
   \   000004A8   0x6800             LDR      R0,[R0, #+0]
   \   000004AA   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000004AC   0x....             LDR.N    R1,??DataTable12_41
   \   000004AE   0x6809             LDR      R1,[R1, #+0]
   \   000004B0   0xFB01 0xF105      MUL      R1,R1,R5
   \   000004B4   0xEB10 0x0181      ADDS     R1,R0,R1, LSL #+2
   \   000004B8   0x....             LDR.N    R0,??DataTable12_44
   \   000004BA   0x.... 0x....      BL       arm_fir_f32
   \   000004BE   0x1C6D             ADDS     R5,R5,#+1
   \   000004C0   0xE7E1             B.N      ??main_28
    597                  for(j = 0;j<LENGTH;j++)
   \                     ??main_29: (+1)
   \   000004C2   0x2000             MOVS     R0,#+0
   \   000004C4   0x0006             MOVS     R6,R0
   \                     ??main_30: (+1)
   \   000004C6   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000004C8   0xF5B6 0x6F00      CMP      R6,#+2048
   \   000004CC   0xDA0F             BGE.N    ??main_31
    598                    Result_B[j] = firOutput[j];
   \   000004CE   0x....             LDR.N    R0,??DataTable12_59
   \   000004D0   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000004D2   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000004D6   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000004DA   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000004DE   0xEE10 0x0A10      VMOV     R0,S0
   \   000004E2   0x....             LDR.N    R1,??DataTable12_63
   \   000004E4   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000004E6   0xF821 0x0016      STRH     R0,[R1, R6, LSL #+1]
   \   000004EA   0x1C76             ADDS     R6,R6,#+1
   \   000004EC   0xE7EB             B.N      ??main_30
    599                  PTE24_O = 0;
   \                     ??main_31: (+1)
   \   000004EE   0x2000             MOVS     R0,#+0
   \   000004F0   0x....             LDR.N    R1,??DataTable12_56  ;; 0x43fe2060
   \   000004F2   0x6008             STR      R0,[R1, #+0]
    600                }
    601                flag = 2;
   \                     ??main_25: (+1)
   \   000004F4   0x2002             MOVS     R0,#+2
   \   000004F6   0x4683             MOV      R11,R0
   \   000004F8   0xE5F6             B.N      ??main_0
    602              }
    603              else if(flag==Result_flag && Result_flag == 2)
   \                     ??main_16: (+1)
   \   000004FA   0x....             LDR.N    R0,??DataTable12
   \   000004FC   0x8800             LDRH     R0,[R0, #+0]
   \   000004FE   0xFA1F 0xFB8B      UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   00000502   0x4583             CMP      R11,R0
   \   00000504   0xF47F 0xADF0      BNE.W    ??main_0
   \   00000508   0x....             LDR.N    R0,??DataTable12
   \   0000050A   0x8800             LDRH     R0,[R0, #+0]
   \   0000050C   0x2802             CMP      R0,#+2
   \   0000050E   0xF47F 0xADEB      BNE.W    ??main_0
    604              {
    605                //   
    606                //    {
    607                //     for(j = 0;j<LENGTH;j++)
    608                //       testInput_x[j*2] = Result_C[j];
    609                //     for(j = 0;j<LENGTH;j++)
    610                //       testInput_x[j*2+1] = 0;
    611                //     
    612                //     arm_cfft_f32(&arm_cfft_sR_f32_len2048, testInput_x, ifftFlag, doBitReverse);
    613                //
    614                //  /* Process the data through the Complex Magnitude Module for
    615                //  calculating the magnitude at each bin */
    616                //    arm_cmplx_mag_f32(testInput_x, testOutput, fftSize);
    617                //
    618                //    testOutput[0] = 0;
    619                //  /* Calculates maxValue and returns corresponding BIN value */
    620                //    arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
    621                //     }
    622                if(starfir == 1)
   \   00000512   0x....             LDR.N    R0,??DataTable12_11
   \   00000514   0x7800             LDRB     R0,[R0, #+0]
   \   00000516   0x2801             CMP      R0,#+1
   \   00000518   0xD154             BNE.N    ??main_32
    623                {
    624                  //    PTE24_O = 1;
    625                  for(j = 0;j<LENGTH;j++)
   \   0000051A   0x2000             MOVS     R0,#+0
   \   0000051C   0x0006             MOVS     R6,R0
   \                     ??main_33: (+1)
   \   0000051E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000520   0xF5B6 0x6F00      CMP      R6,#+2048
   \   00000524   0xDA12             BGE.N    ??main_34
    626                    firInput[j] = Result_C[j];
   \   00000526   0x....             LDR.N    R0,??DataTable12_69
   \   00000528   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000052A   0xF830 0x0016      LDRH     R0,[R0, R6, LSL #+1]
   \   0000052E   0xEE00 0x0A10      VMOV     S0,R0
   \   00000532   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000536   0x....             LDR.N    R0,??DataTable12_57
   \   00000538   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000053A   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   0000053E   0xED80 0x0A00      VSTR     S0,[R0, #0]
   \   00000542   0x1C76             ADDS     R6,R6,#+1
   \   00000544   0xE7EB             B.N      ??main_33
   \   00000546   0xBF00             Nop      
   \                     ??main_8:
   \   00000548   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    
    627                  inputF32 = &firInput[0];
   \                     ??main_34: (+1)
   \   0000054C   0x....             LDR.N    R0,??DataTable12_57
   \   0000054E   0x....             LDR.N    R1,??DataTable12_58
   \   00000550   0x6008             STR      R0,[R1, #+0]
    628                  outputF32 = &firOutput[0];
   \   00000552   0x....             LDR.N    R0,??DataTable12_59
   \   00000554   0x....             LDR.N    R1,??DataTable12_60
   \   00000556   0x6008             STR      R0,[R1, #+0]
    629                  for(i=0; i < numBlocks; i++)
   \   00000558   0x2000             MOVS     R0,#+0
   \   0000055A   0x0005             MOVS     R5,R0
   \                     ??main_35: (+1)
   \   0000055C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000055E   0x....             LDR.N    R0,??DataTable12_61
   \   00000560   0x6800             LDR      R0,[R0, #+0]
   \   00000562   0x4285             CMP      R5,R0
   \   00000564   0xD218             BCS.N    ??main_36
    630                    arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
   \   00000566   0x....             LDR.N    R0,??DataTable12_41
   \   00000568   0x6803             LDR      R3,[R0, #+0]
   \   0000056A   0x....             LDR.N    R0,??DataTable12_60
   \   0000056C   0x6800             LDR      R0,[R0, #+0]
   \   0000056E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000570   0x....             LDR.N    R1,??DataTable12_41
   \   00000572   0x6809             LDR      R1,[R1, #+0]
   \   00000574   0xFB01 0xF105      MUL      R1,R1,R5
   \   00000578   0xEB10 0x0281      ADDS     R2,R0,R1, LSL #+2
   \   0000057C   0x....             LDR.N    R0,??DataTable12_58
   \   0000057E   0x6800             LDR      R0,[R0, #+0]
   \   00000580   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000582   0x....             LDR.N    R1,??DataTable12_41
   \   00000584   0x6809             LDR      R1,[R1, #+0]
   \   00000586   0xFB01 0xF105      MUL      R1,R1,R5
   \   0000058A   0xEB10 0x0181      ADDS     R1,R0,R1, LSL #+2
   \   0000058E   0x....             LDR.N    R0,??DataTable12_44
   \   00000590   0x.... 0x....      BL       arm_fir_f32
   \   00000594   0x1C6D             ADDS     R5,R5,#+1
   \   00000596   0xE7E1             B.N      ??main_35
    631                  for(j = 0;j<LENGTH;j++)
   \                     ??main_36: (+1)
   \   00000598   0x2000             MOVS     R0,#+0
   \   0000059A   0x0006             MOVS     R6,R0
   \                     ??main_37: (+1)
   \   0000059C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000059E   0xF5B6 0x6F00      CMP      R6,#+2048
   \   000005A2   0xDA0F             BGE.N    ??main_32
    632                    Result_C[j] = firOutput[j];
   \   000005A4   0x....             LDR.N    R0,??DataTable12_59
   \   000005A6   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000005A8   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000005AC   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000005B0   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000005B4   0xEE10 0x0A10      VMOV     R0,S0
   \   000005B8   0x....             LDR.N    R1,??DataTable12_69
   \   000005BA   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000005BC   0xF821 0x0016      STRH     R0,[R1, R6, LSL #+1]
   \   000005C0   0x1C76             ADDS     R6,R6,#+1
   \   000005C2   0xE7EB             B.N      ??main_37
    633                  //   PTE24_O = 0;
    634                }
    635                if(starfir != 2)
   \                     ??main_32: (+1)
   \   000005C4   0x....             LDR.N    R0,??DataTable12_11
   \   000005C6   0x7800             LDRB     R0,[R0, #+0]
   \   000005C8   0x2802             CMP      R0,#+2
   \   000005CA   0xD077             BEQ.N    ??main_38
    636                {
    637                  if(++ShowCFlag<5)
   \   000005CC   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   000005D0   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000005D4   0xF1BA 0x0F05      CMP      R10,#+5
   \   000005D8   0xDB7C             BLT.N    ??main_39
    638                  {
    639                  }
    640                  else
    641                  {
    642                    if(ShowMenu)
   \   000005DA   0x....             LDR.N    R0,??DataTable12_13
   \   000005DC   0x8800             LDRH     R0,[R0, #+0]
   \   000005DE   0x2800             CMP      R0,#+0
   \   000005E0   0xD03B             BEQ.N    ??main_40
    643                    {
    644                      Disp_single_colour(Black);
   \   000005E2   0x2000             MOVS     R0,#+0
   \   000005E4   0x.... 0x....      BL       Disp_single_colour
    645                      LCD_PutString(10, 50,"Frequency: ", White, Black);
   \   000005E8   0x2000             MOVS     R0,#+0
   \   000005EA   0x9000             STR      R0,[SP, #+0]
   \   000005EC   0xF64F 0x73FF      MOVW     R3,#+65535
   \   000005F0   0x....             LDR.N    R2,??DataTable12_35
   \   000005F2   0x2132             MOVS     R1,#+50
   \   000005F4   0x200A             MOVS     R0,#+10
   \   000005F6   0x.... 0x....      BL       LCD_PutString
    646                      LCD_PutString(145, 50,"  KHz", White, Black);
   \   000005FA   0x2000             MOVS     R0,#+0
   \   000005FC   0x9000             STR      R0,[SP, #+0]
   \   000005FE   0xF64F 0x73FF      MOVW     R3,#+65535
   \   00000602   0x....             LDR.N    R2,??DataTable12_36
   \   00000604   0x2132             MOVS     R1,#+50
   \   00000606   0x2091             MOVS     R0,#+145
   \   00000608   0x.... 0x....      BL       LCD_PutString
    647                      LCD_PutString(10, 80,"Power: ", White, Black);
   \   0000060C   0x2000             MOVS     R0,#+0
   \   0000060E   0x9000             STR      R0,[SP, #+0]
   \   00000610   0xF64F 0x73FF      MOVW     R3,#+65535
   \   00000614   0x....             LDR.N    R2,??DataTable12_37
   \   00000616   0x2150             MOVS     R1,#+80
   \   00000618   0x200A             MOVS     R0,#+10
   \   0000061A   0x.... 0x....      BL       LCD_PutString
    648                      LCD_PutString(145, 80,"   W", White, Black);
   \   0000061E   0x2000             MOVS     R0,#+0
   \   00000620   0x9000             STR      R0,[SP, #+0]
   \   00000622   0xF64F 0x73FF      MOVW     R3,#+65535
   \   00000626   0x....             LDR.N    R2,??DataTable12_38
   \   00000628   0x2150             MOVS     R1,#+80
   \   0000062A   0x2091             MOVS     R0,#+145
   \   0000062C   0x.... 0x....      BL       LCD_PutString
    649                      LCD_PutString(10, 110,"Amplify: ", White, Black);
   \   00000630   0x2000             MOVS     R0,#+0
   \   00000632   0x9000             STR      R0,[SP, #+0]
   \   00000634   0xF64F 0x73FF      MOVW     R3,#+65535
   \   00000638   0x....             LDR.N    R2,??DataTable12_39
   \   0000063A   0x216E             MOVS     R1,#+110
   \   0000063C   0x200A             MOVS     R0,#+10
   \   0000063E   0x.... 0x....      BL       LCD_PutString
    650                      LCD_PutString(165, 110,"Restrain: ", White, Black);
   \   00000642   0x2000             MOVS     R0,#+0
   \   00000644   0x9000             STR      R0,[SP, #+0]
   \   00000646   0xF64F 0x73FF      MOVW     R3,#+65535
   \   0000064A   0x....             LDR.N    R2,??DataTable12_40
   \   0000064C   0x216E             MOVS     R1,#+110
   \   0000064E   0x20A5             MOVS     R0,#+165
   \   00000650   0x.... 0x....      BL       LCD_PutString
    651                      ShowMenu = 0;
   \   00000654   0x2000             MOVS     R0,#+0
   \   00000656   0x....             LDR.N    R1,??DataTable12_13
   \   00000658   0x8008             STRH     R0,[R1, #+0]
    652                    }
    653                    LCD_Put_Float(100, 110,"",MyDb/0.5, White, Black);
   \                     ??main_40: (+1)
   \   0000065A   0x2000             MOVS     R0,#+0
   \   0000065C   0x9000             STR      R0,[SP, #+0]
   \   0000065E   0xF64F 0x73FF      MOVW     R3,#+65535
   \   00000662   0x4698             MOV      R8,R3
   \   00000664   0x....             LDR.N    R0,??DataTable12_66
   \   00000666   0x6800             LDR      R0,[R0, #+0]
   \   00000668   0x.... 0x....      BL       __aeabi_f2d
   \   0000066C   0x2200             MOVS     R2,#+0
   \   0000066E   0x....             LDR.N    R3,??DataTable12_70  ;; 0x3fe00000
   \   00000670   0x.... 0x....      BL       __aeabi_ddiv
   \   00000674   0x.... 0x....      BL       __aeabi_d2f
   \   00000678   0xEE00 0x0A10      VMOV     S0,R0
   \   0000067C   0x4643             MOV      R3,R8
   \   0000067E   0x....             ADR.N    R2,??DataTable12_7  ;; ""
   \   00000680   0x216E             MOVS     R1,#+110
   \   00000682   0x2064             MOVS     R0,#+100
   \   00000684   0x.... 0x....      BL       LCD_Put_Float
    654                    if(starfir)
   \   00000688   0x....             LDR.N    R0,??DataTable12_11
   \   0000068A   0x7800             LDRB     R0,[R0, #+0]
   \   0000068C   0x2800             CMP      R0,#+0
   \   0000068E   0xD00A             BEQ.N    ??main_41
    655                      LCD_PutString(260, 110,"On  ", White, Black);
   \   00000690   0x2000             MOVS     R0,#+0
   \   00000692   0x9000             STR      R0,[SP, #+0]
   \   00000694   0xF64F 0x73FF      MOVW     R3,#+65535
   \   00000698   0x....             LDR.N    R2,??DataTable12_71
   \   0000069A   0x216E             MOVS     R1,#+110
   \   0000069C   0xF44F 0x7082      MOV      R0,#+260
   \   000006A0   0x.... 0x....      BL       LCD_PutString
   \   000006A4   0xE016             B.N      ??main_39
    656                    else
    657                      LCD_PutString(260, 110,"Off", White, Black);
   \                     ??main_41: (+1)
   \   000006A6   0x2000             MOVS     R0,#+0
   \   000006A8   0x9000             STR      R0,[SP, #+0]
   \   000006AA   0xF64F 0x73FF      MOVW     R3,#+65535
   \   000006AE   0x....             ADR.N    R2,??DataTable12_9  ;; "Off"
   \   000006B0   0x216E             MOVS     R1,#+110
   \   000006B2   0xF44F 0x7082      MOV      R0,#+260
   \   000006B6   0x.... 0x....      BL       LCD_PutString
   \   000006BA   0xE00B             B.N      ??main_39
    658                  }
    659                }
    660                else
    661                {
    662                  if(ShowMenu)
   \                     ??main_38: (+1)
   \   000006BC   0x....             LDR.N    R0,??DataTable12_13
   \   000006BE   0x8800             LDRH     R0,[R0, #+0]
   \   000006C0   0x2800             CMP      R0,#+0
   \   000006C2   0xD005             BEQ.N    ??main_42
    663                  {        
    664                    Disp_single_colour(Black);
   \   000006C4   0x2000             MOVS     R0,#+0
   \   000006C6   0x.... 0x....      BL       Disp_single_colour
    665                    ShowMenu = 0;
   \   000006CA   0x2000             MOVS     R0,#+0
   \   000006CC   0x....             LDR.N    R1,??DataTable12_13
   \   000006CE   0x8008             STRH     R0,[R1, #+0]
    666                  }
    667                  draw_fft();
   \                     ??main_42: (+1)
   \   000006D0   0x.... 0x....      BL       draw_fft
    668                }
    669                flag = 0;
   \                     ??main_39: (+1)
   \   000006D4   0x2000             MOVS     R0,#+0
   \   000006D6   0x4683             MOV      R11,R0
   \   000006D8   0xE506             B.N      ??main_0
   \   000006DA   0xBF00             Nop      
   \                     ??main_21:
   \   000006DC   0x45000000         DC32     0x45000000
   \   000006E0   0x44268000         DC32     0x44268000
    670              }
    671              
    672            } 
    673          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x451F3000         DC32     0x451f3000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x3FA66667         DC32     0x3fa66667

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     FFT_RESULT_NEW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     FFT_RESULT_OLD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     Result_B

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x400091F0         DC32     0x400091f0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x........         DC32     Result_C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     Result_A

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     bufflag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x........         DC32     MyDb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x........         DC32     value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0x400CC000         DC32     0x400cc000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     Result_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x400490A0         DC32     0x400490a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x43FE0218         DC32     0x43fe0218

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x47AE147B         DC32     0x47ae147b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x3F847AE1         DC32     0x3f847ae1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x3FA66666         DC32     0x3fa66666

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x43FE021C         DC32     0x43fe021c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0xBF847AE1         DC32     0xbf847ae1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x4F 0x66          DC8      "Off"
   \              0x66 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x43FE0228         DC32     0x43fe0228

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x........         DC32     starfir

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x3ECCCCCD         DC32     0x3ecccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0x........         DC32     ShowMenu

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0x4004C0A0         DC32     0x4004c0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \   00000000   0x43FE1A1C         DC32     0x43fe1a1c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \   00000000   0x........         DC32     myflag2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \   00000000   0x........         DC32     adc0_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_19:
   \   00000000   0x400BB000         DC32     0x400bb000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_20:
   \   00000000   0x........         DC32     dma_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_21:
   \   00000000   0x4003B010         DC32     0x4003b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_22:
   \   00000000   0x........         DC32     dmaisr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_23:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_24:
   \   00000000   0x........         DC32     dac0_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_25:
   \   00000000   0x........         DC32     pdb_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_26:
   \   00000000   0x........         DC32     pit0_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_27:
   \   00000000   0x........         DC32     pitdacisr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_28:
   \   00000000   0x400FF0C0         DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_29:
   \   00000000   0x........         DC32     gpio_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_30:
   \   00000000   0x........         DC32     buttonsetisr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_31:
   \   00000000   0x000A0003         DC32     0xa0003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_32:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_33:
   \   00000000   0x........         DC32     buttonisr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_34:
   \   00000000   0xE000ED88         DC32     0xe000ed88

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_35:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_36:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_37:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_38:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_39:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_40:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_41:
   \   00000000   0x........         DC32     blockSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_42:
   \   00000000   0x........         DC32     firStateF32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_43:
   \   00000000   0x........         DC32     firCoeffs32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_44:
   \   00000000   0x........         DC32     S

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_45:
   \   00000000   0x........         DC32     Result_A

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_46:
   \   00000000   0x........         DC32     testInput_x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_47:
   \   00000000   0x........         DC32     doBitReverse

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_48:
   \   00000000   0x........         DC32     ifftFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_49:
   \   00000000   0x........         DC32     arm_cfft_sR_f32_len2048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_50:
   \   00000000   0x........         DC32     fftSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_51:
   \   00000000   0x........         DC32     testOutput

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_52:
   \   00000000   0x........         DC32     testIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_53:
   \   00000000   0x........         DC32     maxValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_54:
   \   00000000   0x40440000         DC32     0x40440000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_55:
   \   00000000   0x40A00000         DC32     0x40a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_56:
   \   00000000   0x43FE2060         DC32     0x43fe2060

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_57:
   \   00000000   0x........         DC32     firInput

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_58:
   \   00000000   0x........         DC32     inputF32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_59:
   \   00000000   0x........         DC32     firOutput

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_60:
   \   00000000   0x........         DC32     outputF32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_61:
   \   00000000   0x........         DC32     numBlocks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_62:
   \   00000000   0x........         DC32     power

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_63:
   \   00000000   0x........         DC32     Result_B

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_64:
   \   00000000   0x40936400         DC32     0x40936400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_65:
   \   00000000   0x40568000         DC32     0x40568000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_66:
   \   00000000   0x........         DC32     MyDb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_67:
   \   00000000   0x40200000         DC32     0x40200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_68:
   \   00000000   0x........         DC32     FFT_RESULT_NEW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_69:
   \   00000000   0x........         DC32     Result_C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_70:
   \   00000000   0x3FE00000         DC32     0x3fe00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_71:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x46 0x72          DC8 "Frequency: "
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x6E 0x63    
   \              0x79 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x20 0x20          DC8 "  KHz"
   \              0x4B 0x48    
   \              0x7A 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x50 0x6F          DC8 "Power: "
   \              0x77 0x65    
   \              0x72 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x20 0x20          DC8 "   W"
   \              0x20 0x57    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x41 0x6D          DC8 "Amplify: "
   \              0x70 0x6C    
   \              0x69 0x66    
   \              0x79 0x3A    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x52 0x65          DC8 "Restrain: "
   \              0x73 0x74    
   \              0x72 0x61    
   \              0x69 0x6E    
   \              0x3A 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x4F 0x6E          DC8 "On  "
   \              0x20 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x4F 0x66          DC8 "Off"
   \              0x66 0x00    
    674          
    675          
    676          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   NVIC_EnableIRQ
       8   buttonisr
         8   -> __aeabi_d2f
         8   -> __aeabi_dadd
         8   -> __aeabi_f2d
       0   buttonsetisr
       0   dmaisr
      16   draw_fft
        16   -> LCD_SetPos
        16   -> write_word
      24   init_ADC
         8   -> LPLD_ADC_Chn_Enable
         8   -> LPLD_ADC_EnableConversion
         8   -> LPLD_ADC_Init
        24   -> __aeabi_memcpy4
      32   init_DAC
        16   -> LPLD_DAC_Init
        32   -> __aeabi_memcpy4
      48   init_DMA
        32   -> LPLD_DMA_EnableIrq
        32   -> LPLD_DMA_Init
        48   -> __aeabi_memcpy4
      48   init_PDB
        32   -> LPLD_PDB_AdcTriggerCfg
        32   -> LPLD_PDB_Init
        32   -> NVIC_EnableIRQ
        48   -> __aeabi_memcpy4
      24   init_PIT
         8   -> LPLD_PIT_EnableIrq
         8   -> LPLD_PIT_Init
        24   -> __aeabi_memcpy4
      24   init_gpio_PE24
         8   -> LPLD_GPIO_EnableIrq
         8   -> LPLD_GPIO_Init
        24   -> __aeabi_memcpy4
      48   main
        48   -> Disp_single_colour
        48   -> LCD_PutString
        48   -> LCD_Put_Float
        48   -> LCD_init
        48   -> LPLD_LPTMR_DelayMs
        48   -> __aeabi_d2f
        48   -> __aeabi_dadd
        48   -> __aeabi_ddiv
        48   -> __aeabi_dmul
        48   -> __aeabi_f2d
        48   -> __aeabi_i2d
        48   -> __aeabi_ui2d
        48   -> arm_cfft_f32
        48   -> arm_cmplx_mag_f32
        48   -> arm_fir_f32
        48   -> arm_fir_init_f32
        48   -> arm_max_f32
        48   -> draw_fft
        48   -> init_ADC
        48   -> init_DAC
        48   -> init_DMA
        48   -> init_PDB
        48   -> init_PIT
        48   -> init_gpio_PE24
       8   pitdacisr
         8   -> LPLD_DAC_SetBufferDataN
         8   -> LPLD_DAC_SoftwareTrigger


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_26
       4  ??DataTable12_27
       4  ??DataTable12_28
       4  ??DataTable12_29
       4  ??DataTable12_3
       4  ??DataTable12_30
       4  ??DataTable12_31
       4  ??DataTable12_32
       4  ??DataTable12_33
       4  ??DataTable12_34
       4  ??DataTable12_35
       4  ??DataTable12_36
       4  ??DataTable12_37
       4  ??DataTable12_38
       4  ??DataTable12_39
       4  ??DataTable12_4
       4  ??DataTable12_40
       4  ??DataTable12_41
       4  ??DataTable12_42
       4  ??DataTable12_43
       4  ??DataTable12_44
       4  ??DataTable12_45
       4  ??DataTable12_46
       4  ??DataTable12_47
       4  ??DataTable12_48
       4  ??DataTable12_49
       4  ??DataTable12_5
       4  ??DataTable12_50
       4  ??DataTable12_51
       4  ??DataTable12_52
       4  ??DataTable12_53
       4  ??DataTable12_54
       4  ??DataTable12_55
       4  ??DataTable12_56
       4  ??DataTable12_57
       4  ??DataTable12_58
       4  ??DataTable12_59
       4  ??DataTable12_6
       4  ??DataTable12_60
       4  ??DataTable12_61
       4  ??DataTable12_62
       4  ??DataTable12_63
       4  ??DataTable12_64
       4  ??DataTable12_65
       4  ??DataTable12_66
       4  ??DataTable12_67
       4  ??DataTable12_68
       4  ??DataTable12_69
       4  ??DataTable12_7
       4  ??DataTable12_70
       4  ??DataTable12_71
       4  ??DataTable12_8
       4  ??DataTable12_9
       4  ??DataTable4
       4  ??DataTable7
      12  ?_0
       8  ?_1
       8  ?_2
       8  ?_3
      12  ?_4
      12  ?_5
       1  ?_6
       8  ?_7
       4  ?_8
     320  FFT_RESULT_NEW
     320  FFT_RESULT_OLD
       4  MyDb
      22  NVIC_EnableIRQ
    4100  Result_A
    4100  Result_B
    4100  Result_C
       2  Result_flag
      12  S
       2  ShowMenu
      20  adc0_init_struct
       4  blockSize
       2  bufflag
     346  buttonisr
      96  buttonsetisr
      28  dac0_init_struct
      44  dma2_init_struct
      44  dma_init_struct
      90  dmaisr
       4  doBitReverse
     246  draw_fft
       4  fftSize
    1028  firCoeffs32
    8192  firInput
    8192  firOutput
    2048  firStateF32
       2  flag
      20  gpio_init_struct
       4  ifftFlag
     152  init_ADC
      32  init_DAC
     178  init_DMA
      80  init_PDB
      70  init_PIT
     178  init_gpio_PE24
       4  inputF32
    1764  main
       4  maxValue
       1  myflag2
       4  numBlocks
       4  outputF32
      40  pdb_init_struct
      20  pit0_init_struct
     410  pitdacisr
       4  power
       1  starfir
       4  testIndex
   16384  testInput_x
    8192  testOutput
       2  value

 
 56 208 bytes in section .bss
     24 bytes in section .data
  1 101 bytes in section .rodata
  4 008 bytes in section .text
 
  4 008 bytes of CODE  memory
  1 101 bytes of CONST memory
 56 232 bytes of DATA  memory

Errors: none
Warnings: 7
